
adc_over_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005120  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  080052b8  080052b8  000062b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055b0  080055b0  00007018  2**0
                  CONTENTS
  4 .ARM          00000000  080055b0  080055b0  00007018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055b0  080055b0  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055b0  080055b0  000065b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055b4  080055b4  000065b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080055b8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007018  2**0
                  CONTENTS
 10 .bss          0000bf94  20000018  20000018  00007018  2**2
                  ALLOC
 11 ._user_heap_stack 00002a04  2000bfac  2000bfac  00007018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 13 .debug_line   00025ca9  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000006a  00000000  00000000  0002ccf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000230d7  00000000  00000000  0002cd5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000471e  00000000  00000000  0004fe32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001140  00000000  00000000  00054550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3d62  00000000  00000000  00055690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000154b  00000000  00000000  001293f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0000dc2f  00000000  00000000  0012a93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00022937  00000000  00000000  0013856c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0015aea3  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000030a4  00000000  00000000  0015aee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080052a0 	.word	0x080052a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	080052a0 	.word	0x080052a0

080001d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000210 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80001dc:	f004 fc42 	bl	8004a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001e0:	480c      	ldr	r0, [pc, #48]	@ (8000214 <LoopForever+0x6>)
  ldr r1, =_edata
 80001e2:	490d      	ldr	r1, [pc, #52]	@ (8000218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001e4:	4a0d      	ldr	r2, [pc, #52]	@ (800021c <LoopForever+0xe>)
  movs r3, #0
 80001e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001e8:	e002      	b.n	80001f0 <LoopCopyDataInit>

080001ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ee:	3304      	adds	r3, #4

080001f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001f4:	d3f9      	bcc.n	80001ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000224 <LoopForever+0x16>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001fc:	e001      	b.n	8000202 <LoopFillZerobss>

080001fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000200:	3204      	adds	r2, #4

08000202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000204:	d3fb      	bcc.n	80001fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000206:	f005 f827 	bl	8005258 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800020a:	f003 ff0f 	bl	800402c <main>

0800020e <LoopForever>:

LoopForever:
    b LoopForever
 800020e:	e7fe      	b.n	800020e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000210:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000218:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800021c:	080055b8 	.word	0x080055b8
  ldr r2, =_sbss
 8000220:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000224:	2000bfac 	.word	0x2000bfac

08000228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000228:	e7fe      	b.n	8000228 <ADC1_2_IRQHandler>
	...

0800022c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800022c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800022e:	4a0e      	ldr	r2, [pc, #56]	@ (8000268 <HAL_InitTick+0x3c>)
 8000230:	4b0e      	ldr	r3, [pc, #56]	@ (800026c <HAL_InitTick+0x40>)
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	681b      	ldr	r3, [r3, #0]
{
 8000236:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000238:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800023c:	fbb0 f0f2 	udiv	r0, r0, r2
 8000240:	fbb3 f0f0 	udiv	r0, r3, r0
 8000244:	f000 ff70 	bl	8001128 <HAL_SYSTICK_Config>
 8000248:	b908      	cbnz	r0, 800024e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800024a:	2d0f      	cmp	r5, #15
 800024c:	d901      	bls.n	8000252 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800024e:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000250:	bd38      	pop	{r3, r4, r5, pc}
 8000252:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000254:	4602      	mov	r2, r0
 8000256:	4629      	mov	r1, r5
 8000258:	f04f 30ff 	mov.w	r0, #4294967295
 800025c:	f000 ff0a 	bl	8001074 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000260:	4b03      	ldr	r3, [pc, #12]	@ (8000270 <HAL_InitTick+0x44>)
 8000262:	4620      	mov	r0, r4
 8000264:	601d      	str	r5, [r3, #0]
}
 8000266:	bd38      	pop	{r3, r4, r5, pc}
 8000268:	20000000 	.word	0x20000000
 800026c:	20000008 	.word	0x20000008
 8000270:	20000004 	.word	0x20000004

08000274 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	4a07      	ldr	r2, [pc, #28]	@ (8000294 <HAL_Init+0x20>)
{
 8000276:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000278:	6813      	ldr	r3, [r2, #0]
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000280:	2003      	movs	r0, #3
 8000282:	f000 fed9 	bl	8001038 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000286:	2000      	movs	r0, #0
 8000288:	f7ff ffd0 	bl	800022c <HAL_InitTick>
  HAL_MspInit();
 800028c:	f004 f9b8 	bl	8004600 <HAL_MspInit>
}
 8000290:	2000      	movs	r0, #0
 8000292:	bd08      	pop	{r3, pc}
 8000294:	40022000 	.word	0x40022000

08000298 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000298:	4a03      	ldr	r2, [pc, #12]	@ (80002a8 <HAL_IncTick+0x10>)
 800029a:	4b04      	ldr	r3, [pc, #16]	@ (80002ac <HAL_IncTick+0x14>)
 800029c:	6811      	ldr	r1, [r2, #0]
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	440b      	add	r3, r1
 80002a2:	6013      	str	r3, [r2, #0]
}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20000034 	.word	0x20000034
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80002b0:	4b01      	ldr	r3, [pc, #4]	@ (80002b8 <HAL_GetTick+0x8>)
 80002b2:	6818      	ldr	r0, [r3, #0]
}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	20000034 	.word	0x20000034

080002bc <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80002c0:	6802      	ldr	r2, [r0, #0]
{
 80002c2:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80002c4:	6893      	ldr	r3, [r2, #8]
 80002c6:	f003 0303 	and.w	r3, r3, #3
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d001      	beq.n	80002d2 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80002ce:	2000      	movs	r0, #0
}
 80002d0:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80002d2:	6813      	ldr	r3, [r2, #0]
 80002d4:	07dc      	lsls	r4, r3, #31
 80002d6:	d5fa      	bpl.n	80002ce <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80002d8:	6893      	ldr	r3, [r2, #8]
 80002da:	f003 030d 	and.w	r3, r3, #13
 80002de:	2b01      	cmp	r3, #1
 80002e0:	4604      	mov	r4, r0
 80002e2:	d009      	beq.n	80002f8 <ADC_Disable+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80002e6:	f043 0310 	orr.w	r3, r3, #16
 80002ea:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002ec:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 80002f4:	2001      	movs	r0, #1
}
 80002f6:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 80002f8:	6893      	ldr	r3, [r2, #8]
 80002fa:	2103      	movs	r1, #3
 80002fc:	f043 0302 	orr.w	r3, r3, #2
 8000300:	6093      	str	r3, [r2, #8]
 8000302:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8000304:	f7ff ffd4 	bl	80002b0 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000308:	6823      	ldr	r3, [r4, #0]
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 800030e:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000310:	d5dd      	bpl.n	80002ce <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000312:	f7ff ffcd 	bl	80002b0 <HAL_GetTick>
 8000316:	1b40      	subs	r0, r0, r5
 8000318:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800031a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800031c:	d902      	bls.n	8000324 <ADC_Disable+0x64>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800031e:	689a      	ldr	r2, [r3, #8]
 8000320:	07d2      	lsls	r2, r2, #31
 8000322:	d4df      	bmi.n	80002e4 <ADC_Disable+0x24>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	07db      	lsls	r3, r3, #31
 8000328:	d4f3      	bmi.n	8000312 <ADC_Disable+0x52>
 800032a:	e7d0      	b.n	80002ce <ADC_Disable+0xe>

0800032c <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 800032c:	6802      	ldr	r2, [r0, #0]
{
 800032e:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000330:	6893      	ldr	r3, [r2, #8]
 8000332:	f003 0303 	and.w	r3, r3, #3
 8000336:	2b01      	cmp	r3, #1
{
 8000338:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800033a:	d026      	beq.n	800038a <ADC_Enable+0x5e>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800033c:	6891      	ldr	r1, [r2, #8]
 800033e:	4b15      	ldr	r3, [pc, #84]	@ (8000394 <ADC_Enable+0x68>)
 8000340:	4219      	tst	r1, r3
 8000342:	d009      	beq.n	8000358 <ADC_Enable+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000344:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800034c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 8000354:	2001      	movs	r0, #1
}
 8000356:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000358:	6893      	ldr	r3, [r2, #8]
 800035a:	f043 0301 	orr.w	r3, r3, #1
 800035e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8000360:	f7ff ffa6 	bl	80002b0 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000364:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8000366:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	07d9      	lsls	r1, r3, #31
 800036c:	d40b      	bmi.n	8000386 <ADC_Enable+0x5a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800036e:	f7ff ff9f 	bl	80002b0 <HAL_GetTick>
 8000372:	1b43      	subs	r3, r0, r5
 8000374:	2b02      	cmp	r3, #2
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000376:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000378:	d9f6      	bls.n	8000368 <ADC_Enable+0x3c>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	07d2      	lsls	r2, r2, #31
 800037e:	d5e1      	bpl.n	8000344 <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	07d9      	lsls	r1, r3, #31
 8000384:	d5f3      	bpl.n	800036e <ADC_Enable+0x42>
  return HAL_OK;
 8000386:	2000      	movs	r0, #0
}
 8000388:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800038a:	6813      	ldr	r3, [r2, #0]
 800038c:	07d8      	lsls	r0, r3, #31
 800038e:	d5d5      	bpl.n	800033c <ADC_Enable+0x10>
  return HAL_OK;
 8000390:	2000      	movs	r0, #0
 8000392:	e7f9      	b.n	8000388 <ADC_Enable+0x5c>
 8000394:	8000003f 	.word	0x8000003f

08000398 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000398:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800039a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800039c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003a0:	6403      	str	r3, [r0, #64]	@ 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80003a2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80003a4:	f043 0304 	orr.w	r3, r3, #4
 80003a8:	6443      	str	r3, [r0, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 80003aa:	f7ff bf87 	b.w	80002bc <HAL_ADC_ErrorCallback>
 80003ae:	bf00      	nop

080003b0 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80003b0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80003b2:	f004 bcdf 	b.w	8004d74 <HAL_ADC_ConvHalfCpltCallback>
 80003b6:	bf00      	nop

080003b8 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80003b8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80003ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003bc:	f012 0f50 	tst.w	r2, #80	@ 0x50
 80003c0:	d118      	bne.n	80003f4 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80003c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80003c4:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80003c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80003ca:	641a      	str	r2, [r3, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80003cc:	68ca      	ldr	r2, [r1, #12]
 80003ce:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80003d2:	d10c      	bne.n	80003ee <ADC_DMAConvCplt+0x36>
 80003d4:	7e5a      	ldrb	r2, [r3, #25]
 80003d6:	b952      	cbnz	r2, 80003ee <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80003d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80003de:	641a      	str	r2, [r3, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80003e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003e2:	04d2      	lsls	r2, r2, #19
 80003e4:	d403      	bmi.n	80003ee <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80003e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003e8:	f042 0201 	orr.w	r2, r2, #1
 80003ec:	641a      	str	r2, [r3, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 80003ee:	4618      	mov	r0, r3
 80003f0:	f004 bcde 	b.w	8004db0 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80003f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f8:	4718      	bx	r3
 80003fa:	bf00      	nop

080003fc <HAL_ADC_Init>:
{
 80003fc:	b530      	push	{r4, r5, lr}
 80003fe:	b097      	sub	sp, #92	@ 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000400:	2300      	movs	r3, #0
 8000402:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8000404:	2800      	cmp	r0, #0
 8000406:	f000 80aa 	beq.w	800055e <HAL_ADC_Init+0x162>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800040a:	6803      	ldr	r3, [r0, #0]
 800040c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000410:	4604      	mov	r4, r0
 8000412:	d00e      	beq.n	8000432 <HAL_ADC_Init+0x36>
 8000414:	4aa3      	ldr	r2, [pc, #652]	@ (80006a4 <HAL_ADC_Init+0x2a8>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d00b      	beq.n	8000432 <HAL_ADC_Init+0x36>
 800041a:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 800041e:	4293      	cmp	r3, r2
 8000420:	d007      	beq.n	8000432 <HAL_ADC_Init+0x36>
 8000422:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8000426:	4293      	cmp	r3, r2
 8000428:	d003      	beq.n	8000432 <HAL_ADC_Init+0x36>
 800042a:	489f      	ldr	r0, [pc, #636]	@ (80006a8 <HAL_ADC_Init+0x2ac>)
 800042c:	21f2      	movs	r1, #242	@ 0xf2
 800042e:	f004 f8e5 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8000432:	6863      	ldr	r3, [r4, #4]
 8000434:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
 8000438:	d003      	beq.n	8000442 <HAL_ADC_Init+0x46>
 800043a:	489b      	ldr	r0, [pc, #620]	@ (80006a8 <HAL_ADC_Init+0x2ac>)
 800043c:	21f3      	movs	r1, #243	@ 0xf3
 800043e:	f004 f8dd 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8000442:	68a3      	ldr	r3, [r4, #8]
 8000444:	b153      	cbz	r3, 800045c <HAL_ADC_Init+0x60>
 8000446:	2b18      	cmp	r3, #24
 8000448:	d804      	bhi.n	8000454 <HAL_ADC_Init+0x58>
 800044a:	4a98      	ldr	r2, [pc, #608]	@ (80006ac <HAL_ADC_Init+0x2b0>)
 800044c:	fa22 f303 	lsr.w	r3, r2, r3
 8000450:	07dd      	lsls	r5, r3, #31
 8000452:	d403      	bmi.n	800045c <HAL_ADC_Init+0x60>
 8000454:	4894      	ldr	r0, [pc, #592]	@ (80006a8 <HAL_ADC_Init+0x2ac>)
 8000456:	21f4      	movs	r1, #244	@ 0xf4
 8000458:	f004 f8d0 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 800045c:	68e3      	ldr	r3, [r4, #12]
 800045e:	f033 0320 	bics.w	r3, r3, #32
 8000462:	d003      	beq.n	800046c <HAL_ADC_Init+0x70>
 8000464:	4890      	ldr	r0, [pc, #576]	@ (80006a8 <HAL_ADC_Init+0x2ac>)
 8000466:	21f5      	movs	r1, #245	@ 0xf5
 8000468:	f004 f8c8 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800046c:	6923      	ldr	r3, [r4, #16]
 800046e:	2b01      	cmp	r3, #1
 8000470:	f200 80f8 	bhi.w	8000664 <HAL_ADC_Init+0x268>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000474:	7e63      	ldrb	r3, [r4, #25]
 8000476:	2b01      	cmp	r3, #1
 8000478:	f200 80ea 	bhi.w	8000650 <HAL_ADC_Init+0x254>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800047c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800047e:	f433 6340 	bics.w	r3, r3, #3072	@ 0xc00
 8000482:	d003      	beq.n	800048c <HAL_ADC_Init+0x90>
 8000484:	4888      	ldr	r0, [pc, #544]	@ (80006a8 <HAL_ADC_Init+0x2ac>)
 8000486:	21f8      	movs	r1, #248	@ 0xf8
 8000488:	f004 f8b8 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800048c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800048e:	2b01      	cmp	r3, #1
 8000490:	d925      	bls.n	80004de <HAL_ADC_Init+0xe2>
 8000492:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000496:	2a40      	cmp	r2, #64	@ 0x40
 8000498:	d021      	beq.n	80004de <HAL_ADC_Init+0xe2>
 800049a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800049e:	f5b2 7fe0 	cmp.w	r2, #448	@ 0x1c0
 80004a2:	d01c      	beq.n	80004de <HAL_ADC_Init+0xe2>
 80004a4:	f423 7210 	bic.w	r2, r3, #576	@ 0x240
 80004a8:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80004ac:	d017      	beq.n	80004de <HAL_ADC_Init+0xe2>
 80004ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80004b2:	2a80      	cmp	r2, #128	@ 0x80
 80004b4:	d013      	beq.n	80004de <HAL_ADC_Init+0xe2>
 80004b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80004ba:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80004be:	d00e      	beq.n	80004de <HAL_ADC_Init+0xe2>
 80004c0:	f5b3 7f60 	cmp.w	r3, #896	@ 0x380
 80004c4:	d00b      	beq.n	80004de <HAL_ADC_Init+0xe2>
 80004c6:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 80004ca:	d008      	beq.n	80004de <HAL_ADC_Init+0xe2>
 80004cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004d0:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 80004d4:	d003      	beq.n	80004de <HAL_ADC_Init+0xe2>
 80004d6:	4874      	ldr	r0, [pc, #464]	@ (80006a8 <HAL_ADC_Init+0x2ac>)
 80004d8:	21f9      	movs	r1, #249	@ 0xf9
 80004da:	f004 f88f 	bl	80045fc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80004de:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	f200 80d9 	bhi.w	800069a <HAL_ADC_Init+0x29e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80004e8:	6963      	ldr	r3, [r4, #20]
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	d002      	beq.n	80004f4 <HAL_ADC_Init+0xf8>
 80004ee:	2b08      	cmp	r3, #8
 80004f0:	f040 80e6 	bne.w	80006c0 <HAL_ADC_Init+0x2c4>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 80004f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	f200 80c6 	bhi.w	8000688 <HAL_ADC_Init+0x28c>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 80004fc:	7e23      	ldrb	r3, [r4, #24]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	f200 80b9 	bhi.w	8000676 <HAL_ADC_Init+0x27a>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000504:	6923      	ldr	r3, [r4, #16]
 8000506:	b17b      	cbz	r3, 8000528 <HAL_ADC_Init+0x12c>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000508:	69e3      	ldr	r3, [r4, #28]
 800050a:	3b01      	subs	r3, #1
 800050c:	2b0f      	cmp	r3, #15
 800050e:	f200 810e 	bhi.w	800072e <HAL_ADC_Init+0x332>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000512:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000516:	2b01      	cmp	r3, #1
 8000518:	f200 80ed 	bhi.w	80006f6 <HAL_ADC_Init+0x2fa>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800051c:	b123      	cbz	r3, 8000528 <HAL_ADC_Init+0x12c>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800051e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000520:	3b01      	subs	r3, #1
 8000522:	2b07      	cmp	r3, #7
 8000524:	f200 80ef 	bhi.w	8000706 <HAL_ADC_Init+0x30a>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000528:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800052a:	f010 0010 	ands.w	r0, r0, #16
 800052e:	d119      	bne.n	8000564 <HAL_ADC_Init+0x168>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000530:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8000532:	2d00      	cmp	r5, #0
 8000534:	f000 80ed 	beq.w	8000712 <HAL_ADC_Init+0x316>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000538:	6823      	ldr	r3, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	00d2      	lsls	r2, r2, #3
 800053e:	f140 80c8 	bpl.w	80006d2 <HAL_ADC_Init+0x2d6>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000542:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000544:	0095      	lsls	r5, r2, #2
 8000546:	f100 80c4 	bmi.w	80006d2 <HAL_ADC_Init+0x2d6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800054a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800054c:	06d1      	lsls	r1, r2, #27
 800054e:	d400      	bmi.n	8000552 <HAL_ADC_Init+0x156>
 8000550:	b160      	cbz	r0, 800056c <HAL_ADC_Init+0x170>
    ADC_STATE_CLR_SET(hadc->State,
 8000552:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000554:	f023 0312 	bic.w	r3, r3, #18
 8000558:	f043 0310 	orr.w	r3, r3, #16
 800055c:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 800055e:	2001      	movs	r0, #1
}
 8000560:	b017      	add	sp, #92	@ 0x5c
 8000562:	bd30      	pop	{r4, r5, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000564:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000566:	06d8      	lsls	r0, r3, #27
 8000568:	d4f3      	bmi.n	8000552 <HAL_ADC_Init+0x156>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800056a:	6823      	ldr	r3, [r4, #0]
 800056c:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800056e:	0752      	lsls	r2, r2, #29
 8000570:	d4ef      	bmi.n	8000552 <HAL_ADC_Init+0x156>
    ADC_STATE_CLR_SET(hadc->State,
 8000572:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8000574:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8000578:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800057c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8000580:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000582:	4a48      	ldr	r2, [pc, #288]	@ (80006a4 <HAL_ADC_Init+0x2a8>)
 8000584:	f000 8142 	beq.w	800080c <HAL_ADC_Init+0x410>
 8000588:	4293      	cmp	r3, r2
 800058a:	f000 8146 	beq.w	800081a <HAL_ADC_Init+0x41e>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800058e:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8000592:	4293      	cmp	r3, r2
 8000594:	f000 80d1 	beq.w	800073a <HAL_ADC_Init+0x33e>
 8000598:	4945      	ldr	r1, [pc, #276]	@ (80006b0 <HAL_ADC_Init+0x2b4>)
 800059a:	428b      	cmp	r3, r1
 800059c:	f000 814f 	beq.w	800083e <HAL_ADC_Init+0x442>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80005a0:	689a      	ldr	r2, [r3, #8]
 80005a2:	f002 0203 	and.w	r2, r2, #3
 80005a6:	2a01      	cmp	r2, #1
 80005a8:	f000 814b 	beq.w	8000842 <HAL_ADC_Init+0x446>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80005ac:	4841      	ldr	r0, [pc, #260]	@ (80006b4 <HAL_ADC_Init+0x2b8>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 80005ae:	6882      	ldr	r2, [r0, #8]
 80005b0:	6861      	ldr	r1, [r4, #4]
 80005b2:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80005b6:	430a      	orrs	r2, r1
 80005b8:	6082      	str	r2, [r0, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80005ba:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80005be:	430a      	orrs	r2, r1
 80005c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80005c2:	7e60      	ldrb	r0, [r4, #25]
 80005c4:	3901      	subs	r1, #1
 80005c6:	bf18      	it	ne
 80005c8:	2101      	movne	r1, #1
 80005ca:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 80005ce:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005d2:	f894 1020 	ldrb.w	r1, [r4, #32]
 80005d6:	2901      	cmp	r1, #1
 80005d8:	f000 80f3 	beq.w	80007c2 <HAL_ADC_Init+0x3c6>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005dc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80005de:	2901      	cmp	r1, #1
 80005e0:	d00e      	beq.n	8000600 <HAL_ADC_Init+0x204>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80005e2:	4835      	ldr	r0, [pc, #212]	@ (80006b8 <HAL_ADC_Init+0x2bc>)
 80005e4:	4283      	cmp	r3, r0
 80005e6:	f000 80fc 	beq.w	80007e2 <HAL_ADC_Init+0x3e6>
 80005ea:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 80005ee:	4283      	cmp	r3, r0
 80005f0:	f000 80f7 	beq.w	80007e2 <HAL_ADC_Init+0x3e6>
 80005f4:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 80005f8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80005fa:	4310      	orrs	r0, r2
 80005fc:	ea41 0200 	orr.w	r2, r1, r0
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000600:	6899      	ldr	r1, [r3, #8]
 8000602:	f011 0f0c 	tst.w	r1, #12
 8000606:	d10c      	bne.n	8000622 <HAL_ADC_Init+0x226>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000608:	68d9      	ldr	r1, [r3, #12]
 800060a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800060e:	f021 0102 	bic.w	r1, r1, #2
 8000612:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000614:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8000618:	7e20      	ldrb	r0, [r4, #24]
 800061a:	0049      	lsls	r1, r1, #1
 800061c:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 8000620:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8000622:	68d8      	ldr	r0, [r3, #12]
 8000624:	4925      	ldr	r1, [pc, #148]	@ (80006bc <HAL_ADC_Init+0x2c0>)
 8000626:	4001      	ands	r1, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000628:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 800062a:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800062c:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 800062e:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000630:	f000 80cf 	beq.w	80007d2 <HAL_ADC_Init+0x3d6>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000634:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000636:	f022 020f 	bic.w	r2, r2, #15
 800063a:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800063c:	2000      	movs	r0, #0
 800063e:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000640:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000642:	f023 0303 	bic.w	r3, r3, #3
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800064c:	b017      	add	sp, #92	@ 0x5c
 800064e:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000650:	4815      	ldr	r0, [pc, #84]	@ (80006a8 <HAL_ADC_Init+0x2ac>)
 8000652:	21f7      	movs	r1, #247	@ 0xf7
 8000654:	f003 ffd2 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000658:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800065a:	f433 6340 	bics.w	r3, r3, #3072	@ 0xc00
 800065e:	f43f af15 	beq.w	800048c <HAL_ADC_Init+0x90>
 8000662:	e70f      	b.n	8000484 <HAL_ADC_Init+0x88>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000664:	4810      	ldr	r0, [pc, #64]	@ (80006a8 <HAL_ADC_Init+0x2ac>)
 8000666:	21f6      	movs	r1, #246	@ 0xf6
 8000668:	f003 ffc8 	bl	80045fc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800066c:	7e63      	ldrb	r3, [r4, #25]
 800066e:	2b01      	cmp	r3, #1
 8000670:	f67f af04 	bls.w	800047c <HAL_ADC_Init+0x80>
 8000674:	e7ec      	b.n	8000650 <HAL_ADC_Init+0x254>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8000676:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <HAL_ADC_Init+0x2ac>)
 8000678:	21fd      	movs	r1, #253	@ 0xfd
 800067a:	f003 ffbf 	bl	80045fc <assert_failed>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800067e:	6923      	ldr	r3, [r4, #16]
 8000680:	2b00      	cmp	r3, #0
 8000682:	f43f af51 	beq.w	8000528 <HAL_ADC_Init+0x12c>
 8000686:	e73f      	b.n	8000508 <HAL_ADC_Init+0x10c>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8000688:	4807      	ldr	r0, [pc, #28]	@ (80006a8 <HAL_ADC_Init+0x2ac>)
 800068a:	21fc      	movs	r1, #252	@ 0xfc
 800068c:	f003 ffb6 	bl	80045fc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8000690:	7e23      	ldrb	r3, [r4, #24]
 8000692:	2b01      	cmp	r3, #1
 8000694:	f67f af36 	bls.w	8000504 <HAL_ADC_Init+0x108>
 8000698:	e7ed      	b.n	8000676 <HAL_ADC_Init+0x27a>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800069a:	4803      	ldr	r0, [pc, #12]	@ (80006a8 <HAL_ADC_Init+0x2ac>)
 800069c:	21fa      	movs	r1, #250	@ 0xfa
 800069e:	f003 ffad 	bl	80045fc <assert_failed>
 80006a2:	e721      	b.n	80004e8 <HAL_ADC_Init+0xec>
 80006a4:	50000100 	.word	0x50000100
 80006a8:	080052b8 	.word	0x080052b8
 80006ac:	01010100 	.word	0x01010100
 80006b0:	50000500 	.word	0x50000500
 80006b4:	50000700 	.word	0x50000700
 80006b8:	50000400 	.word	0x50000400
 80006bc:	fff0c007 	.word	0xfff0c007
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80006c0:	4868      	ldr	r0, [pc, #416]	@ (8000864 <HAL_ADC_Init+0x468>)
 80006c2:	21fb      	movs	r1, #251	@ 0xfb
 80006c4:	f003 ff9a 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 80006c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	f67f af16 	bls.w	80004fc <HAL_ADC_Init+0x100>
 80006d0:	e7da      	b.n	8000688 <HAL_ADC_Init+0x28c>
      ADC_STATE_CLR_SET(hadc->State,
 80006d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80006d4:	f023 0312 	bic.w	r3, r3, #18
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006de:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6463      	str	r3, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80006e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    ADC_STATE_CLR_SET(hadc->State,
 80006e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80006ea:	f023 0312 	bic.w	r3, r3, #18
 80006ee:	f043 0310 	orr.w	r3, r3, #16
 80006f2:	6423      	str	r3, [r4, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR; 
 80006f4:	e733      	b.n	800055e <HAL_ADC_Init+0x162>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80006f6:	485b      	ldr	r0, [pc, #364]	@ (8000864 <HAL_ADC_Init+0x468>)
 80006f8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80006fc:	f003 ff7e 	bl	80045fc <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000700:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000704:	e70a      	b.n	800051c <HAL_ADC_Init+0x120>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000706:	4857      	ldr	r0, [pc, #348]	@ (8000864 <HAL_ADC_Init+0x468>)
 8000708:	f240 1105 	movw	r1, #261	@ 0x105
 800070c:	f003 ff76 	bl	80045fc <assert_failed>
 8000710:	e70a      	b.n	8000528 <HAL_ADC_Init+0x12c>
      hadc->InjectionConfig.ContextQueue = 0U;
 8000712:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8000716:	6465      	str	r5, [r4, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 8000718:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 800071c:	4620      	mov	r0, r4
 800071e:	f003 ff89 	bl	8004634 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	689a      	ldr	r2, [r3, #8]
 8000726:	00d1      	lsls	r1, r2, #3
 8000728:	d51a      	bpl.n	8000760 <HAL_ADC_Init+0x364>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800072a:	4628      	mov	r0, r5
 800072c:	e705      	b.n	800053a <HAL_ADC_Init+0x13e>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800072e:	484d      	ldr	r0, [pc, #308]	@ (8000864 <HAL_ADC_Init+0x468>)
 8000730:	f240 1101 	movw	r1, #257	@ 0x101
 8000734:	f003 ff62 	bl	80045fc <assert_failed>
 8000738:	e6eb      	b.n	8000512 <HAL_ADC_Init+0x116>
 800073a:	4a4b      	ldr	r2, [pc, #300]	@ (8000868 <HAL_ADC_Init+0x46c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800073c:	484b      	ldr	r0, [pc, #300]	@ (800086c <HAL_ADC_Init+0x470>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800073e:	6899      	ldr	r1, [r3, #8]
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000740:	9202      	str	r2, [sp, #8]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000742:	f001 0103 	and.w	r1, r1, #3
 8000746:	2901      	cmp	r1, #1
 8000748:	d062      	beq.n	8000810 <HAL_ADC_Init+0x414>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800074a:	6891      	ldr	r1, [r2, #8]
 800074c:	f001 0103 	and.w	r1, r1, #3
 8000750:	2901      	cmp	r1, #1
 8000752:	f47f af2c 	bne.w	80005ae <HAL_ADC_Init+0x1b2>
 8000756:	6812      	ldr	r2, [r2, #0]
 8000758:	07d5      	lsls	r5, r2, #31
 800075a:	f53f af2e 	bmi.w	80005ba <HAL_ADC_Init+0x1be>
 800075e:	e726      	b.n	80005ae <HAL_ADC_Init+0x1b2>
        tmp_hal_status = ADC_Disable(hadc);
 8000760:	4620      	mov	r0, r4
 8000762:	f7ff fdad 	bl	80002c0 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000766:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000768:	f013 0f10 	tst.w	r3, #16
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800076c:	6823      	ldr	r3, [r4, #0]
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800076e:	f47f aee4 	bne.w	800053a <HAL_ADC_Init+0x13e>
 8000772:	2800      	cmp	r0, #0
 8000774:	f47f aee1 	bne.w	800053a <HAL_ADC_Init+0x13e>
          ADC_STATE_CLR_SET(hadc->State,
 8000778:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800077a:	4d3d      	ldr	r5, [pc, #244]	@ (8000870 <HAL_ADC_Init+0x474>)
          ADC_STATE_CLR_SET(hadc->State,
 800077c:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8000780:	f022 0202 	bic.w	r2, r2, #2
 8000784:	f042 0202 	orr.w	r2, r2, #2
 8000788:	6422      	str	r2, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800078a:	6899      	ldr	r1, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800078c:	682a      	ldr	r2, [r5, #0]
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800078e:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8000792:	6099      	str	r1, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000794:	6899      	ldr	r1, [r3, #8]
 8000796:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800079a:	6099      	str	r1, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800079c:	4935      	ldr	r1, [pc, #212]	@ (8000874 <HAL_ADC_Init+0x478>)
 800079e:	fba1 1202 	umull	r1, r2, r1, r2
 80007a2:	0c92      	lsrs	r2, r2, #18
 80007a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80007a8:	0052      	lsls	r2, r2, #1
 80007aa:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80007ac:	9a01      	ldr	r2, [sp, #4]
 80007ae:	2a00      	cmp	r2, #0
 80007b0:	f43f aec3 	beq.w	800053a <HAL_ADC_Init+0x13e>
            wait_loop_index--;
 80007b4:	9a01      	ldr	r2, [sp, #4]
 80007b6:	3a01      	subs	r2, #1
 80007b8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80007ba:	9a01      	ldr	r2, [sp, #4]
 80007bc:	2a00      	cmp	r2, #0
 80007be:	d1f9      	bne.n	80007b4 <HAL_ADC_Init+0x3b8>
 80007c0:	e6bb      	b.n	800053a <HAL_ADC_Init+0x13e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007c2:	bb70      	cbnz	r0, 8000822 <HAL_ADC_Init+0x426>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80007c4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80007c6:	3901      	subs	r1, #1
 80007c8:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 80007cc:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
 80007d0:	e704      	b.n	80005dc <HAL_ADC_Init+0x1e0>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80007d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80007d4:	69e2      	ldr	r2, [r4, #28]
 80007d6:	f021 010f 	bic.w	r1, r1, #15
 80007da:	3a01      	subs	r2, #1
 80007dc:	430a      	orrs	r2, r1
 80007de:	631a      	str	r2, [r3, #48]	@ 0x30
 80007e0:	e72c      	b.n	800063c <HAL_ADC_Init+0x240>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80007e2:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 80007e6:	d027      	beq.n	8000838 <HAL_ADC_Init+0x43c>
 80007e8:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80007ec:	d02e      	beq.n	800084c <HAL_ADC_Init+0x450>
 80007ee:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 80007f2:	d02e      	beq.n	8000852 <HAL_ADC_Init+0x456>
 80007f4:	f5b1 5f8a 	cmp.w	r1, #4416	@ 0x1140
 80007f8:	d02e      	beq.n	8000858 <HAL_ADC_Init+0x45c>
 80007fa:	f5b1 5f84 	cmp.w	r1, #4224	@ 0x1080
 80007fe:	d02e      	beq.n	800085e <HAL_ADC_Init+0x462>
 8000800:	f5b1 5f86 	cmp.w	r1, #4288	@ 0x10c0
 8000804:	bf08      	it	eq
 8000806:	f44f 71c0 	moveq.w	r1, #384	@ 0x180
 800080a:	e6f5      	b.n	80005f8 <HAL_ADC_Init+0x1fc>
 800080c:	481a      	ldr	r0, [pc, #104]	@ (8000878 <HAL_ADC_Init+0x47c>)
 800080e:	e796      	b.n	800073e <HAL_ADC_Init+0x342>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000810:	6819      	ldr	r1, [r3, #0]
 8000812:	07c9      	lsls	r1, r1, #31
 8000814:	f53f aed1 	bmi.w	80005ba <HAL_ADC_Init+0x1be>
 8000818:	e797      	b.n	800074a <HAL_ADC_Init+0x34e>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800081a:	4817      	ldr	r0, [pc, #92]	@ (8000878 <HAL_ADC_Init+0x47c>)
 800081c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000820:	e78d      	b.n	800073e <HAL_ADC_Init+0x342>
        ADC_STATE_CLR_SET(hadc->State,
 8000822:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8000824:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 8000828:	f041 0120 	orr.w	r1, r1, #32
 800082c:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800082e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8000830:	f041 0101 	orr.w	r1, r1, #1
 8000834:	6461      	str	r1, [r4, #68]	@ 0x44
 8000836:	e6d1      	b.n	80005dc <HAL_ADC_Init+0x1e0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000838:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 800083c:	e6dc      	b.n	80005f8 <HAL_ADC_Init+0x1fc>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800083e:	480b      	ldr	r0, [pc, #44]	@ (800086c <HAL_ADC_Init+0x470>)
 8000840:	e77d      	b.n	800073e <HAL_ADC_Init+0x342>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	07d0      	lsls	r0, r2, #31
 8000846:	f53f aeb8 	bmi.w	80005ba <HAL_ADC_Init+0x1be>
 800084a:	e6af      	b.n	80005ac <HAL_ADC_Init+0x1b0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800084c:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8000850:	e6d2      	b.n	80005f8 <HAL_ADC_Init+0x1fc>
 8000852:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000856:	e6cf      	b.n	80005f8 <HAL_ADC_Init+0x1fc>
 8000858:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 800085c:	e6cc      	b.n	80005f8 <HAL_ADC_Init+0x1fc>
 800085e:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000862:	e6c9      	b.n	80005f8 <HAL_ADC_Init+0x1fc>
 8000864:	080052b8 	.word	0x080052b8
 8000868:	50000500 	.word	0x50000500
 800086c:	50000700 	.word	0x50000700
 8000870:	20000008 	.word	0x20000008
 8000874:	431bde83 	.word	0x431bde83
 8000878:	50000300 	.word	0x50000300

0800087c <HAL_ADC_Start_DMA>:
{
 800087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087e:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000880:	6800      	ldr	r0, [r0, #0]
 8000882:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
{
 8000886:	460f      	mov	r7, r1
 8000888:	4616      	mov	r6, r2
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800088a:	d010      	beq.n	80008ae <HAL_ADC_Start_DMA+0x32>
 800088c:	4b54      	ldr	r3, [pc, #336]	@ (80009e0 <HAL_ADC_Start_DMA+0x164>)
 800088e:	4298      	cmp	r0, r3
 8000890:	d00d      	beq.n	80008ae <HAL_ADC_Start_DMA+0x32>
 8000892:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000896:	4298      	cmp	r0, r3
 8000898:	d009      	beq.n	80008ae <HAL_ADC_Start_DMA+0x32>
 800089a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800089e:	4298      	cmp	r0, r3
 80008a0:	d005      	beq.n	80008ae <HAL_ADC_Start_DMA+0x32>
 80008a2:	4850      	ldr	r0, [pc, #320]	@ (80009e4 <HAL_ADC_Start_DMA+0x168>)
 80008a4:	f640 115b 	movw	r1, #2395	@ 0x95b
 80008a8:	f003 fea8 	bl	80045fc <assert_failed>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008ac:	6820      	ldr	r0, [r4, #0]
 80008ae:	6885      	ldr	r5, [r0, #8]
 80008b0:	076d      	lsls	r5, r5, #29
 80008b2:	d421      	bmi.n	80008f8 <HAL_ADC_Start_DMA+0x7c>
    __HAL_LOCK(hadc);
 80008b4:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d01d      	beq.n	80008f8 <HAL_ADC_Start_DMA+0x7c>
 80008bc:	2301      	movs	r3, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80008be:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
    __HAL_LOCK(hadc);
 80008c2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80008c6:	d00f      	beq.n	80008e8 <HAL_ADC_Start_DMA+0x6c>
 80008c8:	4b45      	ldr	r3, [pc, #276]	@ (80009e0 <HAL_ADC_Start_DMA+0x164>)
 80008ca:	4298      	cmp	r0, r3
 80008cc:	d00c      	beq.n	80008e8 <HAL_ADC_Start_DMA+0x6c>
 80008ce:	4b46      	ldr	r3, [pc, #280]	@ (80009e8 <HAL_ADC_Start_DMA+0x16c>)
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	f013 0f1f 	tst.w	r3, #31
 80008d6:	bf0c      	ite	eq
 80008d8:	2301      	moveq	r3, #1
 80008da:	2300      	movne	r3, #0
 80008dc:	b97b      	cbnz	r3, 80008fe <HAL_ADC_Start_DMA+0x82>
      __HAL_UNLOCK(hadc);
 80008de:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      tmp_hal_status = HAL_ERROR;
 80008e2:	2501      	movs	r5, #1
}
 80008e4:	4628      	mov	r0, r5
 80008e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80008e8:	4b40      	ldr	r3, [pc, #256]	@ (80009ec <HAL_ADC_Start_DMA+0x170>)
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	f013 0f1f 	tst.w	r3, #31
 80008f0:	bf0c      	ite	eq
 80008f2:	2301      	moveq	r3, #1
 80008f4:	2300      	movne	r3, #0
 80008f6:	e7f1      	b.n	80008dc <HAL_ADC_Start_DMA+0x60>
    __HAL_LOCK(hadc);
 80008f8:	2502      	movs	r5, #2
}
 80008fa:	4628      	mov	r0, r5
 80008fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80008fe:	4620      	mov	r0, r4
 8000900:	f7ff fd14 	bl	800032c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8000904:	4605      	mov	r5, r0
 8000906:	2800      	cmp	r0, #0
 8000908:	d14c      	bne.n	80009a4 <HAL_ADC_Start_DMA+0x128>
        ADC_STATE_CLR_SET(hadc->State,
 800090a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800090c:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 800090e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000912:	f023 0301 	bic.w	r3, r3, #1
 8000916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800091a:	f1b1 4fa0 	cmp.w	r1, #1342177280	@ 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 800091e:	6423      	str	r3, [r4, #64]	@ 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000920:	d053      	beq.n	80009ca <HAL_ADC_Start_DMA+0x14e>
 8000922:	4b2f      	ldr	r3, [pc, #188]	@ (80009e0 <HAL_ADC_Start_DMA+0x164>)
 8000924:	4299      	cmp	r1, r3
 8000926:	d041      	beq.n	80009ac <HAL_ADC_Start_DMA+0x130>
 8000928:	4b2f      	ldr	r3, [pc, #188]	@ (80009e8 <HAL_ADC_Start_DMA+0x16c>)
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	06da      	lsls	r2, r3, #27
 800092e:	d04e      	beq.n	80009ce <HAL_ADC_Start_DMA+0x152>
 8000930:	4a2f      	ldr	r2, [pc, #188]	@ (80009f0 <HAL_ADC_Start_DMA+0x174>)
 8000932:	4291      	cmp	r1, r2
 8000934:	d04b      	beq.n	80009ce <HAL_ADC_Start_DMA+0x152>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000936:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000938:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800093c:	6423      	str	r3, [r4, #64]	@ 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800093e:	68d3      	ldr	r3, [r2, #12]
 8000940:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8000944:	b12b      	cbz	r3, 8000952 <HAL_ADC_Start_DMA+0xd6>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000946:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000948:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800094c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000950:	6423      	str	r3, [r4, #64]	@ 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000952:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000954:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8000956:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 80009fc <HAL_ADC_Start_DMA+0x180>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800095a:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800095e:	bf1c      	itt	ne
 8000960:	6c63      	ldrne	r3, [r4, #68]	@ 0x44
 8000962:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8000966:	6463      	str	r3, [r4, #68]	@ 0x44
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000968:	463a      	mov	r2, r7
 800096a:	4633      	mov	r3, r6
        __HAL_UNLOCK(hadc);
 800096c:	f04f 0e00 	mov.w	lr, #0
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000970:	4e20      	ldr	r6, [pc, #128]	@ (80009f4 <HAL_ADC_Start_DMA+0x178>)
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000972:	4f21      	ldr	r7, [pc, #132]	@ (80009f8 <HAL_ADC_Start_DMA+0x17c>)
        __HAL_UNLOCK(hadc);
 8000974:	f884 e03c 	strb.w	lr, [r4, #60]	@ 0x3c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000978:	6306      	str	r6, [r0, #48]	@ 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800097a:	261c      	movs	r6, #28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800097c:	e9c0 c70a 	strd	ip, r7, [r0, #40]	@ 0x28
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000980:	600e      	str	r6, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000982:	684e      	ldr	r6, [r1, #4]
 8000984:	f046 0610 	orr.w	r6, r6, #16
 8000988:	604e      	str	r6, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800098a:	68ce      	ldr	r6, [r1, #12]
 800098c:	f046 0601 	orr.w	r6, r6, #1
 8000990:	60ce      	str	r6, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000992:	3140      	adds	r1, #64	@ 0x40
 8000994:	f000 fd1c 	bl	80013d0 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000998:	6822      	ldr	r2, [r4, #0]
 800099a:	6893      	ldr	r3, [r2, #8]
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6093      	str	r3, [r2, #8]
 80009a2:	e79f      	b.n	80008e4 <HAL_ADC_Start_DMA+0x68>
        __HAL_UNLOCK(hadc);
 80009a4:	2300      	movs	r3, #0
 80009a6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 80009aa:	e79b      	b.n	80008e4 <HAL_ADC_Start_DMA+0x68>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80009ac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	06d8      	lsls	r0, r3, #27
 80009b4:	d00b      	beq.n	80009ce <HAL_ADC_Start_DMA+0x152>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80009b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80009bc:	6423      	str	r3, [r4, #64]	@ 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	f3c3 6340 	ubfx	r3, r3, #25, #1
 80009c8:	e7bc      	b.n	8000944 <HAL_ADC_Start_DMA+0xc8>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <HAL_ADC_Start_DMA+0x170>)
 80009cc:	689b      	ldr	r3, [r3, #8]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80009d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80009d4:	6423      	str	r3, [r4, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80009d6:	68cb      	ldr	r3, [r1, #12]
 80009d8:	019b      	lsls	r3, r3, #6
 80009da:	d5ba      	bpl.n	8000952 <HAL_ADC_Start_DMA+0xd6>
 80009dc:	e7b3      	b.n	8000946 <HAL_ADC_Start_DMA+0xca>
 80009de:	bf00      	nop
 80009e0:	50000100 	.word	0x50000100
 80009e4:	080052b8 	.word	0x080052b8
 80009e8:	50000700 	.word	0x50000700
 80009ec:	50000300 	.word	0x50000300
 80009f0:	50000400 	.word	0x50000400
 80009f4:	08000399 	.word	0x08000399
 80009f8:	080003b1 	.word	0x080003b1
 80009fc:	080003b9 	.word	0x080003b9

08000a00 <HAL_ADC_ConfigChannel>:
{
 8000a00:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000a02:	6803      	ldr	r3, [r0, #0]
{
 8000a04:	b096      	sub	sp, #88	@ 0x58
  __IO uint32_t wait_loop_index = 0U;
 8000a06:	2200      	movs	r2, #0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
{
 8000a0c:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8000a0e:	9201      	str	r2, [sp, #4]
{
 8000a10:	460c      	mov	r4, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000a12:	d00f      	beq.n	8000a34 <HAL_ADC_ConfigChannel+0x34>
 8000a14:	4aa6      	ldr	r2, [pc, #664]	@ (8000cb0 <HAL_ADC_ConfigChannel+0x2b0>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d00c      	beq.n	8000a34 <HAL_ADC_ConfigChannel+0x34>
 8000a1a:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d008      	beq.n	8000a34 <HAL_ADC_ConfigChannel+0x34>
 8000a22:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d004      	beq.n	8000a34 <HAL_ADC_ConfigChannel+0x34>
 8000a2a:	48a2      	ldr	r0, [pc, #648]	@ (8000cb4 <HAL_ADC_ConfigChannel+0x2b4>)
 8000a2c:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 8000a30:	f003 fde4 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8000a34:	6863      	ldr	r3, [r4, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	f200 810b 	bhi.w	8000c54 <HAL_ADC_ConfigChannel+0x254>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000a3e:	68a3      	ldr	r3, [r4, #8]
 8000a40:	2b07      	cmp	r3, #7
 8000a42:	f200 8101 	bhi.w	8000c48 <HAL_ADC_ConfigChannel+0x248>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8000a46:	68e3      	ldr	r3, [r4, #12]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d904      	bls.n	8000a56 <HAL_ADC_ConfigChannel+0x56>
 8000a4c:	4899      	ldr	r0, [pc, #612]	@ (8000cb4 <HAL_ADC_ConfigChannel+0x2b4>)
 8000a4e:	f241 51bb 	movw	r1, #5563	@ 0x15bb
 8000a52:	f003 fdd3 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8000a56:	6923      	ldr	r3, [r4, #16]
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	f200 80ef 	bhi.w	8000c3c <HAL_ADC_ConfigChannel+0x23c>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8000a5e:	682b      	ldr	r3, [r5, #0]
 8000a60:	68da      	ldr	r2, [r3, #12]
 8000a62:	f012 0f18 	tst.w	r2, #24
 8000a66:	d153      	bne.n	8000b10 <HAL_ADC_ConfigChannel+0x110>
 8000a68:	6962      	ldr	r2, [r4, #20]
 8000a6a:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8000a6e:	d24f      	bcs.n	8000b10 <HAL_ADC_ConfigChannel+0x110>
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000a70:	68e2      	ldr	r2, [r4, #12]
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000a72:	6823      	ldr	r3, [r4, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000a74:	2a01      	cmp	r2, #1
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000a76:	f103 33ff 	add.w	r3, r3, #4294967295
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000a7a:	d066      	beq.n	8000b4a <HAL_ADC_ConfigChannel+0x14a>
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000a7c:	2b11      	cmp	r3, #17
 8000a7e:	f200 808b 	bhi.w	8000b98 <HAL_ADC_ConfigChannel+0x198>
  __HAL_LOCK(hadc);
 8000a82:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d06a      	beq.n	8000b60 <HAL_ADC_ConfigChannel+0x160>
 8000a8a:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a8c:	682b      	ldr	r3, [r5, #0]
  __HAL_LOCK(hadc);
 8000a8e:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a92:	689a      	ldr	r2, [r3, #8]
 8000a94:	0752      	lsls	r2, r2, #29
 8000a96:	d46a      	bmi.n	8000b6e <HAL_ADC_ConfigChannel+0x16e>
    if (sConfig->Rank < 5U)
 8000a98:	6860      	ldr	r0, [r4, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 8000a9a:	6821      	ldr	r1, [r4, #0]
 8000a9c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    if (sConfig->Rank < 5U)
 8000aa0:	2804      	cmp	r0, #4
      MODIFY_REG(hadc->Instance->SQR1,
 8000aa2:	ea4f 0242 	mov.w	r2, r2, lsl #1
    if (sConfig->Rank < 5U)
 8000aa6:	f200 80db 	bhi.w	8000c60 <HAL_ADC_ConfigChannel+0x260>
      MODIFY_REG(hadc->Instance->SQR1,
 8000aaa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000aac:	f04f 0c1f 	mov.w	ip, #31
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	ea20 000c 	bic.w	r0, r0, ip
 8000ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8000abc:	4302      	orrs	r2, r0
 8000abe:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ac0:	689a      	ldr	r2, [r3, #8]
 8000ac2:	f012 0f0c 	tst.w	r2, #12
 8000ac6:	d17f      	bne.n	8000bc8 <HAL_ADC_ConfigChannel+0x1c8>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ac8:	2909      	cmp	r1, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000aca:	68a2      	ldr	r2, [r4, #8]
 8000acc:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ad0:	f200 80e1 	bhi.w	8000c96 <HAL_ADC_ConfigChannel+0x296>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ad4:	695e      	ldr	r6, [r3, #20]
 8000ad6:	f04f 0c07 	mov.w	ip, #7
 8000ada:	4082      	lsls	r2, r0
 8000adc:	fa0c f000 	lsl.w	r0, ip, r0
 8000ae0:	ea26 0000 	bic.w	r0, r6, r0
 8000ae4:	4302      	orrs	r2, r0
 8000ae6:	615a      	str	r2, [r3, #20]
    switch (sConfig->OffsetNumber)
 8000ae8:	6920      	ldr	r0, [r4, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000aea:	68da      	ldr	r2, [r3, #12]
    switch (sConfig->OffsetNumber)
 8000aec:	f100 3cff 	add.w	ip, r0, #4294967295
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000af0:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8000af4:	6960      	ldr	r0, [r4, #20]
 8000af6:	0052      	lsls	r2, r2, #1
 8000af8:	4090      	lsls	r0, r2
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000afa:	068a      	lsls	r2, r1, #26
    switch (sConfig->OffsetNumber)
 8000afc:	f1bc 0f03 	cmp.w	ip, #3
 8000b00:	f200 8197 	bhi.w	8000e32 <HAL_ADC_ConfigChannel+0x432>
 8000b04:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8000b08:	01610058 	.word	0x01610058
 8000b0c:	014f0158 	.word	0x014f0158
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8000b10:	68da      	ldr	r2, [r3, #12]
 8000b12:	f002 0218 	and.w	r2, r2, #24
 8000b16:	2a08      	cmp	r2, #8
 8000b18:	d033      	beq.n	8000b82 <HAL_ADC_ConfigChannel+0x182>
 8000b1a:	68da      	ldr	r2, [r3, #12]
 8000b1c:	f002 0218 	and.w	r2, r2, #24
 8000b20:	2a10      	cmp	r2, #16
 8000b22:	d03f      	beq.n	8000ba4 <HAL_ADC_ConfigChannel+0x1a4>
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	f003 0318 	and.w	r3, r3, #24
 8000b2a:	2b18      	cmp	r3, #24
 8000b2c:	d102      	bne.n	8000b34 <HAL_ADC_ConfigChannel+0x134>
 8000b2e:	6963      	ldr	r3, [r4, #20]
 8000b30:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b32:	d99d      	bls.n	8000a70 <HAL_ADC_ConfigChannel+0x70>
 8000b34:	485f      	ldr	r0, [pc, #380]	@ (8000cb4 <HAL_ADC_ConfigChannel+0x2b4>)
 8000b36:	f241 51bd 	movw	r1, #5565	@ 0x15bd
 8000b3a:	f003 fd5f 	bl	80045fc <assert_failed>
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000b3e:	68e2      	ldr	r2, [r4, #12]
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000b40:	6823      	ldr	r3, [r4, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000b42:	2a01      	cmp	r2, #1
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000b44:	f103 33ff 	add.w	r3, r3, #4294967295
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000b48:	d198      	bne.n	8000a7c <HAL_ADC_ConfigChannel+0x7c>
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
 8000b4a:	2b0d      	cmp	r3, #13
 8000b4c:	d999      	bls.n	8000a82 <HAL_ADC_ConfigChannel+0x82>
 8000b4e:	4859      	ldr	r0, [pc, #356]	@ (8000cb4 <HAL_ADC_ConfigChannel+0x2b4>)
 8000b50:	f241 51c9 	movw	r1, #5577	@ 0x15c9
 8000b54:	f003 fd52 	bl	80045fc <assert_failed>
  __HAL_LOCK(hadc);
 8000b58:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d194      	bne.n	8000a8a <HAL_ADC_ConfigChannel+0x8a>
 8000b60:	2002      	movs	r0, #2
}
 8000b62:	b016      	add	sp, #88	@ 0x58
 8000b64:	bd70      	pop	{r4, r5, r6, pc}
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000b66:	681c      	ldr	r4, [r3, #0]
 8000b68:	07e4      	lsls	r4, r4, #31
 8000b6a:	f140 80bc 	bpl.w	8000ce6 <HAL_ADC_ConfigChannel+0x2e6>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b6e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8000b70:	f043 0320 	orr.w	r3, r3, #32
 8000b74:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8000b76:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 8000b7e:	b016      	add	sp, #88	@ 0x58
 8000b80:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8000b82:	6962      	ldr	r2, [r4, #20]
 8000b84:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8000b88:	f4ff af72 	bcc.w	8000a70 <HAL_ADC_ConfigChannel+0x70>
 8000b8c:	68da      	ldr	r2, [r3, #12]
 8000b8e:	f002 0218 	and.w	r2, r2, #24
 8000b92:	2a10      	cmp	r2, #16
 8000b94:	d1c6      	bne.n	8000b24 <HAL_ADC_ConfigChannel+0x124>
 8000b96:	e005      	b.n	8000ba4 <HAL_ADC_ConfigChannel+0x1a4>
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000b98:	4846      	ldr	r0, [pc, #280]	@ (8000cb4 <HAL_ADC_ConfigChannel+0x2b4>)
 8000b9a:	f241 51c5 	movw	r1, #5573	@ 0x15c5
 8000b9e:	f003 fd2d 	bl	80045fc <assert_failed>
 8000ba2:	e76e      	b.n	8000a82 <HAL_ADC_ConfigChannel+0x82>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8000ba4:	6962      	ldr	r2, [r4, #20]
 8000ba6:	2aff      	cmp	r2, #255	@ 0xff
 8000ba8:	f67f af62 	bls.w	8000a70 <HAL_ADC_ConfigChannel+0x70>
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	f003 0318 	and.w	r3, r3, #24
 8000bb2:	2b18      	cmp	r3, #24
 8000bb4:	d0bb      	beq.n	8000b2e <HAL_ADC_ConfigChannel+0x12e>
 8000bb6:	e7bd      	b.n	8000b34 <HAL_ADC_ConfigChannel+0x134>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000bb8:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 8000bba:	4310      	orrs	r0, r2
 8000bbc:	4a3e      	ldr	r2, [pc, #248]	@ (8000cb8 <HAL_ADC_ConfigChannel+0x2b8>)
 8000bbe:	4032      	ands	r2, r6
 8000bc0:	4302      	orrs	r2, r0
 8000bc2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000bc6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	f002 0203 	and.w	r2, r2, #3
 8000bce:	2a01      	cmp	r2, #1
 8000bd0:	f000 809b 	beq.w	8000d0a <HAL_ADC_ConfigChannel+0x30a>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000bd4:	68e0      	ldr	r0, [r4, #12]
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000bd6:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000bd8:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000bda:	fa02 f201 	lsl.w	r2, r2, r1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000bde:	f000 8099 	beq.w	8000d14 <HAL_ADC_ConfigChannel+0x314>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000be2:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8000be6:	ea20 0202 	bic.w	r2, r0, r2
 8000bea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bf2:	f000 80aa 	beq.w	8000d4a <HAL_ADC_ConfigChannel+0x34a>
 8000bf6:	4a2e      	ldr	r2, [pc, #184]	@ (8000cb0 <HAL_ADC_ConfigChannel+0x2b0>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d065      	beq.n	8000cc8 <HAL_ADC_ConfigChannel+0x2c8>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000bfc:	2910      	cmp	r1, #16
 8000bfe:	f000 80c1 	beq.w	8000d84 <HAL_ADC_ConfigChannel+0x384>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c02:	4a2e      	ldr	r2, [pc, #184]	@ (8000cbc <HAL_ADC_ConfigChannel+0x2bc>)
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000c04:	2911      	cmp	r1, #17
 8000c06:	f040 809a 	bne.w	8000d3e <HAL_ADC_ConfigChannel+0x33e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000c0a:	6890      	ldr	r0, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000c0c:	01c4      	lsls	r4, r0, #7
 8000c0e:	d47a      	bmi.n	8000d06 <HAL_ADC_ConfigChannel+0x306>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c14:	4826      	ldr	r0, [pc, #152]	@ (8000cb0 <HAL_ADC_ConfigChannel+0x2b0>)
 8000c16:	d05f      	beq.n	8000cd8 <HAL_ADC_ConfigChannel+0x2d8>
 8000c18:	4283      	cmp	r3, r0
 8000c1a:	d05b      	beq.n	8000cd4 <HAL_ADC_ConfigChannel+0x2d4>
 8000c1c:	4828      	ldr	r0, [pc, #160]	@ (8000cc0 <HAL_ADC_ConfigChannel+0x2c0>)
 8000c1e:	4283      	cmp	r3, r0
 8000c20:	f000 8105 	beq.w	8000e2e <HAL_ADC_ConfigChannel+0x42e>
 8000c24:	4c27      	ldr	r4, [pc, #156]	@ (8000cc4 <HAL_ADC_ConfigChannel+0x2c4>)
 8000c26:	42a3      	cmp	r3, r4
 8000c28:	d056      	beq.n	8000cd8 <HAL_ADC_ConfigChannel+0x2d8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000c2a:	6898      	ldr	r0, [r3, #8]
 8000c2c:	f000 0003 	and.w	r0, r0, #3
 8000c30:	2801      	cmp	r0, #1
 8000c32:	d15e      	bne.n	8000cf2 <HAL_ADC_ConfigChannel+0x2f2>
 8000c34:	6818      	ldr	r0, [r3, #0]
 8000c36:	07c0      	lsls	r0, r0, #31
 8000c38:	d55b      	bpl.n	8000cf2 <HAL_ADC_ConfigChannel+0x2f2>
 8000c3a:	e798      	b.n	8000b6e <HAL_ADC_ConfigChannel+0x16e>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8000c3c:	481d      	ldr	r0, [pc, #116]	@ (8000cb4 <HAL_ADC_ConfigChannel+0x2b4>)
 8000c3e:	f241 51bc 	movw	r1, #5564	@ 0x15bc
 8000c42:	f003 fcdb 	bl	80045fc <assert_failed>
 8000c46:	e70a      	b.n	8000a5e <HAL_ADC_ConfigChannel+0x5e>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000c48:	481a      	ldr	r0, [pc, #104]	@ (8000cb4 <HAL_ADC_ConfigChannel+0x2b4>)
 8000c4a:	f241 51ba 	movw	r1, #5562	@ 0x15ba
 8000c4e:	f003 fcd5 	bl	80045fc <assert_failed>
 8000c52:	e6f8      	b.n	8000a46 <HAL_ADC_ConfigChannel+0x46>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8000c54:	4817      	ldr	r0, [pc, #92]	@ (8000cb4 <HAL_ADC_ConfigChannel+0x2b4>)
 8000c56:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 8000c5a:	f003 fccf 	bl	80045fc <assert_failed>
 8000c5e:	e6ee      	b.n	8000a3e <HAL_ADC_ConfigChannel+0x3e>
    else if (sConfig->Rank < 10U)
 8000c60:	2809      	cmp	r0, #9
 8000c62:	d90d      	bls.n	8000c80 <HAL_ADC_ConfigChannel+0x280>
    else if (sConfig->Rank < 15U)
 8000c64:	280e      	cmp	r0, #14
 8000c66:	f200 8093 	bhi.w	8000d90 <HAL_ADC_ConfigChannel+0x390>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c6a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000c6c:	3a3c      	subs	r2, #60	@ 0x3c
 8000c6e:	261f      	movs	r6, #31
 8000c70:	4096      	lsls	r6, r2
 8000c72:	ea20 0006 	bic.w	r0, r0, r6
 8000c76:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7a:	4302      	orrs	r2, r0
 8000c7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c7e:	e71f      	b.n	8000ac0 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->SQR2,
 8000c80:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000c82:	3a1e      	subs	r2, #30
 8000c84:	261f      	movs	r6, #31
 8000c86:	4096      	lsls	r6, r2
 8000c88:	ea20 0006 	bic.w	r0, r0, r6
 8000c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c90:	4302      	orrs	r2, r0
 8000c92:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c94:	e714      	b.n	8000ac0 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c96:	699e      	ldr	r6, [r3, #24]
 8000c98:	381e      	subs	r0, #30
 8000c9a:	f04f 0c07 	mov.w	ip, #7
 8000c9e:	4082      	lsls	r2, r0
 8000ca0:	fa0c f000 	lsl.w	r0, ip, r0
 8000ca4:	ea26 0000 	bic.w	r0, r6, r0
 8000ca8:	4302      	orrs	r2, r0
 8000caa:	619a      	str	r2, [r3, #24]
 8000cac:	e71c      	b.n	8000ae8 <HAL_ADC_ConfigChannel+0xe8>
 8000cae:	bf00      	nop
 8000cb0:	50000100 	.word	0x50000100
 8000cb4:	080052b8 	.word	0x080052b8
 8000cb8:	83fff000 	.word	0x83fff000
 8000cbc:	50000700 	.word	0x50000700
 8000cc0:	50000400 	.word	0x50000400
 8000cc4:	50000500 	.word	0x50000500
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000cc8:	2910      	cmp	r1, #16
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000cca:	4a6e      	ldr	r2, [pc, #440]	@ (8000e84 <HAL_ADC_ConfigChannel+0x484>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000ccc:	d19a      	bne.n	8000c04 <HAL_ADC_ConfigChannel+0x204>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000cce:	6890      	ldr	r0, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000cd0:	0200      	lsls	r0, r0, #8
 8000cd2:	d418      	bmi.n	8000d06 <HAL_ADC_ConfigChannel+0x306>
 8000cd4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000cd8:	689c      	ldr	r4, [r3, #8]
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000cda:	9002      	str	r0, [sp, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000cdc:	f004 0403 	and.w	r4, r4, #3
 8000ce0:	2c01      	cmp	r4, #1
 8000ce2:	f43f af40 	beq.w	8000b66 <HAL_ADC_ConfigChannel+0x166>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ce6:	6884      	ldr	r4, [r0, #8]
 8000ce8:	f004 0403 	and.w	r4, r4, #3
 8000cec:	2c01      	cmp	r4, #1
 8000cee:	f000 8099 	beq.w	8000e24 <HAL_ADC_ConfigChannel+0x424>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000cf2:	2910      	cmp	r1, #16
 8000cf4:	d07a      	beq.n	8000dec <HAL_ADC_ConfigChannel+0x3ec>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000cf6:	2911      	cmp	r1, #17
 8000cf8:	d070      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x3dc>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000cfa:	2912      	cmp	r1, #18
 8000cfc:	d103      	bne.n	8000d06 <HAL_ADC_ConfigChannel+0x306>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000cfe:	6893      	ldr	r3, [r2, #8]
 8000d00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d04:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d06:	2000      	movs	r0, #0
 8000d08:	e736      	b.n	8000b78 <HAL_ADC_ConfigChannel+0x178>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	07d6      	lsls	r6, r2, #31
 8000d0e:	f57f af61 	bpl.w	8000bd4 <HAL_ADC_ConfigChannel+0x1d4>
 8000d12:	e7f8      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x306>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000d14:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d18:	68a4      	ldr	r4, [r4, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000d1a:	4302      	orrs	r2, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d1c:	2909      	cmp	r1, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000d1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d22:	d91b      	bls.n	8000d5c <HAL_ADC_ConfigChannel+0x35c>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000d24:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8000d28:	699a      	ldr	r2, [r3, #24]
 8000d2a:	381b      	subs	r0, #27
 8000d2c:	2607      	movs	r6, #7
 8000d2e:	4084      	lsls	r4, r0
 8000d30:	fa06 f000 	lsl.w	r0, r6, r0
 8000d34:	ea22 0200 	bic.w	r2, r2, r0
 8000d38:	4322      	orrs	r2, r4
 8000d3a:	619a      	str	r2, [r3, #24]
 8000d3c:	e757      	b.n	8000bee <HAL_ADC_ConfigChannel+0x1ee>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000d3e:	2912      	cmp	r1, #18
 8000d40:	d1e1      	bne.n	8000d06 <HAL_ADC_ConfigChannel+0x306>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000d42:	6890      	ldr	r0, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000d44:	0240      	lsls	r0, r0, #9
 8000d46:	d4de      	bmi.n	8000d06 <HAL_ADC_ConfigChannel+0x306>
 8000d48:	e762      	b.n	8000c10 <HAL_ADC_ConfigChannel+0x210>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000d4a:	2910      	cmp	r1, #16
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000d4c:	4a4d      	ldr	r2, [pc, #308]	@ (8000e84 <HAL_ADC_ConfigChannel+0x484>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000d4e:	f47f af59 	bne.w	8000c04 <HAL_ADC_ConfigChannel+0x204>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000d52:	6890      	ldr	r0, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000d54:	0204      	lsls	r4, r0, #8
 8000d56:	d4d6      	bmi.n	8000d06 <HAL_ADC_ConfigChannel+0x306>
 8000d58:	484b      	ldr	r0, [pc, #300]	@ (8000e88 <HAL_ADC_ConfigChannel+0x488>)
 8000d5a:	e7bd      	b.n	8000cd8 <HAL_ADC_ConfigChannel+0x2d8>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000d5c:	1c48      	adds	r0, r1, #1
 8000d5e:	695a      	ldr	r2, [r3, #20]
 8000d60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000d64:	2607      	movs	r6, #7
 8000d66:	4084      	lsls	r4, r0
 8000d68:	fa06 f000 	lsl.w	r0, r6, r0
 8000d6c:	ea22 0200 	bic.w	r2, r2, r0
 8000d70:	4322      	orrs	r2, r4
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8000d76:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d78:	d0c5      	beq.n	8000d06 <HAL_ADC_ConfigChannel+0x306>
 8000d7a:	4a43      	ldr	r2, [pc, #268]	@ (8000e88 <HAL_ADC_ConfigChannel+0x488>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	f47f af40 	bne.w	8000c02 <HAL_ADC_ConfigChannel+0x202>
 8000d82:	e7c0      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x306>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000d84:	4a41      	ldr	r2, [pc, #260]	@ (8000e8c <HAL_ADC_ConfigChannel+0x48c>)
 8000d86:	6890      	ldr	r0, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000d88:	0206      	lsls	r6, r0, #8
 8000d8a:	f57f af47 	bpl.w	8000c1c <HAL_ADC_ConfigChannel+0x21c>
 8000d8e:	e7ba      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x306>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000d90:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000d92:	3a5a      	subs	r2, #90	@ 0x5a
 8000d94:	261f      	movs	r6, #31
 8000d96:	4096      	lsls	r6, r2
 8000d98:	ea20 0006 	bic.w	r0, r0, r6
 8000d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000da0:	4302      	orrs	r2, r0
 8000da2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000da4:	e68c      	b.n	8000ac0 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000da6:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8000da8:	4310      	orrs	r0, r2
 8000daa:	4a39      	ldr	r2, [pc, #228]	@ (8000e90 <HAL_ADC_ConfigChannel+0x490>)
 8000dac:	4032      	ands	r2, r6
 8000dae:	4302      	orrs	r2, r0
 8000db0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000db4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8000db6:	e707      	b.n	8000bc8 <HAL_ADC_ConfigChannel+0x1c8>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000db8:	6e9e      	ldr	r6, [r3, #104]	@ 0x68
 8000dba:	4310      	orrs	r0, r2
 8000dbc:	4a34      	ldr	r2, [pc, #208]	@ (8000e90 <HAL_ADC_ConfigChannel+0x490>)
 8000dbe:	4032      	ands	r2, r6
 8000dc0:	4302      	orrs	r2, r0
 8000dc2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000dc6:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8000dc8:	e6fe      	b.n	8000bc8 <HAL_ADC_ConfigChannel+0x1c8>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000dca:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8000dcc:	4310      	orrs	r0, r2
 8000dce:	4a30      	ldr	r2, [pc, #192]	@ (8000e90 <HAL_ADC_ConfigChannel+0x490>)
 8000dd0:	4032      	ands	r2, r6
 8000dd2:	4302      	orrs	r2, r0
 8000dd4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000dd8:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8000dda:	e6f5      	b.n	8000bc8 <HAL_ADC_ConfigChannel+0x1c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000de0:	d191      	bne.n	8000d06 <HAL_ADC_ConfigChannel+0x306>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000de2:	6893      	ldr	r3, [r2, #8]
 8000de4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000de8:	6093      	str	r3, [r2, #8]
 8000dea:	e78c      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x306>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000df0:	d189      	bne.n	8000d06 <HAL_ADC_ConfigChannel+0x306>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000df2:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <HAL_ADC_ConfigChannel+0x494>)
 8000df4:	4828      	ldr	r0, [pc, #160]	@ (8000e98 <HAL_ADC_ConfigChannel+0x498>)
 8000df6:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000df8:	6891      	ldr	r1, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dfa:	fba0 0303 	umull	r0, r3, r0, r3
 8000dfe:	0c9b      	lsrs	r3, r3, #18
 8000e00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e04:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000e06:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000e0a:	6091      	str	r1, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e0c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000e0e:	9b01      	ldr	r3, [sp, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f43f af78 	beq.w	8000d06 <HAL_ADC_ConfigChannel+0x306>
            wait_loop_index--;
 8000e16:	9b01      	ldr	r3, [sp, #4]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000e1c:	9b01      	ldr	r3, [sp, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f9      	bne.n	8000e16 <HAL_ADC_ConfigChannel+0x416>
 8000e22:	e770      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x306>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e24:	6800      	ldr	r0, [r0, #0]
 8000e26:	07c6      	lsls	r6, r0, #31
 8000e28:	f53f aea1 	bmi.w	8000b6e <HAL_ADC_ConfigChannel+0x16e>
 8000e2c:	e761      	b.n	8000cf2 <HAL_ADC_ConfigChannel+0x2f2>
 8000e2e:	481b      	ldr	r0, [pc, #108]	@ (8000e9c <HAL_ADC_ConfigChannel+0x49c>)
 8000e30:	e752      	b.n	8000cd8 <HAL_ADC_ConfigChannel+0x2d8>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e32:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8000e34:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8000e38:	4290      	cmp	r0, r2
 8000e3a:	d014      	beq.n	8000e66 <HAL_ADC_ConfigChannel+0x466>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e3c:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8000e3e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d014      	beq.n	8000e70 <HAL_ADC_ConfigChannel+0x470>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e46:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8000e48:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8000e4c:	4290      	cmp	r0, r2
 8000e4e:	d014      	beq.n	8000e7a <HAL_ADC_ConfigChannel+0x47a>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e50:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8000e52:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8000e56:	4290      	cmp	r0, r2
 8000e58:	f47f aeb6 	bne.w	8000bc8 <HAL_ADC_ConfigChannel+0x1c8>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000e5c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000e5e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000e62:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000e64:	e6b0      	b.n	8000bc8 <HAL_ADC_ConfigChannel+0x1c8>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000e66:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8000e68:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8000e6c:	6618      	str	r0, [r3, #96]	@ 0x60
 8000e6e:	e7e5      	b.n	8000e3c <HAL_ADC_ConfigChannel+0x43c>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000e70:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8000e72:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8000e76:	6658      	str	r0, [r3, #100]	@ 0x64
 8000e78:	e7e5      	b.n	8000e46 <HAL_ADC_ConfigChannel+0x446>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000e7a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8000e7c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8000e80:	6698      	str	r0, [r3, #104]	@ 0x68
 8000e82:	e7e5      	b.n	8000e50 <HAL_ADC_ConfigChannel+0x450>
 8000e84:	50000300 	.word	0x50000300
 8000e88:	50000100 	.word	0x50000100
 8000e8c:	50000700 	.word	0x50000700
 8000e90:	83fff000 	.word	0x83fff000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	431bde83 	.word	0x431bde83
 8000e9c:	50000500 	.word	0x50000500

08000ea0 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8000ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8000ea2:	6803      	ldr	r3, [r0, #0]
 8000ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
{
 8000ea8:	4604      	mov	r4, r0
 8000eaa:	460d      	mov	r5, r1
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8000eac:	d007      	beq.n	8000ebe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8000eae:	4a5c      	ldr	r2, [pc, #368]	@ (8001020 <HAL_ADCEx_MultiModeConfigChannel+0x180>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d004      	beq.n	8000ebe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8000eb4:	485b      	ldr	r0, [pc, #364]	@ (8001024 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8000eb6:	f641 3195 	movw	r1, #7061	@ 0x1b95
 8000eba:	f003 fb9f 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_MODE(multimode->Mode));
 8000ebe:	682b      	ldr	r3, [r5, #0]
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d922      	bls.n	8000f0a <HAL_ADCEx_MultiModeConfigChannel+0x6a>
 8000ec4:	2b07      	cmp	r3, #7
 8000ec6:	d918      	bls.n	8000efa <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 8000ec8:	2b09      	cmp	r3, #9
 8000eca:	d118      	bne.n	8000efe <HAL_ADCEx_MultiModeConfigChannel+0x5e>
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8000ecc:	686b      	ldr	r3, [r5, #4]
 8000ece:	f433 4200 	bics.w	r2, r3, #32768	@ 0x8000
 8000ed2:	d002      	beq.n	8000eda <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8000ed4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8000ed8:	d16d      	bne.n	8000fb6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8000eda:	68ab      	ldr	r3, [r5, #8]
 8000edc:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
 8000ee0:	d015      	beq.n	8000f0e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8000ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ee6:	d012      	beq.n	8000f0e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8000ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000eec:	d00f      	beq.n	8000f0e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8000eee:	484d      	ldr	r0, [pc, #308]	@ (8001024 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8000ef0:	f641 319a 	movw	r1, #7066	@ 0x1b9a
 8000ef4:	f003 fb82 	bl	80045fc <assert_failed>
 8000ef8:	e009      	b.n	8000f0e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d1e6      	bne.n	8000ecc <HAL_ADCEx_MultiModeConfigChannel+0x2c>
  assert_param(IS_ADC_MODE(multimode->Mode));
 8000efe:	4849      	ldr	r0, [pc, #292]	@ (8001024 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8000f00:	f641 3196 	movw	r1, #7062	@ 0x1b96
 8000f04:	f003 fb7a 	bl	80045fc <assert_failed>
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000f08:	682b      	ldr	r3, [r5, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1de      	bne.n	8000ecc <HAL_ADCEx_MultiModeConfigChannel+0x2c>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f0e:	6823      	ldr	r3, [r4, #0]
 8000f10:	4a45      	ldr	r2, [pc, #276]	@ (8001028 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8000f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f16:	d00c      	beq.n	8000f32 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d008      	beq.n	8000f2e <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8000f1c:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d04e      	beq.n	8000fc2 <HAL_ADCEx_MultiModeConfigChannel+0x122>
 8000f24:	4941      	ldr	r1, [pc, #260]	@ (800102c <HAL_ADCEx_MultiModeConfigChannel+0x18c>)
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d003      	beq.n	8000f32 <HAL_ADCEx_MultiModeConfigChannel+0x92>
    return HAL_ERROR;
 8000f2a:	2001      	movs	r0, #1
} 
 8000f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f2e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  __HAL_LOCK(hadc);
 8000f32:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 8000f36:	2901      	cmp	r1, #1
 8000f38:	d048      	beq.n	8000fcc <HAL_ADCEx_MultiModeConfigChannel+0x12c>
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000f40:	6899      	ldr	r1, [r3, #8]
 8000f42:	0748      	lsls	r0, r1, #29
 8000f44:	d42e      	bmi.n	8000fa4 <HAL_ADCEx_MultiModeConfigChannel+0x104>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000f46:	6891      	ldr	r1, [r2, #8]
 8000f48:	0749      	lsls	r1, r1, #29
 8000f4a:	d42b      	bmi.n	8000fa4 <HAL_ADCEx_MultiModeConfigChannel+0x104>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f50:	d053      	beq.n	8000ffa <HAL_ADCEx_MultiModeConfigChannel+0x15a>
 8000f52:	4e35      	ldr	r6, [pc, #212]	@ (8001028 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8000f54:	4936      	ldr	r1, [pc, #216]	@ (8001030 <HAL_ADCEx_MultiModeConfigChannel+0x190>)
 8000f56:	4837      	ldr	r0, [pc, #220]	@ (8001034 <HAL_ADCEx_MultiModeConfigChannel+0x194>)
 8000f58:	42b3      	cmp	r3, r6
 8000f5a:	bf08      	it	eq
 8000f5c:	4601      	moveq	r1, r0
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000f5e:	6828      	ldr	r0, [r5, #0]
 8000f60:	2800      	cmp	r0, #0
 8000f62:	d035      	beq.n	8000fd0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000f64:	688e      	ldr	r6, [r1, #8]
 8000f66:	686f      	ldr	r7, [r5, #4]
 8000f68:	f426 4c60 	bic.w	ip, r6, #57344	@ 0xe000
 8000f6c:	f894 6030 	ldrb.w	r6, [r4, #48]	@ 0x30
 8000f70:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 8000f74:	ea46 060c 	orr.w	r6, r6, ip
 8000f78:	608e      	str	r6, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000f7a:	689e      	ldr	r6, [r3, #8]
 8000f7c:	f006 0603 	and.w	r6, r6, #3
 8000f80:	2e01      	cmp	r6, #1
 8000f82:	d044      	beq.n	800100e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000f84:	6893      	ldr	r3, [r2, #8]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d037      	beq.n	8000ffe <HAL_ADCEx_MultiModeConfigChannel+0x15e>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000f8e:	688b      	ldr	r3, [r1, #8]
 8000f90:	68aa      	ldr	r2, [r5, #8]
 8000f92:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8000f96:	4310      	orrs	r0, r2
 8000f98:	f023 030f 	bic.w	r3, r3, #15
 8000f9c:	4318      	orrs	r0, r3
 8000f9e:	6088      	str	r0, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	e004      	b.n	8000fae <HAL_ADCEx_MultiModeConfigChannel+0x10e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000fa6:	f043 0320 	orr.w	r3, r3, #32
    tmp_hal_status = HAL_ERROR;
 8000faa:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fac:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
} 
 8000fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8000fb6:	481b      	ldr	r0, [pc, #108]	@ (8001024 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8000fb8:	f641 3199 	movw	r1, #7065	@ 0x1b99
 8000fbc:	f003 fb1e 	bl	80045fc <assert_failed>
 8000fc0:	e78b      	b.n	8000eda <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  __HAL_LOCK(hadc);
 8000fc2:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 8000fc6:	4a19      	ldr	r2, [pc, #100]	@ (800102c <HAL_ADCEx_MultiModeConfigChannel+0x18c>)
 8000fc8:	2901      	cmp	r1, #1
 8000fca:	d1b6      	bne.n	8000f3a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8000fcc:	2002      	movs	r0, #2
} 
 8000fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000fd0:	6888      	ldr	r0, [r1, #8]
 8000fd2:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8000fd6:	6088      	str	r0, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000fd8:	6898      	ldr	r0, [r3, #8]
 8000fda:	f000 0003 	and.w	r0, r0, #3
 8000fde:	2801      	cmp	r0, #1
 8000fe0:	d019      	beq.n	8001016 <HAL_ADCEx_MultiModeConfigChannel+0x176>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000fe2:	6893      	ldr	r3, [r2, #8]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d00c      	beq.n	8001006 <HAL_ADCEx_MultiModeConfigChannel+0x166>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000fec:	688b      	ldr	r3, [r1, #8]
 8000fee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8000ff2:	f023 030f 	bic.w	r3, r3, #15
 8000ff6:	608b      	str	r3, [r1, #8]
 8000ff8:	e7d2      	b.n	8000fa0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ffa:	490e      	ldr	r1, [pc, #56]	@ (8001034 <HAL_ADCEx_MultiModeConfigChannel+0x194>)
 8000ffc:	e7af      	b.n	8000f5e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000ffe:	6813      	ldr	r3, [r2, #0]
 8001000:	07de      	lsls	r6, r3, #31
 8001002:	d4cd      	bmi.n	8000fa0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8001004:	e7c3      	b.n	8000f8e <HAL_ADCEx_MultiModeConfigChannel+0xee>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001006:	6813      	ldr	r3, [r2, #0]
 8001008:	07db      	lsls	r3, r3, #31
 800100a:	d4c9      	bmi.n	8000fa0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800100c:	e7ee      	b.n	8000fec <HAL_ADCEx_MultiModeConfigChannel+0x14c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	07df      	lsls	r7, r3, #31
 8001012:	d4c5      	bmi.n	8000fa0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8001014:	e7b6      	b.n	8000f84 <HAL_ADCEx_MultiModeConfigChannel+0xe4>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	07d8      	lsls	r0, r3, #31
 800101a:	d4c1      	bmi.n	8000fa0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800101c:	e7e1      	b.n	8000fe2 <HAL_ADCEx_MultiModeConfigChannel+0x142>
 800101e:	bf00      	nop
 8001020:	50000400 	.word	0x50000400
 8001024:	080052b8 	.word	0x080052b8
 8001028:	50000100 	.word	0x50000100
 800102c:	50000500 	.word	0x50000500
 8001030:	50000700 	.word	0x50000700
 8001034:	50000300 	.word	0x50000300

08001038 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001038:	1ec3      	subs	r3, r0, #3
 800103a:	2b04      	cmp	r3, #4
{
 800103c:	b510      	push	{r4, lr}
 800103e:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001040:	d80e      	bhi.n	8001060 <HAL_NVIC_SetPriorityGrouping+0x28>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001042:	490a      	ldr	r1, [pc, #40]	@ (800106c <HAL_NVIC_SetPriorityGrouping+0x34>)
 8001044:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001046:	0223      	lsls	r3, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001048:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001050:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001054:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800105c:	60cb      	str	r3, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800105e:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8001062:	21ab      	movs	r1, #171	@ 0xab
 8001064:	f003 faca 	bl	80045fc <assert_failed>
 8001068:	e7eb      	b.n	8001042 <HAL_NVIC_SetPriorityGrouping+0xa>
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00
 8001070:	080052f4 	.word	0x080052f4

08001074 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001074:	2a0f      	cmp	r2, #15
{
 8001076:	b570      	push	{r4, r5, r6, lr}
 8001078:	4616      	mov	r6, r2
 800107a:	4605      	mov	r5, r0
 800107c:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800107e:	d834      	bhi.n	80010ea <HAL_NVIC_SetPriority+0x76>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001080:	2c0f      	cmp	r4, #15
 8001082:	d82d      	bhi.n	80010e0 <HAL_NVIC_SetPriority+0x6c>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <HAL_NVIC_SetPriority+0x80>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	f1c3 0207 	rsb	r2, r3, #7
 8001090:	2a04      	cmp	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	f103 0104 	add.w	r1, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001096:	bf28      	it	cs
 8001098:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	2906      	cmp	r1, #6
 800109c:	d917      	bls.n	80010ce <HAL_NVIC_SetPriority+0x5a>
 800109e:	1ed9      	subs	r1, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	408b      	lsls	r3, r1
 80010a6:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	4093      	lsls	r3, r2
 80010b0:	ea24 0303 	bic.w	r3, r4, r3
 80010b4:	408b      	lsls	r3, r1
 80010b6:	4333      	orrs	r3, r6
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b8:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80010ba:	2d00      	cmp	r5, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80010be:	db09      	blt.n	80010d4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	f105 4560 	add.w	r5, r5, #3758096384	@ 0xe0000000
 80010c4:	f505 4561 	add.w	r5, r5, #57600	@ 0xe100
 80010c8:	f885 3300 	strb.w	r3, [r5, #768]	@ 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80010cc:	bd70      	pop	{r4, r5, r6, pc}
 80010ce:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d0:	4631      	mov	r1, r6
 80010d2:	e7ea      	b.n	80010aa <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	4a08      	ldr	r2, [pc, #32]	@ (80010f8 <HAL_NVIC_SetPriority+0x84>)
 80010d6:	f005 050f 	and.w	r5, r5, #15
 80010da:	442a      	add	r2, r5
 80010dc:	7613      	strb	r3, [r2, #24]
 80010de:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80010e0:	4806      	ldr	r0, [pc, #24]	@ (80010fc <HAL_NVIC_SetPriority+0x88>)
 80010e2:	21c4      	movs	r1, #196	@ 0xc4
 80010e4:	f003 fa8a 	bl	80045fc <assert_failed>
 80010e8:	e7cc      	b.n	8001084 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80010ea:	4804      	ldr	r0, [pc, #16]	@ (80010fc <HAL_NVIC_SetPriority+0x88>)
 80010ec:	21c3      	movs	r1, #195	@ 0xc3
 80010ee:	f003 fa85 	bl	80045fc <assert_failed>
 80010f2:	e7c5      	b.n	8001080 <HAL_NVIC_SetPriority+0xc>
 80010f4:	e000ed00 	.word	0xe000ed00
 80010f8:	e000ecfc 	.word	0xe000ecfc
 80010fc:	080052f4 	.word	0x080052f4

08001100 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001100:	2800      	cmp	r0, #0
 8001102:	db08      	blt.n	8001116 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001104:	0941      	lsrs	r1, r0, #5
 8001106:	4a06      	ldr	r2, [pc, #24]	@ (8001120 <HAL_NVIC_EnableIRQ+0x20>)
 8001108:	f000 001f 	and.w	r0, r0, #31
 800110c:	2301      	movs	r3, #1
 800110e:	4083      	lsls	r3, r0
 8001110:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001114:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001116:	4803      	ldr	r0, [pc, #12]	@ (8001124 <HAL_NVIC_EnableIRQ+0x24>)
 8001118:	21d7      	movs	r1, #215	@ 0xd7
 800111a:	f003 ba6f 	b.w	80045fc <assert_failed>
 800111e:	bf00      	nop
 8001120:	e000e100 	.word	0xe000e100
 8001124:	080052f4 	.word	0x080052f4

08001128 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	3801      	subs	r0, #1
 800112a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800112e:	d301      	bcc.n	8001134 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001130:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001132:	4770      	bx	lr
{
 8001134:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	4c07      	ldr	r4, [pc, #28]	@ (8001158 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8001142:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001146:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001148:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	619a      	str	r2, [r3, #24]
}
 800114e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	6119      	str	r1, [r3, #16]
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
  /* Check DAC handle */
  if(hdac == NULL)
 800115c:	b1d8      	cbz	r0, 8001196 <HAL_DAC_Init+0x3a>
  {
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 800115e:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <HAL_DAC_Init+0x40>)
 8001160:	6802      	ldr	r2, [r0, #0]
 8001162:	429a      	cmp	r2, r3
{
 8001164:	b510      	push	{r4, lr}
 8001166:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8001168:	d004      	beq.n	8001174 <HAL_DAC_Init+0x18>
 800116a:	480d      	ldr	r0, [pc, #52]	@ (80011a0 <HAL_DAC_Init+0x44>)
 800116c:	f240 1147 	movw	r1, #327	@ 0x147
 8001170:	f003 fa44 	bl	80045fc <assert_failed>

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001174:	7923      	ldrb	r3, [r4, #4]
 8001176:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800117a:	b13b      	cbz	r3, 800118c <HAL_DAC_Init+0x30>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800117c:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800117e:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001180:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8001182:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001184:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001186:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8001188:	4618      	mov	r0, r3
}
 800118a:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800118c:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 800118e:	4620      	mov	r0, r4
 8001190:	f003 fafa 	bl	8004788 <HAL_DAC_MspInit>
 8001194:	e7f2      	b.n	800117c <HAL_DAC_Init+0x20>
     return HAL_ERROR;
 8001196:	2001      	movs	r0, #1
}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40007400 	.word	0x40007400
 80011a0:	08005330 	.word	0x08005330

080011a4 <HAL_DAC_ConfigChannel>:
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80011a4:	680b      	ldr	r3, [r1, #0]
{
 80011a6:	b570      	push	{r4, r5, r6, lr}
 80011a8:	460d      	mov	r5, r1
 80011aa:	4604      	mov	r4, r0
 80011ac:	4616      	mov	r6, r2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80011ae:	b17b      	cbz	r3, 80011d0 <HAL_DAC_ConfigChannel+0x2c>
 80011b0:	2b1c      	cmp	r3, #28
 80011b2:	d93c      	bls.n	800122e <HAL_DAC_ConfigChannel+0x8a>
 80011b4:	3b24      	subs	r3, #36	@ 0x24
 80011b6:	2b18      	cmp	r3, #24
 80011b8:	d805      	bhi.n	80011c6 <HAL_DAC_ConfigChannel+0x22>
 80011ba:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 80011be:	fa22 f303 	lsr.w	r3, r2, r3
 80011c2:	07da      	lsls	r2, r3, #31
 80011c4:	d404      	bmi.n	80011d0 <HAL_DAC_ConfigChannel+0x2c>
 80011c6:	4822      	ldr	r0, [pc, #136]	@ (8001250 <HAL_DAC_ConfigChannel+0xac>)
 80011c8:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80011cc:	f003 fa16 	bl	80045fc <assert_failed>
  {
    /* Output Switch (OUTEN) control */
    assert_param(IS_DAC_OUTPUT_SWITCH_STATE(sConfig->DAC_OutputSwitch));    
  }    
#else
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
 80011d0:	686b      	ldr	r3, [r5, #4]
 80011d2:	f033 0302 	bics.w	r3, r3, #2
 80011d6:	d004      	beq.n	80011e2 <HAL_DAC_ConfigChannel+0x3e>
 80011d8:	481d      	ldr	r0, [pc, #116]	@ (8001250 <HAL_DAC_ConfigChannel+0xac>)
 80011da:	f240 3116 	movw	r1, #790	@ 0x316
 80011de:	f003 fa0d 	bl	80045fc <assert_failed>
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 80011e2:	f036 0310 	bics.w	r3, r6, #16
 80011e6:	d004      	beq.n	80011f2 <HAL_DAC_ConfigChannel+0x4e>
 80011e8:	4819      	ldr	r0, [pc, #100]	@ (8001250 <HAL_DAC_ConfigChannel+0xac>)
 80011ea:	f44f 7146 	mov.w	r1, #792	@ 0x318
 80011ee:	f003 fa05 	bl	80045fc <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80011f2:	7963      	ldrb	r3, [r4, #5]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d028      	beq.n	800124a <HAL_DAC_ConfigChannel+0xa6>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011f8:	2302      	movs	r3, #2
 80011fa:	7123      	strb	r3, [r4, #4]
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80011fc:	e9d5 3000 	ldrd	r3, r0, [r5]
  tmpreg1 = hdac->Instance->CR;
 8001200:	6822      	ldr	r2, [r4, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001202:	4303      	orrs	r3, r0
  tmpreg1 = hdac->Instance->CR;
 8001204:	6811      	ldr	r1, [r2, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001206:	f640 70fe 	movw	r0, #4094	@ 0xffe
 800120a:	40b0      	lsls	r0, r6
 800120c:	ea21 0100 	bic.w	r1, r1, r0
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001210:	40b3      	lsls	r3, r6
 8001212:	430b      	orrs	r3, r1
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001214:	6013      	str	r3, [r2, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001216:	6813      	ldr	r3, [r2, #0]
 8001218:	21c0      	movs	r1, #192	@ 0xc0
 800121a:	40b1      	lsls	r1, r6

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800121c:	2500      	movs	r5, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800121e:	ea23 0301 	bic.w	r3, r3, r1
  hdac->State = HAL_DAC_STATE_READY;
 8001222:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001224:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8001226:	7121      	strb	r1, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001228:	7165      	strb	r5, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
 800122a:	4628      	mov	r0, r5
}
 800122c:	bd70      	pop	{r4, r5, r6, pc}
 800122e:	2b03      	cmp	r3, #3
 8001230:	d9c9      	bls.n	80011c6 <HAL_DAC_ConfigChannel+0x22>
 8001232:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8001236:	fa22 f303 	lsr.w	r3, r2, r3
 800123a:	07db      	lsls	r3, r3, #31
 800123c:	d4c8      	bmi.n	80011d0 <HAL_DAC_ConfigChannel+0x2c>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800123e:	4804      	ldr	r0, [pc, #16]	@ (8001250 <HAL_DAC_ConfigChannel+0xac>)
 8001240:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8001244:	f003 f9da 	bl	80045fc <assert_failed>
 8001248:	e7c2      	b.n	80011d0 <HAL_DAC_ConfigChannel+0x2c>
  __HAL_LOCK(hdac);
 800124a:	2002      	movs	r0, #2
}
 800124c:	bd70      	pop	{r4, r5, r6, pc}
 800124e:	bf00      	nop
 8001250:	08005368 	.word	0x08005368

08001254 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001254:	2800      	cmp	r0, #0
 8001256:	f000 80a9 	beq.w	80013ac <HAL_DMA_Init+0x158>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800125a:	6803      	ldr	r3, [r0, #0]
 800125c:	4a54      	ldr	r2, [pc, #336]	@ (80013b0 <HAL_DMA_Init+0x15c>)
 800125e:	4293      	cmp	r3, r2
{
 8001260:	b510      	push	{r4, lr}
 8001262:	4604      	mov	r4, r0
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8001264:	d025      	beq.n	80012b2 <HAL_DMA_Init+0x5e>
 8001266:	3214      	adds	r2, #20
 8001268:	4293      	cmp	r3, r2
 800126a:	d022      	beq.n	80012b2 <HAL_DMA_Init+0x5e>
 800126c:	3214      	adds	r2, #20
 800126e:	4293      	cmp	r3, r2
 8001270:	d01f      	beq.n	80012b2 <HAL_DMA_Init+0x5e>
 8001272:	3214      	adds	r2, #20
 8001274:	4293      	cmp	r3, r2
 8001276:	d01c      	beq.n	80012b2 <HAL_DMA_Init+0x5e>
 8001278:	3214      	adds	r2, #20
 800127a:	4293      	cmp	r3, r2
 800127c:	d019      	beq.n	80012b2 <HAL_DMA_Init+0x5e>
 800127e:	3214      	adds	r2, #20
 8001280:	4293      	cmp	r3, r2
 8001282:	d016      	beq.n	80012b2 <HAL_DMA_Init+0x5e>
 8001284:	3214      	adds	r2, #20
 8001286:	4293      	cmp	r3, r2
 8001288:	d013      	beq.n	80012b2 <HAL_DMA_Init+0x5e>
 800128a:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 800128e:	4293      	cmp	r3, r2
 8001290:	d00f      	beq.n	80012b2 <HAL_DMA_Init+0x5e>
 8001292:	3214      	adds	r2, #20
 8001294:	4293      	cmp	r3, r2
 8001296:	d00c      	beq.n	80012b2 <HAL_DMA_Init+0x5e>
 8001298:	3214      	adds	r2, #20
 800129a:	4293      	cmp	r3, r2
 800129c:	d009      	beq.n	80012b2 <HAL_DMA_Init+0x5e>
 800129e:	3214      	adds	r2, #20
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d006      	beq.n	80012b2 <HAL_DMA_Init+0x5e>
 80012a4:	3214      	adds	r2, #20
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d003      	beq.n	80012b2 <HAL_DMA_Init+0x5e>
 80012aa:	4842      	ldr	r0, [pc, #264]	@ (80013b4 <HAL_DMA_Init+0x160>)
 80012ac:	2193      	movs	r1, #147	@ 0x93
 80012ae:	f003 f9a5 	bl	80045fc <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80012b2:	6863      	ldr	r3, [r4, #4]
 80012b4:	f033 0210 	bics.w	r2, r3, #16
 80012b8:	d15e      	bne.n	8001378 <HAL_DMA_Init+0x124>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80012ba:	68a3      	ldr	r3, [r4, #8]
 80012bc:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
 80012c0:	d003      	beq.n	80012ca <HAL_DMA_Init+0x76>
 80012c2:	483c      	ldr	r0, [pc, #240]	@ (80013b4 <HAL_DMA_Init+0x160>)
 80012c4:	2195      	movs	r1, #149	@ 0x95
 80012c6:	f003 f999 	bl	80045fc <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80012ca:	68e3      	ldr	r3, [r4, #12]
 80012cc:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 80012d0:	d003      	beq.n	80012da <HAL_DMA_Init+0x86>
 80012d2:	4838      	ldr	r0, [pc, #224]	@ (80013b4 <HAL_DMA_Init+0x160>)
 80012d4:	2196      	movs	r1, #150	@ 0x96
 80012d6:	f003 f991 	bl	80045fc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80012da:	6923      	ldr	r3, [r4, #16]
 80012dc:	f433 7280 	bics.w	r2, r3, #256	@ 0x100
 80012e0:	d002      	beq.n	80012e8 <HAL_DMA_Init+0x94>
 80012e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012e6:	d14f      	bne.n	8001388 <HAL_DMA_Init+0x134>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80012e8:	6963      	ldr	r3, [r4, #20]
 80012ea:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
 80012ee:	d002      	beq.n	80012f6 <HAL_DMA_Init+0xa2>
 80012f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012f4:	d151      	bne.n	800139a <HAL_DMA_Init+0x146>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80012f6:	69a3      	ldr	r3, [r4, #24]
 80012f8:	f033 0320 	bics.w	r3, r3, #32
 80012fc:	d003      	beq.n	8001306 <HAL_DMA_Init+0xb2>
 80012fe:	482d      	ldr	r0, [pc, #180]	@ (80013b4 <HAL_DMA_Init+0x160>)
 8001300:	2199      	movs	r1, #153	@ 0x99
 8001302:	f003 f97b 	bl	80045fc <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001306:	69e0      	ldr	r0, [r4, #28]
 8001308:	f430 5340 	bics.w	r3, r0, #12288	@ 0x3000
 800130c:	d004      	beq.n	8001318 <HAL_DMA_Init+0xc4>
 800130e:	4829      	ldr	r0, [pc, #164]	@ (80013b4 <HAL_DMA_Init+0x160>)
 8001310:	219a      	movs	r1, #154	@ 0x9a
 8001312:	f003 f973 	bl	80045fc <assert_failed>

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8001316:	69e0      	ldr	r0, [r4, #28]
  tmp = hdma->Instance->CCR;
 8001318:	6821      	ldr	r1, [r4, #0]
 800131a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 800131e:	4313      	orrs	r3, r2
 8001320:	68e2      	ldr	r2, [r4, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	6922      	ldr	r2, [r4, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	6962      	ldr	r2, [r4, #20]
 800132a:	4313      	orrs	r3, r2
 800132c:	69a2      	ldr	r2, [r4, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001332:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 8001336:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800133a:	4313      	orrs	r3, r2
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800133c:	4a1e      	ldr	r2, [pc, #120]	@ (80013b8 <HAL_DMA_Init+0x164>)
  tmp |=  hdma->Init.Direction        |
 800133e:	4303      	orrs	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001340:	4291      	cmp	r1, r2
  hdma->Instance->CCR = tmp;
 8001342:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001344:	d90f      	bls.n	8001366 <HAL_DMA_Init+0x112>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001346:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <HAL_DMA_Init+0x168>)
 8001348:	4a1d      	ldr	r2, [pc, #116]	@ (80013c0 <HAL_DMA_Init+0x16c>)
 800134a:	440b      	add	r3, r1
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA2;
 8001352:	491c      	ldr	r1, [pc, #112]	@ (80013c4 <HAL_DMA_Init+0x170>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001354:	009b      	lsls	r3, r3, #2
  hdma->Lock = HAL_UNLOCKED;
 8001356:	f44f 7280 	mov.w	r2, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800135a:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 800135c:	8422      	strh	r2, [r4, #32]
 800135e:	e9c4 130f 	strd	r1, r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001362:	63a0      	str	r0, [r4, #56]	@ 0x38
}
 8001364:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001366:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <HAL_DMA_Init+0x174>)
 8001368:	4a15      	ldr	r2, [pc, #84]	@ (80013c0 <HAL_DMA_Init+0x16c>)
 800136a:	440b      	add	r3, r1
 800136c:	fba2 2303 	umull	r2, r3, r2, r3
 8001370:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA1;
 8001372:	4916      	ldr	r1, [pc, #88]	@ (80013cc <HAL_DMA_Init+0x178>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001374:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8001376:	e7ee      	b.n	8001356 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001378:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800137c:	d09d      	beq.n	80012ba <HAL_DMA_Init+0x66>
 800137e:	480d      	ldr	r0, [pc, #52]	@ (80013b4 <HAL_DMA_Init+0x160>)
 8001380:	2194      	movs	r1, #148	@ 0x94
 8001382:	f003 f93b 	bl	80045fc <assert_failed>
 8001386:	e798      	b.n	80012ba <HAL_DMA_Init+0x66>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001388:	480a      	ldr	r0, [pc, #40]	@ (80013b4 <HAL_DMA_Init+0x160>)
 800138a:	2197      	movs	r1, #151	@ 0x97
 800138c:	f003 f936 	bl	80045fc <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001390:	6963      	ldr	r3, [r4, #20]
 8001392:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
 8001396:	d0ae      	beq.n	80012f6 <HAL_DMA_Init+0xa2>
 8001398:	e7aa      	b.n	80012f0 <HAL_DMA_Init+0x9c>
 800139a:	4806      	ldr	r0, [pc, #24]	@ (80013b4 <HAL_DMA_Init+0x160>)
 800139c:	2198      	movs	r1, #152	@ 0x98
 800139e:	f003 f92d 	bl	80045fc <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80013a2:	69a3      	ldr	r3, [r4, #24]
 80013a4:	f033 0320 	bics.w	r3, r3, #32
 80013a8:	d0ad      	beq.n	8001306 <HAL_DMA_Init+0xb2>
 80013aa:	e7a8      	b.n	80012fe <HAL_DMA_Init+0xaa>
    return HAL_ERROR;
 80013ac:	2001      	movs	r0, #1
}
 80013ae:	4770      	bx	lr
 80013b0:	40020008 	.word	0x40020008
 80013b4:	080053a4 	.word	0x080053a4
 80013b8:	40020407 	.word	0x40020407
 80013bc:	bffdfbf8 	.word	0xbffdfbf8
 80013c0:	cccccccd 	.word	0xcccccccd
 80013c4:	40020400 	.word	0x40020400
 80013c8:	bffdfff8 	.word	0xbffdfff8
 80013cc:	40020000 	.word	0x40020000

080013d0 <HAL_DMA_Start_IT>:
{
 80013d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80013d4:	1e5d      	subs	r5, r3, #1
{
 80013d6:	461e      	mov	r6, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80013d8:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80013dc:	429d      	cmp	r5, r3
{
 80013de:	4604      	mov	r4, r0
 80013e0:	460f      	mov	r7, r1
 80013e2:	4690      	mov	r8, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80013e4:	d835      	bhi.n	8001452 <HAL_DMA_Start_IT+0x82>
  __HAL_LOCK(hdma);
 80013e6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d009      	beq.n	8001402 <HAL_DMA_Start_IT+0x32>
 80013ee:	2301      	movs	r3, #1
 80013f0:	f884 3020 	strb.w	r3, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80013f4:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d005      	beq.n	8001408 <HAL_DMA_Start_IT+0x38>
    __HAL_UNLOCK(hdma);
 80013fc:	2300      	movs	r3, #0
 80013fe:	f884 3020 	strb.w	r3, [r4, #32]
  __HAL_LOCK(hdma);
 8001402:	2002      	movs	r0, #2
}
 8001404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001408:	2202      	movs	r2, #2
 800140a:	f884 2021 	strb.w	r2, [r4, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800140e:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001410:	2200      	movs	r2, #0
 8001412:	63a2      	str	r2, [r4, #56]	@ 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001414:	682a      	ldr	r2, [r5, #0]
 8001416:	f022 0201 	bic.w	r2, r2, #1
 800141a:	602a      	str	r2, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800141c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800141e:	4093      	lsls	r3, r2
 8001420:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001422:	6053      	str	r3, [r2, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001424:	6863      	ldr	r3, [r4, #4]
  hdma->Instance->CNDTR = DataLength;
 8001426:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001428:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800142a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 800142c:	bf0b      	itete	eq
 800142e:	f8c5 8008 	streq.w	r8, [r5, #8]
    hdma->Instance->CPAR = SrcAddress;
 8001432:	60af      	strne	r7, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001434:	60ef      	streq	r7, [r5, #12]
    hdma->Instance->CMAR = DstAddress;
 8001436:	f8c5 800c 	strne.w	r8, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800143a:	b183      	cbz	r3, 800145e <HAL_DMA_Start_IT+0x8e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800143c:	682b      	ldr	r3, [r5, #0]
 800143e:	f043 030e 	orr.w	r3, r3, #14
 8001442:	602b      	str	r3, [r5, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001444:	682b      	ldr	r3, [r5, #0]
 8001446:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800144a:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 800144c:	602b      	str	r3, [r5, #0]
}
 800144e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001452:	4807      	ldr	r0, [pc, #28]	@ (8001470 <HAL_DMA_Start_IT+0xa0>)
 8001454:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8001458:	f003 f8d0 	bl	80045fc <assert_failed>
 800145c:	e7c3      	b.n	80013e6 <HAL_DMA_Start_IT+0x16>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800145e:	682b      	ldr	r3, [r5, #0]
 8001460:	f043 030a 	orr.w	r3, r3, #10
 8001464:	602b      	str	r3, [r5, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001466:	682b      	ldr	r3, [r5, #0]
 8001468:	f023 0304 	bic.w	r3, r3, #4
 800146c:	602b      	str	r3, [r5, #0]
 800146e:	e7e9      	b.n	8001444 <HAL_DMA_Start_IT+0x74>
 8001470:	080053a4 	.word	0x080053a4

08001474 <HAL_DMA_Abort>:
  if(NULL == hdma)
 8001474:	b148      	cbz	r0, 800148a <HAL_DMA_Abort+0x16>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001476:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 800147a:	2a02      	cmp	r2, #2
 800147c:	4603      	mov	r3, r0
 800147e:	d006      	beq.n	800148e <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001480:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8001482:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001484:	6381      	str	r1, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8001486:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 800148a:	2001      	movs	r0, #1
}
 800148c:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800148e:	6802      	ldr	r2, [r0, #0]
 8001490:	6811      	ldr	r1, [r2, #0]
 8001492:	f021 010e 	bic.w	r1, r1, #14
{
 8001496:	b410      	push	{r4}
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001498:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800149a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800149c:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800149e:	6811      	ldr	r1, [r2, #0]
 80014a0:	f021 0101 	bic.w	r1, r1, #1
 80014a4:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80014a6:	2201      	movs	r2, #1
 80014a8:	40a2      	lsls	r2, r4
  __HAL_UNLOCK(hdma);
 80014aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80014ae:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdma);
 80014b0:	8419      	strh	r1, [r3, #32]
  return HAL_OK;
 80014b2:	2000      	movs	r0, #0
}
 80014b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop

080014bc <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014bc:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 80014c0:	2a02      	cmp	r2, #2
 80014c2:	d003      	beq.n	80014cc <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c4:	2204      	movs	r2, #4
 80014c6:	6382      	str	r2, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 80014c8:	2001      	movs	r0, #1
}
 80014ca:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014cc:	6802      	ldr	r2, [r0, #0]
 80014ce:	6811      	ldr	r1, [r2, #0]
 80014d0:	f021 010e 	bic.w	r1, r1, #14
{
 80014d4:	b510      	push	{r4, lr}
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014d6:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014d8:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014da:	6811      	ldr	r1, [r2, #0]
 80014dc:	f021 0101 	bic.w	r1, r1, #1
 80014e0:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014e2:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80014e4:	2201      	movs	r2, #1
 80014e6:	408a      	lsls	r2, r1
    if(hdma->XferAbortCallback != NULL)
 80014e8:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014ea:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80014ec:	f44f 7c80 	mov.w	ip, #256	@ 0x100
 80014f0:	f8a0 c020 	strh.w	ip, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80014f4:	b101      	cbz	r1, 80014f8 <HAL_DMA_Abort_IT+0x3c>
      hdma->XferAbortCallback(hdma);
 80014f6:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 80014f8:	2000      	movs	r0, #0
}
 80014fa:	bd10      	pop	{r4, pc}

080014fc <HAL_DMA_IRQHandler>:
{
 80014fc:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014fe:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001500:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001502:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001504:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001506:	2304      	movs	r3, #4
 8001508:	4093      	lsls	r3, r2
 800150a:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 800150c:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800150e:	d00e      	beq.n	800152e <HAL_DMA_IRQHandler+0x32>
 8001510:	f015 0f04 	tst.w	r5, #4
 8001514:	d00b      	beq.n	800152e <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001516:	6822      	ldr	r2, [r4, #0]
 8001518:	0692      	lsls	r2, r2, #26
 800151a:	d403      	bmi.n	8001524 <HAL_DMA_IRQHandler+0x28>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800151c:	6822      	ldr	r2, [r4, #0]
 800151e:	f022 0204 	bic.w	r2, r2, #4
 8001522:	6022      	str	r2, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001524:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001526:	6073      	str	r3, [r6, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001528:	b1ca      	cbz	r2, 800155e <HAL_DMA_IRQHandler+0x62>
}
 800152a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 800152c:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800152e:	2302      	movs	r3, #2
 8001530:	4093      	lsls	r3, r2
 8001532:	420b      	tst	r3, r1
 8001534:	d015      	beq.n	8001562 <HAL_DMA_IRQHandler+0x66>
 8001536:	f015 0f02 	tst.w	r5, #2
 800153a:	d012      	beq.n	8001562 <HAL_DMA_IRQHandler+0x66>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800153c:	6822      	ldr	r2, [r4, #0]
 800153e:	0692      	lsls	r2, r2, #26
 8001540:	d406      	bmi.n	8001550 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001542:	6822      	ldr	r2, [r4, #0]
 8001544:	f022 020a 	bic.w	r2, r2, #10
 8001548:	6022      	str	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800154a:	2201      	movs	r2, #1
 800154c:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
    if(hdma->XferCpltCallback != NULL)
 8001550:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001552:	6073      	str	r3, [r6, #4]
    __HAL_UNLOCK(hdma);
 8001554:	2100      	movs	r1, #0
 8001556:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800155a:	2a00      	cmp	r2, #0
 800155c:	d1e5      	bne.n	800152a <HAL_DMA_IRQHandler+0x2e>
}
 800155e:	bc70      	pop	{r4, r5, r6}
 8001560:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001562:	2308      	movs	r3, #8
 8001564:	4093      	lsls	r3, r2
 8001566:	420b      	tst	r3, r1
 8001568:	d0f9      	beq.n	800155e <HAL_DMA_IRQHandler+0x62>
 800156a:	072b      	lsls	r3, r5, #28
 800156c:	d5f7      	bpl.n	800155e <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800156e:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8001570:	6b01      	ldr	r1, [r0, #48]	@ 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001572:	f023 030e 	bic.w	r3, r3, #14
 8001576:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001578:	2301      	movs	r3, #1
 800157a:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma);
 800157e:	f44f 7480 	mov.w	r4, #256	@ 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001582:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8001584:	8404      	strh	r4, [r0, #32]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001586:	6383      	str	r3, [r0, #56]	@ 0x38
    if(hdma->XferErrorCallback != NULL)
 8001588:	2900      	cmp	r1, #0
 800158a:	d0e8      	beq.n	800155e <HAL_DMA_IRQHandler+0x62>
}
 800158c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800158e:	4708      	bx	r1

08001590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001594:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
{
 8001598:	b083      	sub	sp, #12
 800159a:	4606      	mov	r6, r0
 800159c:	4688      	mov	r8, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800159e:	d01e      	beq.n	80015de <HAL_GPIO_Init+0x4e>
 80015a0:	4bb9      	ldr	r3, [pc, #740]	@ (8001888 <HAL_GPIO_Init+0x2f8>)
 80015a2:	4298      	cmp	r0, r3
 80015a4:	d01b      	beq.n	80015de <HAL_GPIO_Init+0x4e>
 80015a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015aa:	4298      	cmp	r0, r3
 80015ac:	d017      	beq.n	80015de <HAL_GPIO_Init+0x4e>
 80015ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015b2:	4298      	cmp	r0, r3
 80015b4:	d013      	beq.n	80015de <HAL_GPIO_Init+0x4e>
 80015b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015ba:	4298      	cmp	r0, r3
 80015bc:	d00f      	beq.n	80015de <HAL_GPIO_Init+0x4e>
 80015be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015c2:	4298      	cmp	r0, r3
 80015c4:	d00b      	beq.n	80015de <HAL_GPIO_Init+0x4e>
 80015c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015ca:	4298      	cmp	r0, r3
 80015cc:	d007      	beq.n	80015de <HAL_GPIO_Init+0x4e>
 80015ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015d2:	4298      	cmp	r0, r3
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x4e>
 80015d6:	48ad      	ldr	r0, [pc, #692]	@ (800188c <HAL_GPIO_Init+0x2fc>)
 80015d8:	21b2      	movs	r1, #178	@ 0xb2
 80015da:	f003 f80f 	bl	80045fc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80015de:	f8d8 1000 	ldr.w	r1, [r8]
 80015e2:	b28b      	uxth	r3, r1
 80015e4:	b11b      	cbz	r3, 80015ee <HAL_GPIO_Init+0x5e>
 80015e6:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80015ea:	f0c0 8146 	bcc.w	800187a <HAL_GPIO_Init+0x2ea>
 80015ee:	48a7      	ldr	r0, [pc, #668]	@ (800188c <HAL_GPIO_Init+0x2fc>)
 80015f0:	21b3      	movs	r1, #179	@ 0xb3
 80015f2:	f003 f803 	bl	80045fc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80015f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d90d      	bls.n	800161a <HAL_GPIO_Init+0x8a>
 80015fe:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001602:	d00a      	beq.n	800161a <HAL_GPIO_Init+0x8a>
 8001604:	f200 80fd 	bhi.w	8001802 <HAL_GPIO_Init+0x272>
 8001608:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800160c:	d005      	beq.n	800161a <HAL_GPIO_Init+0x8a>
 800160e:	f240 80ec 	bls.w	80017ea <HAL_GPIO_Init+0x25a>
 8001612:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8001616:	f040 80ef 	bne.w	80017f8 <HAL_GPIO_Init+0x268>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161a:	f8d8 1000 	ldr.w	r1, [r8]
 800161e:	2900      	cmp	r1, #0
 8001620:	f000 80e0 	beq.w	80017e4 <HAL_GPIO_Init+0x254>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001624:	4b9a      	ldr	r3, [pc, #616]	@ (8001890 <HAL_GPIO_Init+0x300>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001626:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 80018a8 <HAL_GPIO_Init+0x318>
{
 800162a:	2400      	movs	r4, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800162c:	2501      	movs	r5, #1
 800162e:	40a5      	lsls	r5, r4
    if (iocurrent != 0x00u)
 8001630:	ea15 0b01 	ands.w	fp, r5, r1
 8001634:	f000 80d1 	beq.w	80017da <HAL_GPIO_Init+0x24a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001638:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800163c:	f000 0103 	and.w	r1, r0, #3
 8001640:	ea4f 0a44 	mov.w	sl, r4, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001644:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001646:	f101 3cff 	add.w	ip, r1, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800164a:	fa07 f70a 	lsl.w	r7, r7, sl
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800164e:	f1bc 0f01 	cmp.w	ip, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001652:	ea6f 0707 	mvn.w	r7, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001656:	f240 80e3 	bls.w	8001820 <HAL_GPIO_Init+0x290>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800165a:	2903      	cmp	r1, #3
 800165c:	d053      	beq.n	8001706 <HAL_GPIO_Init+0x176>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800165e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8001662:	2d02      	cmp	r5, #2
 8001664:	f200 80ff 	bhi.w	8001866 <HAL_GPIO_Init+0x2d6>
        temp = GPIOx->PUPDR;
 8001668:	68f2      	ldr	r2, [r6, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800166a:	fa05 f50a 	lsl.w	r5, r5, sl
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800166e:	ea02 0c07 	and.w	ip, r2, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001672:	ea45 050c 	orr.w	r5, r5, ip
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001676:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8001678:	60f5      	str	r5, [r6, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167a:	d144      	bne.n	8001706 <HAL_GPIO_Init+0x176>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800167c:	f1b6 4f90 	cmp.w	r6, #1207959552	@ 0x48000000
 8001680:	d01e      	beq.n	80016c0 <HAL_GPIO_Init+0x130>
 8001682:	4a81      	ldr	r2, [pc, #516]	@ (8001888 <HAL_GPIO_Init+0x2f8>)
 8001684:	4296      	cmp	r6, r2
 8001686:	d01b      	beq.n	80016c0 <HAL_GPIO_Init+0x130>
 8001688:	4982      	ldr	r1, [pc, #520]	@ (8001894 <HAL_GPIO_Init+0x304>)
 800168a:	428e      	cmp	r6, r1
 800168c:	d018      	beq.n	80016c0 <HAL_GPIO_Init+0x130>
 800168e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8001692:	428e      	cmp	r6, r1
 8001694:	d014      	beq.n	80016c0 <HAL_GPIO_Init+0x130>
 8001696:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800169a:	428e      	cmp	r6, r1
 800169c:	d010      	beq.n	80016c0 <HAL_GPIO_Init+0x130>
 800169e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80016a2:	428e      	cmp	r6, r1
 80016a4:	d00c      	beq.n	80016c0 <HAL_GPIO_Init+0x130>
 80016a6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80016aa:	428e      	cmp	r6, r1
 80016ac:	d008      	beq.n	80016c0 <HAL_GPIO_Init+0x130>
 80016ae:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80016b2:	428e      	cmp	r6, r1
 80016b4:	d004      	beq.n	80016c0 <HAL_GPIO_Init+0x130>
 80016b6:	4875      	ldr	r0, [pc, #468]	@ (800188c <HAL_GPIO_Init+0x2fc>)
 80016b8:	21e2      	movs	r1, #226	@ 0xe2
 80016ba:	f002 ff9f 	bl	80045fc <assert_failed>
 80016be:	4b74      	ldr	r3, [pc, #464]	@ (8001890 <HAL_GPIO_Init+0x300>)
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80016c0:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80016c4:	280c      	cmp	r0, #12
 80016c6:	d90a      	bls.n	80016de <HAL_GPIO_Init+0x14e>
 80016c8:	f1a0 010e 	sub.w	r1, r0, #14
 80016cc:	2901      	cmp	r1, #1
 80016ce:	d906      	bls.n	80016de <HAL_GPIO_Init+0x14e>
 80016d0:	486e      	ldr	r0, [pc, #440]	@ (800188c <HAL_GPIO_Init+0x2fc>)
 80016d2:	21e3      	movs	r1, #227	@ 0xe3
 80016d4:	f002 ff92 	bl	80045fc <assert_failed>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016d8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80016dc:	4b6c      	ldr	r3, [pc, #432]	@ (8001890 <HAL_GPIO_Init+0x300>)
        temp = GPIOx->AFR[position >> 3u];
 80016de:	08e5      	lsrs	r5, r4, #3
 80016e0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e4:	f004 0107 	and.w	r1, r4, #7
        temp = GPIOx->AFR[position >> 3u];
 80016e8:	6a2a      	ldr	r2, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016ea:	0089      	lsls	r1, r1, #2
 80016ec:	f04f 0e0f 	mov.w	lr, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016f0:	4088      	lsls	r0, r1
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016f2:	fa0e f101 	lsl.w	r1, lr, r1
 80016f6:	ea22 0101 	bic.w	r1, r2, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016fa:	4301      	orrs	r1, r0
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
        GPIOx->AFR[position >> 3u] = temp;
 8001700:	6229      	str	r1, [r5, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001702:	f000 0103 	and.w	r1, r0, #3
      temp = GPIOx->MODER;
 8001706:	6835      	ldr	r5, [r6, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001708:	fa01 f10a 	lsl.w	r1, r1, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800170c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800170e:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001710:	f410 3f40 	tst.w	r0, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001714:	6031      	str	r1, [r6, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001716:	d05e      	beq.n	80017d6 <HAL_GPIO_Init+0x246>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001718:	699d      	ldr	r5, [r3, #24]
 800171a:	f045 0501 	orr.w	r5, r5, #1
 800171e:	619d      	str	r5, [r3, #24]
 8001720:	699d      	ldr	r5, [r3, #24]
 8001722:	f024 0103 	bic.w	r1, r4, #3
 8001726:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800172a:	f005 0501 	and.w	r5, r5, #1
 800172e:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 8001732:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001734:	f004 0c03 	and.w	ip, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001738:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800173a:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800173c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001740:	270f      	movs	r7, #15
 8001742:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001746:	f1b6 4f90 	cmp.w	r6, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800174a:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800174e:	d01b      	beq.n	8001788 <HAL_GPIO_Init+0x1f8>
 8001750:	4a4d      	ldr	r2, [pc, #308]	@ (8001888 <HAL_GPIO_Init+0x2f8>)
 8001752:	4296      	cmp	r6, r2
 8001754:	f000 80af 	beq.w	80018b6 <HAL_GPIO_Init+0x326>
 8001758:	4f4e      	ldr	r7, [pc, #312]	@ (8001894 <HAL_GPIO_Init+0x304>)
 800175a:	42be      	cmp	r6, r7
 800175c:	f000 80b0 	beq.w	80018c0 <HAL_GPIO_Init+0x330>
 8001760:	4f4d      	ldr	r7, [pc, #308]	@ (8001898 <HAL_GPIO_Init+0x308>)
 8001762:	42be      	cmp	r6, r7
 8001764:	f000 80a2 	beq.w	80018ac <HAL_GPIO_Init+0x31c>
 8001768:	4f4c      	ldr	r7, [pc, #304]	@ (800189c <HAL_GPIO_Init+0x30c>)
 800176a:	42be      	cmp	r6, r7
 800176c:	f000 80ad 	beq.w	80018ca <HAL_GPIO_Init+0x33a>
 8001770:	4f4b      	ldr	r7, [pc, #300]	@ (80018a0 <HAL_GPIO_Init+0x310>)
 8001772:	42be      	cmp	r6, r7
 8001774:	f000 80ae 	beq.w	80018d4 <HAL_GPIO_Init+0x344>
 8001778:	4f4a      	ldr	r7, [pc, #296]	@ (80018a4 <HAL_GPIO_Init+0x314>)
 800177a:	42be      	cmp	r6, r7
 800177c:	bf0c      	ite	eq
 800177e:	2706      	moveq	r7, #6
 8001780:	2707      	movne	r7, #7
 8001782:	fa07 f70c 	lsl.w	r7, r7, ip
 8001786:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001788:	608d      	str	r5, [r1, #8]
        temp = EXTI->RTSR;
 800178a:	f8d9 1008 	ldr.w	r1, [r9, #8]
        temp &= ~(iocurrent);
 800178e:	ea6f 050b 	mvn.w	r5, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001792:	02c7      	lsls	r7, r0, #11
        temp &= ~(iocurrent);
 8001794:	bf54      	ite	pl
 8001796:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 8001798:	ea4b 0101 	orrmi.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 800179c:	f8c9 1008 	str.w	r1, [r9, #8]

        temp = EXTI->FTSR;
 80017a0:	f8d9 100c 	ldr.w	r1, [r9, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017a4:	0282      	lsls	r2, r0, #10
        temp &= ~(iocurrent);
 80017a6:	bf54      	ite	pl
 80017a8:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 80017aa:	ea4b 0101 	orrmi.w	r1, fp, r1
        }
        EXTI->FTSR = temp;
 80017ae:	f8c9 100c 	str.w	r1, [r9, #12]

        temp = EXTI->EMR;
 80017b2:	f8d9 1004 	ldr.w	r1, [r9, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017b6:	0387      	lsls	r7, r0, #14
        temp &= ~(iocurrent);
 80017b8:	bf54      	ite	pl
 80017ba:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 80017bc:	ea4b 0101 	orrmi.w	r1, fp, r1
        }
        EXTI->EMR = temp;
 80017c0:	f8c9 1004 	str.w	r1, [r9, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c4:	f8d9 1000 	ldr.w	r1, [r9]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017c8:	03c2      	lsls	r2, r0, #15
        temp &= ~(iocurrent);
 80017ca:	bf54      	ite	pl
 80017cc:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 80017ce:	ea4b 0101 	orrmi.w	r1, fp, r1
        }
        EXTI->IMR = temp;
 80017d2:	f8c9 1000 	str.w	r1, [r9]
 80017d6:	f8d8 1000 	ldr.w	r1, [r8]
      }
    }

    position++;
 80017da:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017dc:	fa31 f004 	lsrs.w	r0, r1, r4
 80017e0:	f47f af24 	bne.w	800162c <HAL_GPIO_Init+0x9c>
  }
}
 80017e4:	b003      	add	sp, #12
 80017e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	f67f af15 	bls.w	800161a <HAL_GPIO_Init+0x8a>
 80017f0:	3b11      	subs	r3, #17
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	f67f af11 	bls.w	800161a <HAL_GPIO_Init+0x8a>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80017f8:	4824      	ldr	r0, [pc, #144]	@ (800188c <HAL_GPIO_Init+0x2fc>)
 80017fa:	21b4      	movs	r1, #180	@ 0xb4
 80017fc:	f002 fefe 	bl	80045fc <assert_failed>
 8001800:	e70b      	b.n	800161a <HAL_GPIO_Init+0x8a>
 8001802:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8001806:	f43f af08 	beq.w	800161a <HAL_GPIO_Init+0x8a>
 800180a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800180e:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8001812:	f43f af02 	beq.w	800161a <HAL_GPIO_Init+0x8a>
 8001816:	481d      	ldr	r0, [pc, #116]	@ (800188c <HAL_GPIO_Init+0x2fc>)
 8001818:	21b4      	movs	r1, #180	@ 0xb4
 800181a:	f002 feef 	bl	80045fc <assert_failed>
 800181e:	e6fc      	b.n	800161a <HAL_GPIO_Init+0x8a>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001820:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8001824:	2a01      	cmp	r2, #1
 8001826:	d90c      	bls.n	8001842 <HAL_GPIO_Init+0x2b2>
 8001828:	2a03      	cmp	r2, #3
 800182a:	d00a      	beq.n	8001842 <HAL_GPIO_Init+0x2b2>
 800182c:	4817      	ldr	r0, [pc, #92]	@ (800188c <HAL_GPIO_Init+0x2fc>)
 800182e:	21c3      	movs	r1, #195	@ 0xc3
 8001830:	f002 fee4 	bl	80045fc <assert_failed>
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001834:	f8d8 0004 	ldr.w	r0, [r8, #4]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001838:	f8d8 200c 	ldr.w	r2, [r8, #12]
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183c:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <HAL_GPIO_Init+0x300>)
 800183e:	f000 0103 	and.w	r1, r0, #3
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001842:	fa02 fc0a 	lsl.w	ip, r2, sl
        temp = GPIOx->OSPEEDR;
 8001846:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001848:	ea02 0e07 	and.w	lr, r2, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800184c:	ea4c 020e 	orr.w	r2, ip, lr
        GPIOx->OSPEEDR = temp;
 8001850:	60b2      	str	r2, [r6, #8]
        temp = GPIOx->OTYPER;
 8001852:	6872      	ldr	r2, [r6, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001854:	ea22 0c05 	bic.w	ip, r2, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001858:	f3c0 1500 	ubfx	r5, r0, #4, #1
 800185c:	40a5      	lsls	r5, r4
 800185e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->OTYPER = temp;
 8001862:	6075      	str	r5, [r6, #4]
 8001864:	e6f9      	b.n	800165a <HAL_GPIO_Init+0xca>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001866:	4809      	ldr	r0, [pc, #36]	@ (800188c <HAL_GPIO_Init+0x2fc>)
 8001868:	21d4      	movs	r1, #212	@ 0xd4
 800186a:	f002 fec7 	bl	80045fc <assert_failed>
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800186e:	e9d8 0501 	ldrd	r0, r5, [r8, #4]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001872:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <HAL_GPIO_Init+0x300>)
 8001874:	f000 0103 	and.w	r1, r0, #3
 8001878:	e6f6      	b.n	8001668 <HAL_GPIO_Init+0xd8>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800187a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800187e:	2b01      	cmp	r3, #1
 8001880:	f63f aebd 	bhi.w	80015fe <HAL_GPIO_Init+0x6e>
 8001884:	e6ce      	b.n	8001624 <HAL_GPIO_Init+0x94>
 8001886:	bf00      	nop
 8001888:	48000400 	.word	0x48000400
 800188c:	080053dc 	.word	0x080053dc
 8001890:	40021000 	.word	0x40021000
 8001894:	48000800 	.word	0x48000800
 8001898:	48000c00 	.word	0x48000c00
 800189c:	48001000 	.word	0x48001000
 80018a0:	48001400 	.word	0x48001400
 80018a4:	48001800 	.word	0x48001800
 80018a8:	40010400 	.word	0x40010400
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018ac:	2703      	movs	r7, #3
 80018ae:	fa07 f70c 	lsl.w	r7, r7, ip
 80018b2:	433d      	orrs	r5, r7
 80018b4:	e768      	b.n	8001788 <HAL_GPIO_Init+0x1f8>
 80018b6:	2701      	movs	r7, #1
 80018b8:	fa07 f70c 	lsl.w	r7, r7, ip
 80018bc:	433d      	orrs	r5, r7
 80018be:	e763      	b.n	8001788 <HAL_GPIO_Init+0x1f8>
 80018c0:	2702      	movs	r7, #2
 80018c2:	fa07 f70c 	lsl.w	r7, r7, ip
 80018c6:	433d      	orrs	r5, r7
 80018c8:	e75e      	b.n	8001788 <HAL_GPIO_Init+0x1f8>
 80018ca:	2704      	movs	r7, #4
 80018cc:	fa07 f70c 	lsl.w	r7, r7, ip
 80018d0:	433d      	orrs	r5, r7
 80018d2:	e759      	b.n	8001788 <HAL_GPIO_Init+0x1f8>
 80018d4:	2705      	movs	r7, #5
 80018d6:	fa07 f70c 	lsl.w	r7, r7, ip
 80018da:	433d      	orrs	r5, r7
 80018dc:	e754      	b.n	8001788 <HAL_GPIO_Init+0x1f8>
 80018de:	bf00      	nop

080018e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e0:	b570      	push	{r4, r5, r6, lr}
 80018e2:	4606      	mov	r6, r0
 80018e4:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80018e6:	460c      	mov	r4, r1
 80018e8:	b159      	cbz	r1, 8001902 <HAL_GPIO_WritePin+0x22>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80018ea:	2d01      	cmp	r5, #1
 80018ec:	d802      	bhi.n	80018f4 <HAL_GPIO_WritePin+0x14>

  if(PinState != GPIO_PIN_RESET)
 80018ee:	b935      	cbnz	r5, 80018fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018f0:	62b4      	str	r4, [r6, #40]	@ 0x28
  }
}
 80018f2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80018f4:	4806      	ldr	r0, [pc, #24]	@ (8001910 <HAL_GPIO_WritePin+0x30>)
 80018f6:	f240 11a5 	movw	r1, #421	@ 0x1a5
 80018fa:	f002 fe7f 	bl	80045fc <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018fe:	61b4      	str	r4, [r6, #24]
}
 8001900:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001902:	4803      	ldr	r0, [pc, #12]	@ (8001910 <HAL_GPIO_WritePin+0x30>)
 8001904:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8001908:	f002 fe78 	bl	80045fc <assert_failed>
 800190c:	e7ed      	b.n	80018ea <HAL_GPIO_WritePin+0xa>
 800190e:	bf00      	nop
 8001910:	080053dc 	.word	0x080053dc

08001914 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8001914:	2800      	cmp	r0, #0
 8001916:	f000 80cd 	beq.w	8001ab4 <HAL_OPAMP_Init+0x1a0>
{
 800191a:	b510      	push	{r4, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800191c:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 8001920:	2b05      	cmp	r3, #5
{
 8001922:	b082      	sub	sp, #8
 8001924:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8001926:	f000 809a 	beq.w	8001a5e <HAL_OPAMP_Init+0x14a>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800192a:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 800192e:	2b02      	cmp	r3, #2
 8001930:	f000 8095 	beq.w	8001a5e <HAL_OPAMP_Init+0x14a>
  }
  else
  {

    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));
 8001934:	6803      	ldr	r3, [r0, #0]
 8001936:	4a72      	ldr	r2, [pc, #456]	@ (8001b00 <HAL_OPAMP_Init+0x1ec>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00d      	beq.n	8001958 <HAL_OPAMP_Init+0x44>
 800193c:	3204      	adds	r2, #4
 800193e:	4293      	cmp	r3, r2
 8001940:	d00a      	beq.n	8001958 <HAL_OPAMP_Init+0x44>
 8001942:	3204      	adds	r2, #4
 8001944:	4293      	cmp	r3, r2
 8001946:	d007      	beq.n	8001958 <HAL_OPAMP_Init+0x44>
 8001948:	3204      	adds	r2, #4
 800194a:	4293      	cmp	r3, r2
 800194c:	d004      	beq.n	8001958 <HAL_OPAMP_Init+0x44>
 800194e:	486d      	ldr	r0, [pc, #436]	@ (8001b04 <HAL_OPAMP_Init+0x1f0>)
 8001950:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001954:	f002 fe52 	bl	80045fc <assert_failed>

    /* Set OPAMP parameters */
    assert_param(IS_OPAMP_FUNCTIONAL_NORMALMODE(hopamp->Init.Mode));
 8001958:	6863      	ldr	r3, [r4, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 8082 	beq.w	8001a64 <HAL_OPAMP_Init+0x150>
 8001960:	f023 0320 	bic.w	r3, r3, #32
 8001964:	2b40      	cmp	r3, #64	@ 0x40
 8001966:	f000 80a0 	beq.w	8001aaa <HAL_OPAMP_Init+0x196>
 800196a:	4866      	ldr	r0, [pc, #408]	@ (8001b04 <HAL_OPAMP_Init+0x1f0>)
 800196c:	f240 110d 	movw	r1, #269	@ 0x10d
 8001970:	f002 fe44 	bl	80045fc <assert_failed>
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));
 8001974:	68e3      	ldr	r3, [r4, #12]
 8001976:	2b0c      	cmp	r3, #12
 8001978:	d009      	beq.n	800198e <HAL_OPAMP_Init+0x7a>
 800197a:	f033 0204 	bics.w	r2, r3, #4
 800197e:	d006      	beq.n	800198e <HAL_OPAMP_Init+0x7a>
 8001980:	2b08      	cmp	r3, #8
 8001982:	d004      	beq.n	800198e <HAL_OPAMP_Init+0x7a>
 8001984:	485f      	ldr	r0, [pc, #380]	@ (8001b04 <HAL_OPAMP_Init+0x1f0>)
 8001986:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800198a:	f002 fe37 	bl	80045fc <assert_failed>
        hopamp->MspInitCallback = HAL_OPAMP_MspInit;
      }
    }
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    if ((hopamp->Init.Mode) == OPAMP_STANDALONE_MODE)
 800198e:	6863      	ldr	r3, [r4, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d06a      	beq.n	8001a6a <HAL_OPAMP_Init+0x156>
    {
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));
 8001994:	6923      	ldr	r3, [r4, #16]
 8001996:	b1ab      	cbz	r3, 80019c4 <HAL_OPAMP_Init+0xb0>
 8001998:	2b80      	cmp	r3, #128	@ 0x80
 800199a:	d173      	bne.n	8001a84 <HAL_OPAMP_Init+0x170>

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
    {
      assert_param(IS_OPAMP_SEC_NONINVERTINGINPUT(hopamp->Init.NonInvertingInputSecondary));
 800199c:	69a3      	ldr	r3, [r4, #24]
 800199e:	f433 63c0 	bics.w	r3, r3, #1536	@ 0x600
 80019a2:	d004      	beq.n	80019ae <HAL_OPAMP_Init+0x9a>
 80019a4:	4857      	ldr	r0, [pc, #348]	@ (8001b04 <HAL_OPAMP_Init+0x1f0>)
 80019a6:	f240 1123 	movw	r1, #291	@ 0x123
 80019aa:	f002 fe27 	bl	80045fc <assert_failed>
      if ((hopamp->Init.Mode) == OPAMP_STANDALONE_MODE)
 80019ae:	6863      	ldr	r3, [r4, #4]
 80019b0:	b94b      	cbnz	r3, 80019c6 <HAL_OPAMP_Init+0xb2>
      {
        assert_param(IS_OPAMP_SEC_INVERTINGINPUT(hopamp->Init.InvertingInputSecondary));
 80019b2:	6963      	ldr	r3, [r4, #20]
 80019b4:	f433 7380 	bics.w	r3, r3, #256	@ 0x100
 80019b8:	d007      	beq.n	80019ca <HAL_OPAMP_Init+0xb6>
 80019ba:	4852      	ldr	r0, [pc, #328]	@ (8001b04 <HAL_OPAMP_Init+0x1f0>)
 80019bc:	f44f 7193 	mov.w	r1, #294	@ 0x126
 80019c0:	f002 fe1c 	bl	80045fc <assert_failed>
      }
    }

    if ((hopamp->Init.Mode) == OPAMP_PGA_MODE)
 80019c4:	6863      	ldr	r3, [r4, #4]
 80019c6:	2b40      	cmp	r3, #64	@ 0x40
 80019c8:	d076      	beq.n	8001ab8 <HAL_OPAMP_Init+0x1a4>
    {
      assert_param(IS_OPAMP_PGACONNECT(hopamp->Init.PgaConnect));
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
 80019ca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80019cc:	b14b      	cbz	r3, 80019e2 <HAL_OPAMP_Init+0xce>
 80019ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80019d2:	d160      	bne.n	8001a96 <HAL_OPAMP_Init+0x182>
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
    {
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
 80019d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80019d6:	2b1f      	cmp	r3, #31
 80019d8:	f200 808c 	bhi.w	8001af4 <HAL_OPAMP_Init+0x1e0>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
 80019dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80019de:	2b1f      	cmp	r3, #31
 80019e0:	d87c      	bhi.n	8001adc <HAL_OPAMP_Init+0x1c8>
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	4b49      	ldr	r3, [pc, #292]	@ (8001b08 <HAL_OPAMP_Init+0x1f4>)
 80019e4:	699a      	ldr	r2, [r3, #24]
 80019e6:	f042 0201 	orr.w	r2, r2, #1
 80019ea:	619a      	str	r2, [r3, #24]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80019f6:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 80019fa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80019fe:	b90b      	cbnz	r3, 8001a04 <HAL_OPAMP_Init+0xf0>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8001a00:	f884 2031 	strb.w	r2, [r4, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8001a04:	4620      	mov	r0, r4
 8001a06:	f002 fefb 	bl	8004800 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8001a0a:	6863      	ldr	r3, [r4, #4]
 8001a0c:	f023 0220 	bic.w	r2, r3, #32
 8001a10:	2a40      	cmp	r2, #64	@ 0x40
 8001a12:	d034      	beq.n	8001a7e <HAL_OPAMP_Init+0x16a>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8001a14:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	6920      	ldr	r0, [r4, #16]
 8001a1e:	6962      	ldr	r2, [r4, #20]
 8001a20:	69a1      	ldr	r1, [r4, #24]
 8001a22:	4303      	orrs	r3, r0
 8001a24:	4313      	orrs	r3, r2
 8001a26:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8001a2a:	430b      	orrs	r3, r1
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001a30:	6821      	ldr	r1, [r4, #0]
 8001a32:	4303      	orrs	r3, r0
 8001a34:	4313      	orrs	r3, r2
 8001a36:	e9d4 020a 	ldrd	r0, r2, [r4, #40]	@ 0x28
 8001a3a:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8001a3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a42:	6808      	ldr	r0, [r1, #0]
 8001a44:	4a31      	ldr	r2, [pc, #196]	@ (8001b0c <HAL_OPAMP_Init+0x1f8>)
 8001a46:	4002      	ands	r2, r0
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8001a4c:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 8001a50:	b913      	cbnz	r3, 8001a58 <HAL_OPAMP_Init+0x144>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8001a52:	2301      	movs	r3, #1
 8001a54:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8001a58:	2000      	movs	r0, #0
  }
}
 8001a5a:	b002      	add	sp, #8
 8001a5c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a5e:	2001      	movs	r0, #1
}
 8001a60:	b002      	add	sp, #8
 8001a62:	bd10      	pop	{r4, pc}
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));
 8001a64:	68e3      	ldr	r3, [r4, #12]
 8001a66:	2b0c      	cmp	r3, #12
 8001a68:	d187      	bne.n	800197a <HAL_OPAMP_Init+0x66>
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
 8001a6a:	68a3      	ldr	r3, [r4, #8]
 8001a6c:	f033 0320 	bics.w	r3, r3, #32
 8001a70:	d090      	beq.n	8001994 <HAL_OPAMP_Init+0x80>
 8001a72:	4824      	ldr	r0, [pc, #144]	@ (8001b04 <HAL_OPAMP_Init+0x1f0>)
 8001a74:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8001a78:	f002 fdc0 	bl	80045fc <assert_failed>
 8001a7c:	e78a      	b.n	8001994 <HAL_OPAMP_Init+0x80>
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8001a7e:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8001a82:	e7cd      	b.n	8001a20 <HAL_OPAMP_Init+0x10c>
    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));
 8001a84:	481f      	ldr	r0, [pc, #124]	@ (8001b04 <HAL_OPAMP_Init+0x1f0>)
 8001a86:	f240 111f 	movw	r1, #287	@ 0x11f
 8001a8a:	f002 fdb7 	bl	80045fc <assert_failed>
    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 8001a8e:	6923      	ldr	r3, [r4, #16]
 8001a90:	2b80      	cmp	r3, #128	@ 0x80
 8001a92:	d197      	bne.n	80019c4 <HAL_OPAMP_Init+0xb0>
 8001a94:	e782      	b.n	800199c <HAL_OPAMP_Init+0x88>
    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
 8001a96:	481b      	ldr	r0, [pc, #108]	@ (8001b04 <HAL_OPAMP_Init+0x1f0>)
 8001a98:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8001a9c:	f002 fdae 	bl	80045fc <assert_failed>
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8001aa0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001aa2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001aa6:	d19c      	bne.n	80019e2 <HAL_OPAMP_Init+0xce>
 8001aa8:	e794      	b.n	80019d4 <HAL_OPAMP_Init+0xc0>
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));
 8001aaa:	68e3      	ldr	r3, [r4, #12]
 8001aac:	2b0c      	cmp	r3, #12
 8001aae:	f47f af64 	bne.w	800197a <HAL_OPAMP_Init+0x66>
 8001ab2:	e76f      	b.n	8001994 <HAL_OPAMP_Init+0x80>
    return HAL_ERROR;
 8001ab4:	2001      	movs	r0, #1
}
 8001ab6:	4770      	bx	lr
      assert_param(IS_OPAMP_PGACONNECT(hopamp->Init.PgaConnect));
 8001ab8:	69e3      	ldr	r3, [r4, #28]
 8001aba:	f433 3200 	bics.w	r2, r3, #131072	@ 0x20000
 8001abe:	d002      	beq.n	8001ac6 <HAL_OPAMP_Init+0x1b2>
 8001ac0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001ac4:	d110      	bne.n	8001ae8 <HAL_OPAMP_Init+0x1d4>
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
 8001ac6:	6a23      	ldr	r3, [r4, #32]
 8001ac8:	f433 4340 	bics.w	r3, r3, #49152	@ 0xc000
 8001acc:	f43f af7d 	beq.w	80019ca <HAL_OPAMP_Init+0xb6>
 8001ad0:	480c      	ldr	r0, [pc, #48]	@ (8001b04 <HAL_OPAMP_Init+0x1f0>)
 8001ad2:	f240 112d 	movw	r1, #301	@ 0x12d
 8001ad6:	f002 fd91 	bl	80045fc <assert_failed>
 8001ada:	e776      	b.n	80019ca <HAL_OPAMP_Init+0xb6>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
 8001adc:	4809      	ldr	r0, [pc, #36]	@ (8001b04 <HAL_OPAMP_Init+0x1f0>)
 8001ade:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8001ae2:	f002 fd8b 	bl	80045fc <assert_failed>
 8001ae6:	e77c      	b.n	80019e2 <HAL_OPAMP_Init+0xce>
      assert_param(IS_OPAMP_PGACONNECT(hopamp->Init.PgaConnect));
 8001ae8:	4806      	ldr	r0, [pc, #24]	@ (8001b04 <HAL_OPAMP_Init+0x1f0>)
 8001aea:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001aee:	f002 fd85 	bl	80045fc <assert_failed>
 8001af2:	e7e8      	b.n	8001ac6 <HAL_OPAMP_Init+0x1b2>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
 8001af4:	4803      	ldr	r0, [pc, #12]	@ (8001b04 <HAL_OPAMP_Init+0x1f0>)
 8001af6:	f240 1133 	movw	r1, #307	@ 0x133
 8001afa:	f002 fd7f 	bl	80045fc <assert_failed>
 8001afe:	e76d      	b.n	80019dc <HAL_OPAMP_Init+0xc8>
 8001b00:	40010038 	.word	0x40010038
 8001b04:	08005418 	.word	0x08005418
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	e0003811 	.word	0xe0003811

08001b10 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b10:	2800      	cmp	r0, #0
 8001b12:	f000 834c 	beq.w	80021ae <HAL_RCC_OscConfig+0x69e>
{
 8001b16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001b1a:	6803      	ldr	r3, [r0, #0]
{
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 811d 	beq.w	8001d60 <HAL_RCC_OscConfig+0x250>
 8001b26:	071a      	lsls	r2, r3, #28
 8001b28:	f000 8265 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x4e6>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2c:	07df      	lsls	r7, r3, #31
 8001b2e:	d543      	bpl.n	8001bb8 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001b30:	6863      	ldr	r3, [r4, #4]
 8001b32:	f433 3280 	bics.w	r2, r3, #65536	@ 0x10000
 8001b36:	d003      	beq.n	8001b40 <HAL_RCC_OscConfig+0x30>
 8001b38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b3c:	f040 8232 	bne.w	8001fa4 <HAL_RCC_OscConfig+0x494>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b40:	4aae      	ldr	r2, [pc, #696]	@ (8001dfc <HAL_RCC_OscConfig+0x2ec>)
 8001b42:	6853      	ldr	r3, [r2, #4]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	f000 8210 	beq.w	8001f6e <HAL_RCC_OscConfig+0x45e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b4e:	6853      	ldr	r3, [r2, #4]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	f000 8203 	beq.w	8001f60 <HAL_RCC_OscConfig+0x450>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5a:	6863      	ldr	r3, [r4, #4]
 8001b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b60:	f000 821a 	beq.w	8001f98 <HAL_RCC_OscConfig+0x488>
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 824d 	beq.w	8002004 <HAL_RCC_OscConfig+0x4f4>
 8001b6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b6e:	f000 8311 	beq.w	8002194 <HAL_RCC_OscConfig+0x684>
 8001b72:	4ba2      	ldr	r3, [pc, #648]	@ (8001dfc <HAL_RCC_OscConfig+0x2ec>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b82:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7fe fb94 	bl	80002b0 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b88:	4f9c      	ldr	r7, [pc, #624]	@ (8001dfc <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 8001b8a:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f44f 3800 	mov.w	r8, #131072	@ 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b90:	2601      	movs	r6, #1
 8001b92:	e005      	b.n	8001ba0 <HAL_RCC_OscConfig+0x90>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b94:	f7fe fb8c 	bl	80002b0 <HAL_GetTick>
 8001b98:	1b40      	subs	r0, r0, r5
 8001b9a:	2864      	cmp	r0, #100	@ 0x64
 8001b9c:	f200 8227 	bhi.w	8001fee <HAL_RCC_OscConfig+0x4de>
 8001ba0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	fa98 f3a8 	rbit	r3, r8
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	fa06 f303 	lsl.w	r3, r6, r3
 8001bb2:	4213      	tst	r3, r2
 8001bb4:	d0ee      	beq.n	8001b94 <HAL_RCC_OscConfig+0x84>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	079e      	lsls	r6, r3, #30
 8001bba:	d547      	bpl.n	8001c4c <HAL_RCC_OscConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001bbc:	68e3      	ldr	r3, [r4, #12]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	f200 8186 	bhi.w	8001ed0 <HAL_RCC_OscConfig+0x3c0>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001bc4:	6923      	ldr	r3, [r4, #16]
 8001bc6:	2b1f      	cmp	r3, #31
 8001bc8:	f200 818b 	bhi.w	8001ee2 <HAL_RCC_OscConfig+0x3d2>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bcc:	4b8b      	ldr	r3, [pc, #556]	@ (8001dfc <HAL_RCC_OscConfig+0x2ec>)
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	f012 0f0c 	tst.w	r2, #12
 8001bd4:	f000 8169 	beq.w	8001eaa <HAL_RCC_OscConfig+0x39a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	f002 020c 	and.w	r2, r2, #12
 8001bde:	2a08      	cmp	r2, #8
 8001be0:	f000 815c 	beq.w	8001e9c <HAL_RCC_OscConfig+0x38c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be4:	68e2      	ldr	r2, [r4, #12]
 8001be6:	2a00      	cmp	r2, #0
 8001be8:	f000 8258 	beq.w	800209c <HAL_RCC_OscConfig+0x58c>
 8001bec:	2501      	movs	r5, #1
 8001bee:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bfa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bfe:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c00:	4f7e      	ldr	r7, [pc, #504]	@ (8001dfc <HAL_RCC_OscConfig+0x2ec>)
        __HAL_RCC_HSI_ENABLE();
 8001c02:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001c04:	f7fe fb54 	bl	80002b0 <HAL_GetTick>
 8001c08:	f04f 0802 	mov.w	r8, #2
 8001c0c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0e:	e005      	b.n	8001c1c <HAL_RCC_OscConfig+0x10c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c10:	f7fe fb4e 	bl	80002b0 <HAL_GetTick>
 8001c14:	1b80      	subs	r0, r0, r6
 8001c16:	2802      	cmp	r0, #2
 8001c18:	f200 81e9 	bhi.w	8001fee <HAL_RCC_OscConfig+0x4de>
 8001c1c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	fa98 f3a8 	rbit	r3, r8
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	fa05 f303 	lsl.w	r3, r5, r3
 8001c2e:	4213      	tst	r3, r2
 8001c30:	d0ee      	beq.n	8001c10 <HAL_RCC_OscConfig+0x100>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c32:	6839      	ldr	r1, [r7, #0]
 8001c34:	22f8      	movs	r2, #248	@ 0xf8
 8001c36:	fa92 f2a2 	rbit	r2, r2
 8001c3a:	6923      	ldr	r3, [r4, #16]
 8001c3c:	fab2 f282 	clz	r2, r2
 8001c40:	4093      	lsls	r3, r2
 8001c42:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 8001c46:	4313      	orrs	r3, r2
 8001c48:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	071d      	lsls	r5, r3, #28
 8001c4e:	d52d      	bpl.n	8001cac <HAL_RCC_OscConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001c50:	6963      	ldr	r3, [r4, #20]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	f200 8171 	bhi.w	8001f3a <HAL_RCC_OscConfig+0x42a>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 8148 	beq.w	8001eee <HAL_RCC_OscConfig+0x3de>
 8001c5e:	2601      	movs	r6, #1
 8001c60:	fa96 f2a6 	rbit	r2, r6
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c64:	4b66      	ldr	r3, [pc, #408]	@ (8001e00 <HAL_RCC_OscConfig+0x2f0>)
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	f8df 8194 	ldr.w	r8, [pc, #404]	@ 8001dfc <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	fab2 f282 	clz	r2, r2
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	2502      	movs	r5, #2
 8001c74:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
 8001c76:	f7fe fb1b 	bl	80002b0 <HAL_GetTick>
 8001c7a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7c:	e005      	b.n	8001c8a <HAL_RCC_OscConfig+0x17a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c7e:	f7fe fb17 	bl	80002b0 <HAL_GetTick>
 8001c82:	1bc0      	subs	r0, r0, r7
 8001c84:	2802      	cmp	r0, #2
 8001c86:	f200 81b2 	bhi.w	8001fee <HAL_RCC_OscConfig+0x4de>
 8001c8a:	fa95 f3a5 	rbit	r3, r5
 8001c8e:	fa95 f3a5 	rbit	r3, r5
 8001c92:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c96:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8001c9a:	fa95 f3a5 	rbit	r3, r5
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	fa06 f303 	lsl.w	r3, r6, r3
 8001ca6:	4213      	tst	r3, r2
 8001ca8:	d0e9      	beq.n	8001c7e <HAL_RCC_OscConfig+0x16e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	0758      	lsls	r0, r3, #29
 8001cae:	d557      	bpl.n	8001d60 <HAL_RCC_OscConfig+0x250>
  {
    FlagStatus       pwrclkchanged = RESET;
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001cb0:	68a3      	ldr	r3, [r4, #8]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d906      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x1b4>
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	d004      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x1b4>
 8001cba:	4852      	ldr	r0, [pc, #328]	@ (8001e04 <HAL_RCC_OscConfig+0x2f4>)
 8001cbc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001cc0:	f002 fc9c 	bl	80045fc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc4:	4b4d      	ldr	r3, [pc, #308]	@ (8001dfc <HAL_RCC_OscConfig+0x2ec>)
 8001cc6:	69da      	ldr	r2, [r3, #28]
 8001cc8:	00d1      	lsls	r1, r2, #3
 8001cca:	f100 81bc 	bmi.w	8002046 <HAL_RCC_OscConfig+0x536>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001cd4:	61da      	str	r2, [r3, #28]
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ce0:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce2:	4e49      	ldr	r6, [pc, #292]	@ (8001e08 <HAL_RCC_OscConfig+0x2f8>)
 8001ce4:	6833      	ldr	r3, [r6, #0]
 8001ce6:	05da      	lsls	r2, r3, #23
 8001ce8:	f140 8171 	bpl.w	8001fce <HAL_RCC_OscConfig+0x4be>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cec:	68a3      	ldr	r3, [r4, #8]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d00f      	beq.n	8001d12 <HAL_RCC_OscConfig+0x202>
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 81a9 	beq.w	800204a <HAL_RCC_OscConfig+0x53a>
 8001cf8:	2b05      	cmp	r3, #5
 8001cfa:	4b40      	ldr	r3, [pc, #256]	@ (8001dfc <HAL_RCC_OscConfig+0x2ec>)
 8001cfc:	6a1a      	ldr	r2, [r3, #32]
 8001cfe:	f000 820f 	beq.w	8002120 <HAL_RCC_OscConfig+0x610>
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	621a      	str	r2, [r3, #32]
 8001d08:	6a1a      	ldr	r2, [r3, #32]
 8001d0a:	f022 0204 	bic.w	r2, r2, #4
 8001d0e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d10:	e004      	b.n	8001d1c <HAL_RCC_OscConfig+0x20c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d12:	4a3a      	ldr	r2, [pc, #232]	@ (8001dfc <HAL_RCC_OscConfig+0x2ec>)
 8001d14:	6a13      	ldr	r3, [r2, #32]
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6213      	str	r3, [r2, #32]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1c:	f7fe fac8 	bl	80002b0 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d20:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8001dfc <HAL_RCC_OscConfig+0x2ec>
      tickstart = HAL_GetTick();
 8001d24:	4606      	mov	r6, r0
 8001d26:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2a:	2701      	movs	r7, #1
 8001d2c:	e007      	b.n	8001d3e <HAL_RCC_OscConfig+0x22e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7fe fabf 	bl	80002b0 <HAL_GetTick>
 8001d32:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001d36:	1b80      	subs	r0, r0, r6
 8001d38:	4298      	cmp	r0, r3
 8001d3a:	f200 8158 	bhi.w	8001fee <HAL_RCC_OscConfig+0x4de>
 8001d3e:	fa99 f3a9 	rbit	r3, r9
 8001d42:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d46:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8001d4a:	fa99 f3a9 	rbit	r3, r9
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	fa07 f303 	lsl.w	r3, r7, r3
 8001d56:	4213      	tst	r3, r2
 8001d58:	d0e9      	beq.n	8001d2e <HAL_RCC_OscConfig+0x21e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d5a:	2d00      	cmp	r5, #0
 8001d5c:	f040 81da 	bne.w	8002114 <HAL_RCC_OscConfig+0x604>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001d60:	69a3      	ldr	r3, [r4, #24]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	f200 80f2 	bhi.w	8001f4c <HAL_RCC_OscConfig+0x43c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8093 	beq.w	8001e94 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d6e:	4d23      	ldr	r5, [pc, #140]	@ (8001dfc <HAL_RCC_OscConfig+0x2ec>)
 8001d70:	686a      	ldr	r2, [r5, #4]
 8001d72:	f002 020c 	and.w	r2, r2, #12
 8001d76:	2a08      	cmp	r2, #8
 8001d78:	f000 81b4 	beq.w	80020e4 <HAL_RCC_OscConfig+0x5d4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	f040 81e3 	bne.w	8002148 <HAL_RCC_OscConfig+0x638>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001d82:	69e3      	ldr	r3, [r4, #28]
 8001d84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d88:	d007      	beq.n	8001d9a <HAL_RCC_OscConfig+0x28a>
 8001d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d8e:	d004      	beq.n	8001d9a <HAL_RCC_OscConfig+0x28a>
 8001d90:	481c      	ldr	r0, [pc, #112]	@ (8001e04 <HAL_RCC_OscConfig+0x2f4>)
 8001d92:	f240 2141 	movw	r1, #577	@ 0x241
 8001d96:	f002 fc31 	bl	80045fc <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001d9a:	6a23      	ldr	r3, [r4, #32]
 8001d9c:	f433 2240 	bics.w	r2, r3, #786432	@ 0xc0000
 8001da0:	d012      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x2b8>
 8001da2:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8001da6:	d00f      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x2b8>
 8001da8:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8001dac:	d00c      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x2b8>
 8001dae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8001db2:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 8001db6:	d007      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x2b8>
 8001db8:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8001dbc:	d004      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x2b8>
 8001dbe:	4811      	ldr	r0, [pc, #68]	@ (8001e04 <HAL_RCC_OscConfig+0x2f4>)
 8001dc0:	f240 2142 	movw	r1, #578	@ 0x242
 8001dc4:	f002 fc1a 	bl	80045fc <assert_failed>
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8001dc8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001dca:	2b0f      	cmp	r3, #15
 8001dcc:	f200 81b0 	bhi.w	8002130 <HAL_RCC_OscConfig+0x620>
 8001dd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dd4:	fa93 f3a3 	rbit	r3, r3
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001de0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7fe fa61 	bl	80002b0 <HAL_GetTick>
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dee:	4d03      	ldr	r5, [pc, #12]	@ (8001dfc <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 8001df0:	4606      	mov	r6, r0
 8001df2:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df6:	2701      	movs	r7, #1
 8001df8:	e00e      	b.n	8001e18 <HAL_RCC_OscConfig+0x308>
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	10908120 	.word	0x10908120
 8001e04:	08005454 	.word	0x08005454
 8001e08:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe fa50 	bl	80002b0 <HAL_GetTick>
 8001e10:	1b80      	subs	r0, r0, r6
 8001e12:	2802      	cmp	r0, #2
 8001e14:	f200 80eb 	bhi.w	8001fee <HAL_RCC_OscConfig+0x4de>
 8001e18:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1c:	682a      	ldr	r2, [r5, #0]
 8001e1e:	fa98 f3a8 	rbit	r3, r8
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	fa07 f303 	lsl.w	r3, r7, r3
 8001e2a:	4213      	tst	r3, r2
 8001e2c:	d1ee      	bne.n	8001e0c <HAL_RCC_OscConfig+0x2fc>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8001e30:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001e32:	f023 030f 	bic.w	r3, r3, #15
 8001e36:	4313      	orrs	r3, r2
 8001e38:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8001e3a:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8001e3e:	686a      	ldr	r2, [r5, #4]
 8001e40:	430b      	orrs	r3, r1
 8001e42:	f422 1276 	bic.w	r2, r2, #4030464	@ 0x3d8000
 8001e46:	4313      	orrs	r3, r2
 8001e48:	606b      	str	r3, [r5, #4]
 8001e4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e4e:	fa93 f3a3 	rbit	r3, r3
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e5a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e5e:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e60:	4db6      	ldr	r5, [pc, #728]	@ (800213c <HAL_RCC_OscConfig+0x62c>)
        __HAL_RCC_PLL_ENABLE();
 8001e62:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8001e64:	f7fe fa24 	bl	80002b0 <HAL_GetTick>
 8001e68:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
 8001e6c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e6e:	2601      	movs	r6, #1
 8001e70:	e005      	b.n	8001e7e <HAL_RCC_OscConfig+0x36e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e72:	f7fe fa1d 	bl	80002b0 <HAL_GetTick>
 8001e76:	1b00      	subs	r0, r0, r4
 8001e78:	2802      	cmp	r0, #2
 8001e7a:	f200 80b8 	bhi.w	8001fee <HAL_RCC_OscConfig+0x4de>
 8001e7e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e82:	682a      	ldr	r2, [r5, #0]
 8001e84:	fa97 f3a7 	rbit	r3, r7
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	fa06 f303 	lsl.w	r3, r6, r3
 8001e90:	4213      	tst	r3, r2
 8001e92:	d0ee      	beq.n	8001e72 <HAL_RCC_OscConfig+0x362>
        }
      }
    }
  }

  return HAL_OK;
 8001e94:	2000      	movs	r0, #0
}
 8001e96:	b003      	add	sp, #12
 8001e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001ea2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ea6:	f47f ae9d 	bne.w	8001be4 <HAL_RCC_OscConfig+0xd4>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb0:	4aa2      	ldr	r2, [pc, #648]	@ (800213c <HAL_RCC_OscConfig+0x62c>)
 8001eb2:	6811      	ldr	r1, [r2, #0]
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	2201      	movs	r2, #1
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	420b      	tst	r3, r1
 8001ec4:	d074      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x4a0>
 8001ec6:	68e3      	ldr	r3, [r4, #12]
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d071      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x4a0>
    return HAL_ERROR;
 8001ecc:	2001      	movs	r0, #1
 8001ece:	e7e2      	b.n	8001e96 <HAL_RCC_OscConfig+0x386>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001ed0:	489b      	ldr	r0, [pc, #620]	@ (8002140 <HAL_RCC_OscConfig+0x630>)
 8001ed2:	f240 1187 	movw	r1, #391	@ 0x187
 8001ed6:	f002 fb91 	bl	80045fc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001eda:	6923      	ldr	r3, [r4, #16]
 8001edc:	2b1f      	cmp	r3, #31
 8001ede:	f67f ae75 	bls.w	8001bcc <HAL_RCC_OscConfig+0xbc>
 8001ee2:	4897      	ldr	r0, [pc, #604]	@ (8002140 <HAL_RCC_OscConfig+0x630>)
 8001ee4:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001ee8:	f002 fb88 	bl	80045fc <assert_failed>
 8001eec:	e66e      	b.n	8001bcc <HAL_RCC_OscConfig+0xbc>
 8001eee:	2701      	movs	r7, #1
 8001ef0:	fa97 f1a7 	rbit	r1, r7
      __HAL_RCC_LSI_DISABLE();
 8001ef4:	4a93      	ldr	r2, [pc, #588]	@ (8002144 <HAL_RCC_OscConfig+0x634>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef6:	f8df 8244 	ldr.w	r8, [pc, #580]	@ 800213c <HAL_RCC_OscConfig+0x62c>
      __HAL_RCC_LSI_DISABLE();
 8001efa:	fab1 f181 	clz	r1, r1
 8001efe:	440a      	add	r2, r1
 8001f00:	0092      	lsls	r2, r2, #2
 8001f02:	2502      	movs	r5, #2
 8001f04:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f06:	f7fe f9d3 	bl	80002b0 <HAL_GetTick>
 8001f0a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0c:	e004      	b.n	8001f18 <HAL_RCC_OscConfig+0x408>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f0e:	f7fe f9cf 	bl	80002b0 <HAL_GetTick>
 8001f12:	1b80      	subs	r0, r0, r6
 8001f14:	2802      	cmp	r0, #2
 8001f16:	d86a      	bhi.n	8001fee <HAL_RCC_OscConfig+0x4de>
 8001f18:	fa95 f3a5 	rbit	r3, r5
 8001f1c:	fa95 f3a5 	rbit	r3, r5
 8001f20:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8001f28:	fa95 f3a5 	rbit	r3, r5
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	fa07 f303 	lsl.w	r3, r7, r3
 8001f34:	4213      	tst	r3, r2
 8001f36:	d1ea      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3fe>
 8001f38:	e6b7      	b.n	8001caa <HAL_RCC_OscConfig+0x19a>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001f3a:	4881      	ldr	r0, [pc, #516]	@ (8002140 <HAL_RCC_OscConfig+0x630>)
 8001f3c:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 8001f40:	f002 fb5c 	bl	80045fc <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f44:	6963      	ldr	r3, [r4, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0d1      	beq.n	8001eee <HAL_RCC_OscConfig+0x3de>
 8001f4a:	e688      	b.n	8001c5e <HAL_RCC_OscConfig+0x14e>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001f4c:	487c      	ldr	r0, [pc, #496]	@ (8002140 <HAL_RCC_OscConfig+0x630>)
 8001f4e:	f44f 710e 	mov.w	r1, #568	@ 0x238
 8001f52:	f002 fb53 	bl	80045fc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f56:	69a3      	ldr	r3, [r4, #24]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f47f af08 	bne.w	8001d6e <HAL_RCC_OscConfig+0x25e>
 8001f5e:	e799      	b.n	8001e94 <HAL_RCC_OscConfig+0x384>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f60:	6853      	ldr	r3, [r2, #4]
 8001f62:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f6a:	f47f adf6 	bne.w	8001b5a <HAL_RCC_OscConfig+0x4a>
 8001f6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f72:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f76:	4a71      	ldr	r2, [pc, #452]	@ (800213c <HAL_RCC_OscConfig+0x62c>)
 8001f78:	6811      	ldr	r1, [r2, #0]
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	2201      	movs	r2, #1
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	420b      	tst	r3, r1
 8001f8a:	f43f ae14 	beq.w	8001bb6 <HAL_RCC_OscConfig+0xa6>
 8001f8e:	6863      	ldr	r3, [r4, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f47f ae10 	bne.w	8001bb6 <HAL_RCC_OscConfig+0xa6>
 8001f96:	e799      	b.n	8001ecc <HAL_RCC_OscConfig+0x3bc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f98:	4a68      	ldr	r2, [pc, #416]	@ (800213c <HAL_RCC_OscConfig+0x62c>)
 8001f9a:	6813      	ldr	r3, [r2, #0]
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa2:	e5ef      	b.n	8001b84 <HAL_RCC_OscConfig+0x74>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001fa4:	4866      	ldr	r0, [pc, #408]	@ (8002140 <HAL_RCC_OscConfig+0x630>)
 8001fa6:	f240 114f 	movw	r1, #335	@ 0x14f
 8001faa:	f002 fb27 	bl	80045fc <assert_failed>
 8001fae:	e5c7      	b.n	8001b40 <HAL_RCC_OscConfig+0x30>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb0:	4862      	ldr	r0, [pc, #392]	@ (800213c <HAL_RCC_OscConfig+0x62c>)
 8001fb2:	22f8      	movs	r2, #248	@ 0xf8
 8001fb4:	6801      	ldr	r1, [r0, #0]
 8001fb6:	fa92 f2a2 	rbit	r2, r2
 8001fba:	6923      	ldr	r3, [r4, #16]
 8001fbc:	fab2 f282 	clz	r2, r2
 8001fc0:	4093      	lsls	r3, r2
 8001fc2:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	6003      	str	r3, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fca:	6823      	ldr	r3, [r4, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fcc:	e63e      	b.n	8001c4c <HAL_RCC_OscConfig+0x13c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fce:	6833      	ldr	r3, [r6, #0]
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001fd6:	f7fe f96b 	bl	80002b0 <HAL_GetTick>
 8001fda:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	6833      	ldr	r3, [r6, #0]
 8001fde:	05db      	lsls	r3, r3, #23
 8001fe0:	f53f ae84 	bmi.w	8001cec <HAL_RCC_OscConfig+0x1dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe4:	f7fe f964 	bl	80002b0 <HAL_GetTick>
 8001fe8:	1bc0      	subs	r0, r0, r7
 8001fea:	2864      	cmp	r0, #100	@ 0x64
 8001fec:	d9f6      	bls.n	8001fdc <HAL_RCC_OscConfig+0x4cc>
            return HAL_TIMEOUT;
 8001fee:	2003      	movs	r0, #3
}
 8001ff0:	b003      	add	sp, #12
 8001ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001ff6:	4852      	ldr	r0, [pc, #328]	@ (8002140 <HAL_RCC_OscConfig+0x630>)
 8001ff8:	f240 1149 	movw	r1, #329	@ 0x149
 8001ffc:	f002 fafe 	bl	80045fc <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	e593      	b.n	8001b2c <HAL_RCC_OscConfig+0x1c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002004:	4d4d      	ldr	r5, [pc, #308]	@ (800213c <HAL_RCC_OscConfig+0x62c>)
 8002006:	682b      	ldr	r3, [r5, #0]
 8002008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800200c:	602b      	str	r3, [r5, #0]
 800200e:	682b      	ldr	r3, [r5, #0]
 8002010:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002014:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002016:	f7fe f94b 	bl	80002b0 <HAL_GetTick>
 800201a:	f44f 3800 	mov.w	r8, #131072	@ 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201e:	2701      	movs	r7, #1
        tickstart = HAL_GetTick();
 8002020:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	e004      	b.n	800202e <HAL_RCC_OscConfig+0x51e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002024:	f7fe f944 	bl	80002b0 <HAL_GetTick>
 8002028:	1b80      	subs	r0, r0, r6
 800202a:	2864      	cmp	r0, #100	@ 0x64
 800202c:	d8df      	bhi.n	8001fee <HAL_RCC_OscConfig+0x4de>
 800202e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002032:	682a      	ldr	r2, [r5, #0]
 8002034:	fa98 f3a8 	rbit	r3, r8
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	fa07 f303 	lsl.w	r3, r7, r3
 8002040:	4213      	tst	r3, r2
 8002042:	d1ef      	bne.n	8002024 <HAL_RCC_OscConfig+0x514>
 8002044:	e5b7      	b.n	8001bb6 <HAL_RCC_OscConfig+0xa6>
    FlagStatus       pwrclkchanged = RESET;
 8002046:	2500      	movs	r5, #0
 8002048:	e64b      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204a:	4e3c      	ldr	r6, [pc, #240]	@ (800213c <HAL_RCC_OscConfig+0x62c>)
 800204c:	6a33      	ldr	r3, [r6, #32]
 800204e:	f023 0301 	bic.w	r3, r3, #1
 8002052:	6233      	str	r3, [r6, #32]
 8002054:	6a33      	ldr	r3, [r6, #32]
 8002056:	f023 0304 	bic.w	r3, r3, #4
 800205a:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800205c:	f7fe f928 	bl	80002b0 <HAL_GetTick>
 8002060:	f04f 0902 	mov.w	r9, #2
 8002064:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002066:	f04f 0801 	mov.w	r8, #1
 800206a:	e006      	b.n	800207a <HAL_RCC_OscConfig+0x56a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206c:	f7fe f920 	bl	80002b0 <HAL_GetTick>
 8002070:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002074:	1bc0      	subs	r0, r0, r7
 8002076:	4298      	cmp	r0, r3
 8002078:	d8b9      	bhi.n	8001fee <HAL_RCC_OscConfig+0x4de>
 800207a:	fa99 f3a9 	rbit	r3, r9
 800207e:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002082:	6a32      	ldr	r2, [r6, #32]
 8002084:	fa99 f3a9 	rbit	r3, r9
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	fa08 f303 	lsl.w	r3, r8, r3
 8002090:	4213      	tst	r3, r2
 8002092:	d1eb      	bne.n	800206c <HAL_RCC_OscConfig+0x55c>
    if(pwrclkchanged == SET)
 8002094:	2d00      	cmp	r5, #0
 8002096:	f43f ae63 	beq.w	8001d60 <HAL_RCC_OscConfig+0x250>
 800209a:	e03b      	b.n	8002114 <HAL_RCC_OscConfig+0x604>
 800209c:	2601      	movs	r6, #1
 800209e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020aa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020ae:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b0:	4f22      	ldr	r7, [pc, #136]	@ (800213c <HAL_RCC_OscConfig+0x62c>)
        __HAL_RCC_HSI_DISABLE();
 80020b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020b4:	f7fe f8fc 	bl	80002b0 <HAL_GetTick>
 80020b8:	f04f 0802 	mov.w	r8, #2
 80020bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	e004      	b.n	80020ca <HAL_RCC_OscConfig+0x5ba>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c0:	f7fe f8f6 	bl	80002b0 <HAL_GetTick>
 80020c4:	1b40      	subs	r0, r0, r5
 80020c6:	2802      	cmp	r0, #2
 80020c8:	d891      	bhi.n	8001fee <HAL_RCC_OscConfig+0x4de>
 80020ca:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	fa98 f3a8 	rbit	r3, r8
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	fa06 f303 	lsl.w	r3, r6, r3
 80020dc:	4213      	tst	r3, r2
 80020de:	d1ef      	bne.n	80020c0 <HAL_RCC_OscConfig+0x5b0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	e5b3      	b.n	8001c4c <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	f43f aef1 	beq.w	8001ecc <HAL_RCC_OscConfig+0x3bc>
        pll_config = RCC->CFGR;
 80020ea:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020ec:	69e1      	ldr	r1, [r4, #28]
        pll_config2 = RCC->CFGR2;
 80020ee:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020f0:	f402 30c0 	and.w	r0, r2, #98304	@ 0x18000
 80020f4:	4288      	cmp	r0, r1
 80020f6:	f47f aee9 	bne.w	8001ecc <HAL_RCC_OscConfig+0x3bc>
 80020fa:	6a21      	ldr	r1, [r4, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80020fc:	f402 1270 	and.w	r2, r2, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002100:	428a      	cmp	r2, r1
 8002102:	f47f aee3 	bne.w	8001ecc <HAL_RCC_OscConfig+0x3bc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002106:	6a60      	ldr	r0, [r4, #36]	@ 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002108:	f003 030f 	and.w	r3, r3, #15
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800210c:	1a18      	subs	r0, r3, r0
 800210e:	bf18      	it	ne
 8002110:	2001      	movne	r0, #1
 8002112:	e6c0      	b.n	8001e96 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002114:	4a09      	ldr	r2, [pc, #36]	@ (800213c <HAL_RCC_OscConfig+0x62c>)
 8002116:	69d3      	ldr	r3, [r2, #28]
 8002118:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800211c:	61d3      	str	r3, [r2, #28]
 800211e:	e61f      	b.n	8001d60 <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002120:	f042 0204 	orr.w	r2, r2, #4
 8002124:	621a      	str	r2, [r3, #32]
 8002126:	6a1a      	ldr	r2, [r3, #32]
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800212e:	e5f5      	b.n	8001d1c <HAL_RCC_OscConfig+0x20c>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8002130:	4803      	ldr	r0, [pc, #12]	@ (8002140 <HAL_RCC_OscConfig+0x630>)
 8002132:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8002136:	f002 fa61 	bl	80045fc <assert_failed>
 800213a:	e649      	b.n	8001dd0 <HAL_RCC_OscConfig+0x2c0>
 800213c:	40021000 	.word	0x40021000
 8002140:	08005454 	.word	0x08005454
 8002144:	10908120 	.word	0x10908120
 8002148:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800214c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002150:	fab3 f383 	clz	r3, r3
 8002154:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002158:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002162:	f7fe f8a5 	bl	80002b0 <HAL_GetTick>
 8002166:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
 800216a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216c:	2601      	movs	r6, #1
 800216e:	e005      	b.n	800217c <HAL_RCC_OscConfig+0x66c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002170:	f7fe f89e 	bl	80002b0 <HAL_GetTick>
 8002174:	1b00      	subs	r0, r0, r4
 8002176:	2802      	cmp	r0, #2
 8002178:	f63f af39 	bhi.w	8001fee <HAL_RCC_OscConfig+0x4de>
 800217c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002180:	682a      	ldr	r2, [r5, #0]
 8002182:	fa97 f3a7 	rbit	r3, r7
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	fa06 f303 	lsl.w	r3, r6, r3
 800218e:	4213      	tst	r3, r2
 8002190:	d1ee      	bne.n	8002170 <HAL_RCC_OscConfig+0x660>
 8002192:	e67f      	b.n	8001e94 <HAL_RCC_OscConfig+0x384>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002194:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002198:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80021aa:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ac:	e4ea      	b.n	8001b84 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 80021ae:	2001      	movs	r0, #1
}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop

080021b4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80021b4:	4a0c      	ldr	r2, [pc, #48]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x34>)
 80021b6:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021b8:	f003 010c 	and.w	r1, r3, #12
 80021bc:	2908      	cmp	r1, #8
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x10>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021c0:	480a      	ldr	r0, [pc, #40]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x38>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80021c2:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80021c4:	f3c3 4383 	ubfx	r3, r3, #18, #4
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80021c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80021ca:	4909      	ldr	r1, [pc, #36]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x3c>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021cc:	4807      	ldr	r0, [pc, #28]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x38>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80021ce:	5cc9      	ldrb	r1, [r1, r3]
{
 80021d0:	b410      	push	{r4}
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80021d2:	f002 030f 	and.w	r3, r2, #15
 80021d6:	4c07      	ldr	r4, [pc, #28]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x40>)
 80021d8:	5ce3      	ldrb	r3, [r4, r3]
}
 80021da:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021de:	fbb0 f0f3 	udiv	r0, r0, r3
 80021e2:	fb01 f000 	mul.w	r0, r1, r0
}
 80021e6:	4770      	bx	lr
 80021e8:	40021000 	.word	0x40021000
 80021ec:	007a1200 	.word	0x007a1200
 80021f0:	0800549c 	.word	0x0800549c
 80021f4:	0800548c 	.word	0x0800548c

080021f8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80021f8:	2800      	cmp	r0, #0
 80021fa:	f000 80e9 	beq.w	80023d0 <HAL_RCC_ClockConfig+0x1d8>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80021fe:	6803      	ldr	r3, [r0, #0]
{
 8002200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002204:	071e      	lsls	r6, r3, #28
 8002206:	460d      	mov	r5, r1
 8002208:	4604      	mov	r4, r0
 800220a:	f000 80ce 	beq.w	80023aa <HAL_RCC_ClockConfig+0x1b2>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800220e:	2d02      	cmp	r5, #2
 8002210:	f200 80c5 	bhi.w	800239e <HAL_RCC_ClockConfig+0x1a6>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002214:	4a7c      	ldr	r2, [pc, #496]	@ (8002408 <HAL_RCC_ClockConfig+0x210>)
 8002216:	6813      	ldr	r3, [r2, #0]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	42ab      	cmp	r3, r5
 800221e:	d20c      	bcs.n	800223a <HAL_RCC_ClockConfig+0x42>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002220:	6813      	ldr	r3, [r2, #0]
 8002222:	f023 0307 	bic.w	r3, r3, #7
 8002226:	432b      	orrs	r3, r5
 8002228:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	6813      	ldr	r3, [r2, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	42ab      	cmp	r3, r5
 8002232:	d002      	beq.n	800223a <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 8002234:	2001      	movs	r0, #1
}
 8002236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	0798      	lsls	r0, r3, #30
 800223e:	d51a      	bpl.n	8002276 <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002240:	68a2      	ldr	r2, [r4, #8]
 8002242:	b192      	cbz	r2, 800226a <HAL_RCC_ClockConfig+0x72>
 8002244:	2ac0      	cmp	r2, #192	@ 0xc0
 8002246:	d010      	beq.n	800226a <HAL_RCC_ClockConfig+0x72>
 8002248:	f200 80b9 	bhi.w	80023be <HAL_RCC_ClockConfig+0x1c6>
 800224c:	2aa0      	cmp	r2, #160	@ 0xa0
 800224e:	d00c      	beq.n	800226a <HAL_RCC_ClockConfig+0x72>
 8002250:	f200 80b1 	bhi.w	80023b6 <HAL_RCC_ClockConfig+0x1be>
 8002254:	f022 0110 	bic.w	r1, r2, #16
 8002258:	2980      	cmp	r1, #128	@ 0x80
 800225a:	d006      	beq.n	800226a <HAL_RCC_ClockConfig+0x72>
 800225c:	486b      	ldr	r0, [pc, #428]	@ (800240c <HAL_RCC_ClockConfig+0x214>)
 800225e:	f240 21d9 	movw	r1, #729	@ 0x2d9
 8002262:	f002 f9cb 	bl	80045fc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002266:	68a2      	ldr	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002268:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226a:	4869      	ldr	r0, [pc, #420]	@ (8002410 <HAL_RCC_ClockConfig+0x218>)
 800226c:	6841      	ldr	r1, [r0, #4]
 800226e:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 8002272:	430a      	orrs	r2, r1
 8002274:	6042      	str	r2, [r0, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	07d9      	lsls	r1, r3, #31
 8002278:	d531      	bpl.n	80022de <HAL_RCC_ClockConfig+0xe6>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800227a:	6863      	ldr	r3, [r4, #4]
 800227c:	2b02      	cmp	r3, #2
 800227e:	f200 80b9 	bhi.w	80023f4 <HAL_RCC_ClockConfig+0x1fc>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	2b01      	cmp	r3, #1
 8002284:	f000 80a6 	beq.w	80023d4 <HAL_RCC_ClockConfig+0x1dc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002288:	2b02      	cmp	r3, #2
 800228a:	bf0c      	ite	eq
 800228c:	f04f 7200 	moveq.w	r2, #33554432	@ 0x2000000
 8002290:	2202      	movne	r2, #2
 8002292:	fa92 f1a2 	rbit	r1, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	495e      	ldr	r1, [pc, #376]	@ (8002410 <HAL_RCC_ClockConfig+0x218>)
 8002298:	6808      	ldr	r0, [r1, #0]
 800229a:	fa92 f2a2 	rbit	r2, r2
 800229e:	2101      	movs	r1, #1
 80022a0:	fab2 f282 	clz	r2, r2
 80022a4:	fa01 f202 	lsl.w	r2, r1, r2
 80022a8:	4202      	tst	r2, r0
 80022aa:	d0c3      	beq.n	8002234 <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ac:	4e58      	ldr	r6, [pc, #352]	@ (8002410 <HAL_RCC_ClockConfig+0x218>)
 80022ae:	6872      	ldr	r2, [r6, #4]
 80022b0:	f022 0203 	bic.w	r2, r2, #3
 80022b4:	4313      	orrs	r3, r2
 80022b6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80022b8:	f7fd fffa 	bl	80002b0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022bc:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80022c0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	e005      	b.n	80022d0 <HAL_RCC_ClockConfig+0xd8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c4:	f7fd fff4 	bl	80002b0 <HAL_GetTick>
 80022c8:	1bc0      	subs	r0, r0, r7
 80022ca:	4540      	cmp	r0, r8
 80022cc:	f200 8099 	bhi.w	8002402 <HAL_RCC_ClockConfig+0x20a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d0:	6873      	ldr	r3, [r6, #4]
 80022d2:	6862      	ldr	r2, [r4, #4]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80022dc:	d1f2      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xcc>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022de:	4a4a      	ldr	r2, [pc, #296]	@ (8002408 <HAL_RCC_ClockConfig+0x210>)
 80022e0:	6813      	ldr	r3, [r2, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	42ab      	cmp	r3, r5
 80022e8:	d909      	bls.n	80022fe <HAL_RCC_ClockConfig+0x106>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	6813      	ldr	r3, [r2, #0]
 80022ec:	f023 0307 	bic.w	r3, r3, #7
 80022f0:	432b      	orrs	r3, r5
 80022f2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f4:	6813      	ldr	r3, [r2, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	42ab      	cmp	r3, r5
 80022fc:	d19a      	bne.n	8002234 <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	075a      	lsls	r2, r3, #29
 8002302:	d518      	bpl.n	8002336 <HAL_RCC_ClockConfig+0x13e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002304:	68e1      	ldr	r1, [r4, #12]
 8002306:	f431 6280 	bics.w	r2, r1, #1024	@ 0x400
 800230a:	d00e      	beq.n	800232a <HAL_RCC_ClockConfig+0x132>
 800230c:	f421 7200 	bic.w	r2, r1, #512	@ 0x200
 8002310:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 8002314:	d009      	beq.n	800232a <HAL_RCC_ClockConfig+0x132>
 8002316:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 800231a:	d006      	beq.n	800232a <HAL_RCC_ClockConfig+0x132>
 800231c:	f44f 7147 	mov.w	r1, #796	@ 0x31c
 8002320:	483a      	ldr	r0, [pc, #232]	@ (800240c <HAL_RCC_ClockConfig+0x214>)
 8002322:	f002 f96b 	bl	80045fc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002326:	68e1      	ldr	r1, [r4, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800232a:	4839      	ldr	r0, [pc, #228]	@ (8002410 <HAL_RCC_ClockConfig+0x218>)
 800232c:	6842      	ldr	r2, [r0, #4]
 800232e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002332:	430a      	orrs	r2, r1
 8002334:	6042      	str	r2, [r0, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002336:	071b      	lsls	r3, r3, #28
 8002338:	d518      	bpl.n	800236c <HAL_RCC_ClockConfig+0x174>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800233a:	6922      	ldr	r2, [r4, #16]
 800233c:	f432 6380 	bics.w	r3, r2, #1024	@ 0x400
 8002340:	d00d      	beq.n	800235e <HAL_RCC_ClockConfig+0x166>
 8002342:	f422 7300 	bic.w	r3, r2, #512	@ 0x200
 8002346:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800234a:	d008      	beq.n	800235e <HAL_RCC_ClockConfig+0x166>
 800234c:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
 8002350:	d005      	beq.n	800235e <HAL_RCC_ClockConfig+0x166>
 8002352:	482e      	ldr	r0, [pc, #184]	@ (800240c <HAL_RCC_ClockConfig+0x214>)
 8002354:	f240 3123 	movw	r1, #803	@ 0x323
 8002358:	f002 f950 	bl	80045fc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235c:	6922      	ldr	r2, [r4, #16]
 800235e:	492c      	ldr	r1, [pc, #176]	@ (8002410 <HAL_RCC_ClockConfig+0x218>)
 8002360:	684b      	ldr	r3, [r1, #4]
 8002362:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002366:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800236a:	604b      	str	r3, [r1, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800236c:	f7ff ff22 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 8002370:	4b27      	ldr	r3, [pc, #156]	@ (8002410 <HAL_RCC_ClockConfig+0x218>)
 8002372:	22f0      	movs	r2, #240	@ 0xf0
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	fa92 f2a2 	rbit	r2, r2
 800237a:	fab2 f282 	clz	r2, r2
 800237e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002382:	40d3      	lsrs	r3, r2
 8002384:	4a23      	ldr	r2, [pc, #140]	@ (8002414 <HAL_RCC_ClockConfig+0x21c>)
  HAL_InitTick (uwTickPrio);
 8002386:	4924      	ldr	r1, [pc, #144]	@ (8002418 <HAL_RCC_ClockConfig+0x220>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	4a24      	ldr	r2, [pc, #144]	@ (800241c <HAL_RCC_ClockConfig+0x224>)
 800238c:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8002390:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002392:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8002394:	f7fd ff4a 	bl	800022c <HAL_InitTick>
  return HAL_OK;
 8002398:	2000      	movs	r0, #0
}
 800239a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800239e:	481b      	ldr	r0, [pc, #108]	@ (800240c <HAL_RCC_ClockConfig+0x214>)
 80023a0:	f240 21c2 	movw	r1, #706	@ 0x2c2
 80023a4:	f002 f92a 	bl	80045fc <assert_failed>
 80023a8:	e734      	b.n	8002214 <HAL_RCC_ClockConfig+0x1c>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80023aa:	4818      	ldr	r0, [pc, #96]	@ (800240c <HAL_RCC_ClockConfig+0x214>)
 80023ac:	f240 21c1 	movw	r1, #705	@ 0x2c1
 80023b0:	f002 f924 	bl	80045fc <assert_failed>
 80023b4:	e72b      	b.n	800220e <HAL_RCC_ClockConfig+0x16>
 80023b6:	2ab0      	cmp	r2, #176	@ 0xb0
 80023b8:	f43f af57 	beq.w	800226a <HAL_RCC_ClockConfig+0x72>
 80023bc:	e74e      	b.n	800225c <HAL_RCC_ClockConfig+0x64>
 80023be:	2ae0      	cmp	r2, #224	@ 0xe0
 80023c0:	f43f af53 	beq.w	800226a <HAL_RCC_ClockConfig+0x72>
 80023c4:	f022 0120 	bic.w	r1, r2, #32
 80023c8:	29d0      	cmp	r1, #208	@ 0xd0
 80023ca:	f47f af47 	bne.w	800225c <HAL_RCC_ClockConfig+0x64>
 80023ce:	e74c      	b.n	800226a <HAL_RCC_ClockConfig+0x72>
    return HAL_ERROR;
 80023d0:	2001      	movs	r0, #1
}
 80023d2:	4770      	bx	lr
 80023d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023d8:	fa92 f1a2 	rbit	r1, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023dc:	490c      	ldr	r1, [pc, #48]	@ (8002410 <HAL_RCC_ClockConfig+0x218>)
 80023de:	6809      	ldr	r1, [r1, #0]
 80023e0:	fa92 f2a2 	rbit	r2, r2
 80023e4:	fab2 f282 	clz	r2, r2
 80023e8:	fa03 f202 	lsl.w	r2, r3, r2
 80023ec:	420a      	tst	r2, r1
 80023ee:	f47f af5d 	bne.w	80022ac <HAL_RCC_ClockConfig+0xb4>
 80023f2:	e71f      	b.n	8002234 <HAL_RCC_ClockConfig+0x3c>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80023f4:	4805      	ldr	r0, [pc, #20]	@ (800240c <HAL_RCC_ClockConfig+0x214>)
 80023f6:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 80023fa:	f002 f8ff 	bl	80045fc <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fe:	6863      	ldr	r3, [r4, #4]
 8002400:	e73f      	b.n	8002282 <HAL_RCC_ClockConfig+0x8a>
        return HAL_TIMEOUT;
 8002402:	2003      	movs	r0, #3
 8002404:	e717      	b.n	8002236 <HAL_RCC_ClockConfig+0x3e>
 8002406:	bf00      	nop
 8002408:	40022000 	.word	0x40022000
 800240c:	08005454 	.word	0x08005454
 8002410:	40021000 	.word	0x40021000
 8002414:	080055a0 	.word	0x080055a0
 8002418:	20000004 	.word	0x20000004
 800241c:	20000008 	.word	0x20000008

08002420 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002420:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002422:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	fa92 f2a2 	rbit	r2, r2
 800242c:	fab2 f282 	clz	r2, r2
 8002430:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002434:	4904      	ldr	r1, [pc, #16]	@ (8002448 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8002436:	4805      	ldr	r0, [pc, #20]	@ (800244c <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002438:	40d3      	lsrs	r3, r2
 800243a:	6800      	ldr	r0, [r0, #0]
 800243c:	5ccb      	ldrb	r3, [r1, r3]
}    
 800243e:	40d8      	lsrs	r0, r3
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	08005598 	.word	0x08005598
 800244c:	20000008 	.word	0x20000008

08002450 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002450:	4b08      	ldr	r3, [pc, #32]	@ (8002474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002452:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	fa92 f2a2 	rbit	r2, r2
 800245c:	fab2 f282 	clz	r2, r2
 8002460:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002464:	4904      	ldr	r1, [pc, #16]	@ (8002478 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8002466:	4805      	ldr	r0, [pc, #20]	@ (800247c <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002468:	40d3      	lsrs	r3, r2
 800246a:	6800      	ldr	r0, [r0, #0]
 800246c:	5ccb      	ldrb	r3, [r1, r3]
} 
 800246e:	40d8      	lsrs	r0, r3
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	08005598 	.word	0x08005598
 800247c:	20000008 	.word	0x20000008

08002480 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tickstart = 0U;
  uint32_t temp_reg = 0U;
  FlagStatus       pwrclkchanged = RESET;
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002484:	4a95      	ldr	r2, [pc, #596]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002486:	6803      	ldr	r3, [r0, #0]
 8002488:	4293      	cmp	r3, r2
{
 800248a:	b083      	sub	sp, #12
 800248c:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800248e:	f080 8212 	bcs.w	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002492:	03d9      	lsls	r1, r3, #15
 8002494:	d54e      	bpl.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002496:	6863      	ldr	r3, [r4, #4]
 8002498:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
 800249c:	f040 822c 	bne.w	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x478>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a0:	4b8f      	ldr	r3, [pc, #572]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	69da      	ldr	r2, [r3, #28]
 80024a4:	00d2      	lsls	r2, r2, #3
 80024a6:	f100 820c 	bmi.w	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4d8d      	ldr	r5, [pc, #564]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ae:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80024b2:	61da      	str	r2, [r3, #28]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	682b      	ldr	r3, [r5, #0]
 80024c0:	05df      	lsls	r7, r3, #23
      pwrclkchanged = SET;
 80024c2:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c6:	f140 8203 	bpl.w	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x450>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024ca:	f8df 8214 	ldr.w	r8, [pc, #532]	@ 80026e0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024ce:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024d0:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024d4:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80024d8:	d020      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80024da:	f401 7240 	and.w	r2, r1, #768	@ 0x300
 80024de:	429a      	cmp	r2, r3
 80024e0:	d01c      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024e2:	f8d8 1020 	ldr.w	r1, [r8, #32]
 80024e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024ea:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 80024ee:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f2:	4f7d      	ldr	r7, [pc, #500]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024f4:	fab2 f282 	clz	r2, r2
 80024f8:	443a      	add	r2, r7
 80024fa:	0092      	lsls	r2, r2, #2
 80024fc:	2501      	movs	r5, #1
 80024fe:	6015      	str	r5, [r2, #0]
 8002500:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	443b      	add	r3, r7
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800250e:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002510:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8002512:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002516:	f100 81fb 	bmi.w	8002910 <HAL_RCCEx_PeriphCLKConfig+0x490>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800251a:	6861      	ldr	r1, [r4, #4]
 800251c:	4a70      	ldr	r2, [pc, #448]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251e:	6a13      	ldr	r3, [r2, #32]
 8002520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002524:	430b      	orrs	r3, r1
 8002526:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002528:	b11e      	cbz	r6, 8002532 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252a:	69d3      	ldr	r3, [r2, #28]
 800252c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002530:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	07da      	lsls	r2, r3, #31
 8002536:	d509      	bpl.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8002538:	68a1      	ldr	r1, [r4, #8]
 800253a:	2903      	cmp	r1, #3
 800253c:	f200 81e1 	bhi.w	8002902 <HAL_RCCEx_PeriphCLKConfig+0x482>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002540:	4867      	ldr	r0, [pc, #412]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002542:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002544:	f022 0203 	bic.w	r2, r2, #3
 8002548:	430a      	orrs	r2, r1
 800254a:	6302      	str	r2, [r0, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800254c:	079f      	lsls	r7, r3, #30
 800254e:	d50f      	bpl.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8002550:	68e1      	ldr	r1, [r4, #12]
 8002552:	f431 3240 	bics.w	r2, r1, #196608	@ 0x30000
 8002556:	d005      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8002558:	21c7      	movs	r1, #199	@ 0xc7
 800255a:	4864      	ldr	r0, [pc, #400]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800255c:	f002 f84e 	bl	80045fc <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002560:	68e1      	ldr	r1, [r4, #12]
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002562:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002564:	485e      	ldr	r0, [pc, #376]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002566:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002568:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800256c:	430a      	orrs	r2, r1
 800256e:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002570:	075e      	lsls	r6, r3, #29
 8002572:	d50f      	bpl.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8002574:	6921      	ldr	r1, [r4, #16]
 8002576:	f431 2240 	bics.w	r2, r1, #786432	@ 0xc0000
 800257a:	d005      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800257c:	21d3      	movs	r1, #211	@ 0xd3
 800257e:	485b      	ldr	r0, [pc, #364]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002580:	f002 f83c 	bl	80045fc <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002584:	6921      	ldr	r1, [r4, #16]
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002586:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002588:	4855      	ldr	r0, [pc, #340]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258a:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800258c:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8002590:	430a      	orrs	r2, r1
 8002592:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002594:	069d      	lsls	r5, r3, #26
 8002596:	d50f      	bpl.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8002598:	69e1      	ldr	r1, [r4, #28]
 800259a:	f031 0210 	bics.w	r2, r1, #16
 800259e:	d005      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80025a0:	21de      	movs	r1, #222	@ 0xde
 80025a2:	4852      	ldr	r0, [pc, #328]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80025a4:	f002 f82a 	bl	80045fc <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025a8:	69e1      	ldr	r1, [r4, #28]
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025aa:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025ac:	484c      	ldr	r0, [pc, #304]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ae:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80025b0:	f022 0210 	bic.w	r2, r2, #16
 80025b4:	430a      	orrs	r2, r1
 80025b6:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025b8:	0398      	lsls	r0, r3, #14
 80025ba:	d50f      	bpl.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 80025bc:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80025be:	f431 0280 	bics.w	r2, r1, #4194304	@ 0x400000
 80025c2:	d005      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80025c4:	21ec      	movs	r1, #236	@ 0xec
 80025c6:	4849      	ldr	r0, [pc, #292]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80025c8:	f002 f818 	bl	80045fc <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80025cc:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ce:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80025d0:	4843      	ldr	r0, [pc, #268]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d2:	6842      	ldr	r2, [r0, #4]
 80025d4:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 80025d8:	430a      	orrs	r2, r1
 80025da:	6042      	str	r2, [r0, #4]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025dc:	0659      	lsls	r1, r3, #25
 80025de:	d510      	bpl.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80025e0:	6a21      	ldr	r1, [r4, #32]
 80025e2:	f031 0220 	bics.w	r2, r1, #32
 80025e6:	d006      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x176>
 80025e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025ec:	483f      	ldr	r0, [pc, #252]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80025ee:	f002 f805 	bl	80045fc <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025f2:	6a21      	ldr	r1, [r4, #32]
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025f4:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025f6:	483a      	ldr	r0, [pc, #232]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f8:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80025fa:	f022 0220 	bic.w	r2, r2, #32
 80025fe:	430a      	orrs	r2, r1
 8002600:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002602:	035a      	lsls	r2, r3, #13
 8002604:	d510      	bpl.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8002606:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002608:	f031 0240 	bics.w	r2, r1, #64	@ 0x40
 800260c:	d006      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800260e:	f44f 7189 	mov.w	r1, #274	@ 0x112
 8002612:	4836      	ldr	r0, [pc, #216]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002614:	f001 fff2 	bl	80045fc <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002618:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800261a:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261c:	4830      	ldr	r0, [pc, #192]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002620:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002624:	430a      	orrs	r2, r1
 8002626:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002628:	071f      	lsls	r7, r3, #28
 800262a:	d510      	bpl.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800262c:	6961      	ldr	r1, [r4, #20]
 800262e:	f431 1240 	bics.w	r2, r1, #3145728	@ 0x300000
 8002632:	d006      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002634:	f240 1121 	movw	r1, #289	@ 0x121
 8002638:	482c      	ldr	r0, [pc, #176]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800263a:	f001 ffdf 	bl	80045fc <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800263e:	6961      	ldr	r1, [r4, #20]
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002640:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002642:	4827      	ldr	r0, [pc, #156]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002644:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002646:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800264a:	430a      	orrs	r2, r1
 800264c:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800264e:	06de      	lsls	r6, r3, #27
 8002650:	d510      	bpl.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8002652:	69a1      	ldr	r1, [r4, #24]
 8002654:	f431 0240 	bics.w	r2, r1, #12582912	@ 0xc00000
 8002658:	d006      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800265a:	f240 112b 	movw	r1, #299	@ 0x12b
 800265e:	4823      	ldr	r0, [pc, #140]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002660:	f001 ffcc 	bl	80045fc <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002664:	69a1      	ldr	r1, [r4, #24]

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002666:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002668:	481d      	ldr	r0, [pc, #116]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266a:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800266c:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8002670:	430a      	orrs	r2, r1
 8002672:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002674:	059d      	lsls	r5, r3, #22
 8002676:	d510      	bpl.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8002678:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800267a:	f431 0200 	bics.w	r2, r1, #8388608	@ 0x800000
 800267e:	d006      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8002680:	f240 113b 	movw	r1, #315	@ 0x13b
 8002684:	4819      	ldr	r0, [pc, #100]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002686:	f001 ffb9 	bl	80045fc <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800268a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800268c:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800268e:	4814      	ldr	r0, [pc, #80]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002690:	6842      	ldr	r2, [r0, #4]
 8002692:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8002696:	430a      	orrs	r2, r1
 8002698:	6042      	str	r2, [r0, #4]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800269a:	0618      	lsls	r0, r3, #24
 800269c:	d528      	bpl.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 800269e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80026a0:	b1aa      	cbz	r2, 80026ce <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80026a2:	f5b2 7fb0 	cmp.w	r2, #352	@ 0x160
 80026a6:	d012      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80026a8:	f200 80f0 	bhi.w	800288c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80026ac:	f5b2 7f98 	cmp.w	r2, #304	@ 0x130
 80026b0:	d00d      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80026b2:	f022 0110 	bic.w	r1, r2, #16
 80026b6:	f240 80e0 	bls.w	800287a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80026ba:	f5b1 7fa0 	cmp.w	r1, #320	@ 0x140
 80026be:	d006      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80026c0:	480a      	ldr	r0, [pc, #40]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80026c2:	f240 115b 	movw	r1, #347	@ 0x15b
 80026c6:	f001 ff99 	bl	80045fc <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026ca:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026cc:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026ce:	4804      	ldr	r0, [pc, #16]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80026d2:	f421 71f8 	bic.w	r1, r1, #496	@ 0x1f0
 80026d6:	430a      	orrs	r2, r1
 80026d8:	62c2      	str	r2, [r0, #44]	@ 0x2c
 80026da:	e009      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x270>
 80026dc:	03f73400 	.word	0x03f73400
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40007000 	.word	0x40007000
 80026e8:	10908100 	.word	0x10908100
 80026ec:	080054ac 	.word	0x080054ac
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026f0:	05d9      	lsls	r1, r3, #23
 80026f2:	d527      	bpl.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 80026f4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80026f6:	f431 5200 	bics.w	r2, r1, #8192	@ 0x2000
 80026fa:	d01d      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80026fc:	f421 6280 	bic.w	r2, r1, #1024	@ 0x400
 8002700:	f5b2 5f08 	cmp.w	r2, #8704	@ 0x2200
 8002704:	d018      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002706:	f421 6200 	bic.w	r2, r1, #2048	@ 0x800
 800270a:	f5b2 5f10 	cmp.w	r2, #9216	@ 0x2400
 800270e:	d013      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002710:	f421 7200 	bic.w	r2, r1, #512	@ 0x200
 8002714:	f5b2 5f20 	cmp.w	r2, #10240	@ 0x2800
 8002718:	d00e      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800271a:	f5b1 5f38 	cmp.w	r1, #11776	@ 0x2e00
 800271e:	d00b      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002720:	f421 62c0 	bic.w	r2, r1, #1536	@ 0x600
 8002724:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8002728:	d006      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800272a:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 800272e:	4886      	ldr	r0, [pc, #536]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 8002730:	f001 ff64 	bl	80045fc <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002734:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002736:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002738:	4884      	ldr	r0, [pc, #528]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800273a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800273c:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8002740:	430a      	orrs	r2, r1
 8002742:	62c2      	str	r2, [r0, #44]	@ 0x2c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002744:	04da      	lsls	r2, r3, #19
 8002746:	d510      	bpl.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8002748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800274a:	f431 7280 	bics.w	r2, r1, #256	@ 0x100
 800274e:	d006      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002750:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8002754:	487c      	ldr	r0, [pc, #496]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 8002756:	f001 ff51 	bl	80045fc <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800275a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800275c:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800275e:	487b      	ldr	r0, [pc, #492]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8002760:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002762:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002766:	430a      	orrs	r2, r1
 8002768:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800276a:	049f      	lsls	r7, r3, #18
 800276c:	d510      	bpl.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 800276e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002770:	f431 7200 	bics.w	r2, r1, #512	@ 0x200
 8002774:	d006      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002776:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 800277a:	4873      	ldr	r0, [pc, #460]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800277c:	f001 ff3e 	bl	80045fc <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002780:	6c21      	ldr	r1, [r4, #64]	@ 0x40
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002782:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002784:	4871      	ldr	r0, [pc, #452]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8002786:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002788:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800278c:	430a      	orrs	r2, r1
 800278e:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002790:	02de      	lsls	r6, r3, #11
 8002792:	d510      	bpl.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 8002794:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002796:	f031 7280 	bics.w	r2, r1, #16777216	@ 0x1000000
 800279a:	d006      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800279c:	f240 11f5 	movw	r1, #501	@ 0x1f5
 80027a0:	4869      	ldr	r0, [pc, #420]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 80027a2:	f001 ff2b 	bl	80045fc <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80027a6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80027a8:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80027aa:	4868      	ldr	r0, [pc, #416]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80027ac:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80027ae:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80027b2:	430a      	orrs	r2, r1
 80027b4:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80027b6:	029d      	lsls	r5, r3, #10
 80027b8:	d510      	bpl.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 80027ba:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80027bc:	f031 7200 	bics.w	r2, r1, #33554432	@ 0x2000000
 80027c0:	d006      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80027c2:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80027c6:	4860      	ldr	r0, [pc, #384]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 80027c8:	f001 ff18 	bl	80045fc <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80027cc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80027ce:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80027d0:	485e      	ldr	r0, [pc, #376]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80027d2:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80027d4:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80027d8:	430a      	orrs	r2, r1
 80027da:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80027dc:	0258      	lsls	r0, r3, #9
 80027de:	d510      	bpl.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 80027e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80027e2:	f431 6280 	bics.w	r2, r1, #1024	@ 0x400
 80027e6:	d006      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027e8:	f240 2109 	movw	r1, #521	@ 0x209
 80027ec:	4856      	ldr	r0, [pc, #344]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 80027ee:	f001 ff05 	bl	80045fc <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80027f2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80027f4:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80027f6:	4855      	ldr	r0, [pc, #340]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80027f8:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80027fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027fe:	430a      	orrs	r2, r1
 8002800:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002802:	0219      	lsls	r1, r3, #8
 8002804:	d510      	bpl.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 8002806:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002808:	f431 6200 	bics.w	r2, r1, #2048	@ 0x800
 800280c:	d006      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x39c>
 800280e:	f240 2113 	movw	r1, #531	@ 0x213
 8002812:	484d      	ldr	r0, [pc, #308]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 8002814:	f001 fef2 	bl	80045fc <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002818:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800281a:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800281c:	484b      	ldr	r0, [pc, #300]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800281e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002820:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002824:	430a      	orrs	r2, r1
 8002826:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002828:	01da      	lsls	r2, r3, #7
 800282a:	d510      	bpl.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 800282c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800282e:	f431 5200 	bics.w	r2, r1, #8192	@ 0x2000
 8002832:	d006      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8002834:	f240 211d 	movw	r1, #541	@ 0x21d
 8002838:	4843      	ldr	r0, [pc, #268]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800283a:	f001 fedf 	bl	80045fc <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800283e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002840:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002842:	4842      	ldr	r0, [pc, #264]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8002844:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002846:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800284a:	430a      	orrs	r2, r1
 800284c:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800284e:	019b      	lsls	r3, r3, #6
 8002850:	d50f      	bpl.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 8002852:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002854:	f432 4300 	bics.w	r3, r2, #32768	@ 0x8000
 8002858:	d005      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800285a:	483b      	ldr	r0, [pc, #236]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800285c:	f240 212a 	movw	r1, #554	@ 0x22a
 8002860:	f001 fecc 	bl	80045fc <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002864:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002866:	4939      	ldr	r1, [pc, #228]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8002868:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800286a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800286e:	4313      	orrs	r3, r2
 8002870:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002872:	2000      	movs	r0, #0
}
 8002874:	b003      	add	sp, #12
 8002876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800287a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800287e:	f43f af26 	beq.w	80026ce <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002882:	f5b2 7f90 	cmp.w	r2, #288	@ 0x120
 8002886:	f43f af22 	beq.w	80026ce <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800288a:	e719      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800288c:	f5b2 7fc8 	cmp.w	r2, #400	@ 0x190
 8002890:	f43f af1d 	beq.w	80026ce <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002894:	d906      	bls.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002896:	f022 0110 	bic.w	r1, r2, #16
 800289a:	f5b1 7fd0 	cmp.w	r1, #416	@ 0x1a0
 800289e:	f47f af0f 	bne.w	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80028a2:	e714      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80028a4:	f5b2 7fb8 	cmp.w	r2, #368	@ 0x170
 80028a8:	f43f af11 	beq.w	80026ce <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80028ac:	f5b2 7fc0 	cmp.w	r2, #384	@ 0x180
 80028b0:	f43f af0d 	beq.w	80026ce <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80028b4:	e704      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80028b6:	4824      	ldr	r0, [pc, #144]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 80028b8:	2170      	movs	r1, #112	@ 0x70
 80028ba:	f001 fe9f 	bl	80045fc <assert_failed>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	e5e7      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x12>
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	4d23      	ldr	r5, [pc, #140]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80028c4:	682b      	ldr	r3, [r5, #0]
 80028c6:	05df      	lsls	r7, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 80028c8:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	f53f adfd 	bmi.w	80024ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d0:	682b      	ldr	r3, [r5, #0]
 80028d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80028d8:	f7fd fcea 	bl	80002b0 <HAL_GetTick>
 80028dc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028de:	682b      	ldr	r3, [r5, #0]
 80028e0:	05d8      	lsls	r0, r3, #23
 80028e2:	f53f adf2 	bmi.w	80024ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e6:	f7fd fce3 	bl	80002b0 <HAL_GetTick>
 80028ea:	1bc0      	subs	r0, r0, r7
 80028ec:	2864      	cmp	r0, #100	@ 0x64
 80028ee:	d9f6      	bls.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x45e>
          return HAL_TIMEOUT;
 80028f0:	2003      	movs	r0, #3
}
 80028f2:	b003      	add	sp, #12
 80028f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80028f8:	4813      	ldr	r0, [pc, #76]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 80028fa:	2176      	movs	r1, #118	@ 0x76
 80028fc:	f001 fe7e 	bl	80045fc <assert_failed>
 8002900:	e5ce      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x20>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8002902:	21bc      	movs	r1, #188	@ 0xbc
 8002904:	4810      	ldr	r0, [pc, #64]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 8002906:	f001 fe79 	bl	80045fc <assert_failed>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800290a:	68a1      	ldr	r1, [r4, #8]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	e617      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        tickstart = HAL_GetTick();
 8002910:	f7fd fcce 	bl	80002b0 <HAL_GetTick>
 8002914:	f04f 0902 	mov.w	r9, #2
 8002918:	4607      	mov	r7, r0
 800291a:	fa99 f3a9 	rbit	r3, r9
 800291e:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002922:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8002926:	fa99 f3a9 	rbit	r3, r9
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	fa05 f303 	lsl.w	r3, r5, r3
 8002932:	4213      	tst	r3, r2
 8002934:	f47f adf1 	bne.w	800251a <HAL_RCCEx_PeriphCLKConfig+0x9a>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002938:	f7fd fcba 	bl	80002b0 <HAL_GetTick>
 800293c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002940:	1bc0      	subs	r0, r0, r7
 8002942:	4298      	cmp	r0, r3
 8002944:	d9e9      	bls.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8002946:	e7d3      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8002948:	080054ac 	.word	0x080054ac
 800294c:	40021000 	.word	0x40021000
 8002950:	40007000 	.word	0x40007000

08002954 <HAL_TIM_Base_Start>:
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002954:	4a32      	ldr	r2, [pc, #200]	@ (8002a20 <HAL_TIM_Base_Start+0xcc>)
 8002956:	6803      	ldr	r3, [r0, #0]
 8002958:	4293      	cmp	r3, r2
{
 800295a:	b510      	push	{r4, lr}
 800295c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800295e:	d02b      	beq.n	80029b8 <HAL_TIM_Base_Start+0x64>
 8002960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002964:	d028      	beq.n	80029b8 <HAL_TIM_Base_Start+0x64>
 8002966:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800296a:	4293      	cmp	r3, r2
 800296c:	d024      	beq.n	80029b8 <HAL_TIM_Base_Start+0x64>
 800296e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002972:	4293      	cmp	r3, r2
 8002974:	d020      	beq.n	80029b8 <HAL_TIM_Base_Start+0x64>
 8002976:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800297a:	4293      	cmp	r3, r2
 800297c:	d01c      	beq.n	80029b8 <HAL_TIM_Base_Start+0x64>
 800297e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002982:	4293      	cmp	r3, r2
 8002984:	d018      	beq.n	80029b8 <HAL_TIM_Base_Start+0x64>
 8002986:	f502 3290 	add.w	r2, r2, #73728	@ 0x12000
 800298a:	4293      	cmp	r3, r2
 800298c:	d014      	beq.n	80029b8 <HAL_TIM_Base_Start+0x64>
 800298e:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8002992:	4293      	cmp	r3, r2
 8002994:	d010      	beq.n	80029b8 <HAL_TIM_Base_Start+0x64>
 8002996:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800299a:	4293      	cmp	r3, r2
 800299c:	d00c      	beq.n	80029b8 <HAL_TIM_Base_Start+0x64>
 800299e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d008      	beq.n	80029b8 <HAL_TIM_Base_Start+0x64>
 80029a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d004      	beq.n	80029b8 <HAL_TIM_Base_Start+0x64>
 80029ae:	481d      	ldr	r0, [pc, #116]	@ (8002a24 <HAL_TIM_Base_Start+0xd0>)
 80029b0:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 80029b4:	f001 fe22 	bl	80045fc <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029b8:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d123      	bne.n	8002a08 <HAL_TIM_Base_Start+0xb4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c0:	6823      	ldr	r3, [r4, #0]
 80029c2:	4a17      	ldr	r2, [pc, #92]	@ (8002a20 <HAL_TIM_Base_Start+0xcc>)
  htim->State = HAL_TIM_STATE_BUSY;
 80029c4:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c6:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 80029c8:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029cc:	d01e      	beq.n	8002a0c <HAL_TIM_Base_Start+0xb8>
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d2:	d01b      	beq.n	8002a0c <HAL_TIM_Base_Start+0xb8>
 80029d4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80029d8:	4293      	cmp	r3, r2
 80029da:	d017      	beq.n	8002a0c <HAL_TIM_Base_Start+0xb8>
 80029dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d013      	beq.n	8002a0c <HAL_TIM_Base_Start+0xb8>
 80029e4:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00f      	beq.n	8002a0c <HAL_TIM_Base_Start+0xb8>
 80029ec:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d00b      	beq.n	8002a0c <HAL_TIM_Base_Start+0xb8>
 80029f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d007      	beq.n	8002a0c <HAL_TIM_Base_Start+0xb8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    {
      __HAL_TIM_ENABLE(htim);
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8002a04:	2000      	movs	r0, #0
}
 8002a06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a08:	2001      	movs	r0, #1
}
 8002a0a:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a0c:	6899      	ldr	r1, [r3, #8]
 8002a0e:	4a06      	ldr	r2, [pc, #24]	@ (8002a28 <HAL_TIM_Base_Start+0xd4>)
 8002a10:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a12:	2a06      	cmp	r2, #6
 8002a14:	d0f6      	beq.n	8002a04 <HAL_TIM_Base_Start+0xb0>
 8002a16:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8002a1a:	d1ef      	bne.n	80029fc <HAL_TIM_Base_Start+0xa8>
 8002a1c:	e7f2      	b.n	8002a04 <HAL_TIM_Base_Start+0xb0>
 8002a1e:	bf00      	nop
 8002a20:	40012c00 	.word	0x40012c00
 8002a24:	080054e8 	.word	0x080054e8
 8002a28:	00010007 	.word	0x00010007

08002a2c <HAL_TIM_OnePulse_MspInit>:
/**
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop

08002a30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a30:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a32:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	f000 8224 	beq.w	8002e84 <HAL_TIM_ConfigClockSource+0x454>

  htim->State = HAL_TIM_STATE_BUSY;
 8002a3c:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8002a48:	680b      	ldr	r3, [r1, #0]
 8002a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a4e:	4604      	mov	r4, r0
 8002a50:	460d      	mov	r5, r1
 8002a52:	f000 80b8 	beq.w	8002bc6 <HAL_TIM_ConfigClockSource+0x196>
 8002a56:	2b60      	cmp	r3, #96	@ 0x60
 8002a58:	f000 8253 	beq.w	8002f02 <HAL_TIM_ConfigClockSource+0x4d2>
 8002a5c:	d861      	bhi.n	8002b22 <HAL_TIM_ConfigClockSource+0xf2>
 8002a5e:	f023 0210 	bic.w	r2, r3, #16
 8002a62:	2a40      	cmp	r2, #64	@ 0x40
 8002a64:	f000 8189 	beq.w	8002d7a <HAL_TIM_ConfigClockSource+0x34a>
 8002a68:	f033 0230 	bics.w	r2, r3, #48	@ 0x30
 8002a6c:	f000 80e0 	beq.w	8002c30 <HAL_TIM_ConfigClockSource+0x200>
 8002a70:	4899      	ldr	r0, [pc, #612]	@ (8002cd8 <HAL_TIM_ConfigClockSource+0x2a8>)
 8002a72:	f241 5172 	movw	r1, #5490	@ 0x1572
 8002a76:	f001 fdc1 	bl	80045fc <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a7a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8002a7c:	682b      	ldr	r3, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002a7e:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a80:	4996      	ldr	r1, [pc, #600]	@ (8002cdc <HAL_TIM_ConfigClockSource+0x2ac>)
  switch (sClockSourceConfig->ClockSource)
 8002a82:	2b60      	cmp	r3, #96	@ 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a84:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 8002a88:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002a8a:	f040 8206 	bne.w	8002e9a <HAL_TIM_ConfigClockSource+0x46a>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002a8e:	4b94      	ldr	r3, [pc, #592]	@ (8002ce0 <HAL_TIM_ConfigClockSource+0x2b0>)
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d01b      	beq.n	8002acc <HAL_TIM_ConfigClockSource+0x9c>
 8002a94:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002a98:	d018      	beq.n	8002acc <HAL_TIM_ConfigClockSource+0x9c>
 8002a9a:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d014      	beq.n	8002acc <HAL_TIM_ConfigClockSource+0x9c>
 8002aa2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d010      	beq.n	8002acc <HAL_TIM_ConfigClockSource+0x9c>
 8002aaa:	f503 3396 	add.w	r3, r3, #76800	@ 0x12c00
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d00c      	beq.n	8002acc <HAL_TIM_ConfigClockSource+0x9c>
 8002ab2:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d008      	beq.n	8002acc <HAL_TIM_ConfigClockSource+0x9c>
 8002aba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d004      	beq.n	8002acc <HAL_TIM_ConfigClockSource+0x9c>
 8002ac2:	4885      	ldr	r0, [pc, #532]	@ (8002cd8 <HAL_TIM_ConfigClockSource+0x2a8>)
 8002ac4:	f241 51c1 	movw	r1, #5569	@ 0x15c1
 8002ac8:	f001 fd98 	bl	80045fc <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002acc:	686b      	ldr	r3, [r5, #4]
 8002ace:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ad2:	d009      	beq.n	8002ae8 <HAL_TIM_ConfigClockSource+0xb8>
 8002ad4:	f033 0202 	bics.w	r2, r3, #2
 8002ad8:	d006      	beq.n	8002ae8 <HAL_TIM_ConfigClockSource+0xb8>
 8002ada:	2b0a      	cmp	r3, #10
 8002adc:	d004      	beq.n	8002ae8 <HAL_TIM_ConfigClockSource+0xb8>
 8002ade:	487e      	ldr	r0, [pc, #504]	@ (8002cd8 <HAL_TIM_ConfigClockSource+0x2a8>)
 8002ae0:	f241 51c4 	movw	r1, #5572	@ 0x15c4
 8002ae4:	f001 fd8a 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002ae8:	68e8      	ldr	r0, [r5, #12]
 8002aea:	280f      	cmp	r0, #15
 8002aec:	f200 81fb 	bhi.w	8002ee6 <HAL_TIM_ConfigClockSource+0x4b6>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002af0:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8002af2:	6869      	ldr	r1, [r5, #4]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002af4:	6a1a      	ldr	r2, [r3, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002af6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002afa:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002afe:	6a19      	ldr	r1, [r3, #32]
 8002b00:	f021 0110 	bic.w	r1, r1, #16
 8002b04:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b06:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b08:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b0c:	ea41 3100 	orr.w	r1, r1, r0, lsl #12

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b10:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b12:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b14:	689a      	ldr	r2, [r3, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b16:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b1a:	f042 0267 	orr.w	r2, r2, #103	@ 0x67
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	e049      	b.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
 8002b22:	2b70      	cmp	r3, #112	@ 0x70
 8002b24:	f000 80de 	beq.w	8002ce4 <HAL_TIM_ConfigClockSource+0x2b4>
 8002b28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b2c:	d19c      	bne.n	8002a68 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = htim->Instance->SMCR;
 8002b2e:	6802      	ldr	r2, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b30:	4b6a      	ldr	r3, [pc, #424]	@ (8002cdc <HAL_TIM_ConfigClockSource+0x2ac>)
  tmpsmcr = htim->Instance->SMCR;
 8002b32:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b34:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 8002b36:	6093      	str	r3, [r2, #8]
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8002b38:	4b69      	ldr	r3, [pc, #420]	@ (8002ce0 <HAL_TIM_ConfigClockSource+0x2b0>)
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d017      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x13e>
 8002b3e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002b42:	d014      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x13e>
 8002b44:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d010      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x13e>
 8002b4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d00c      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x13e>
 8002b54:	f503 3396 	add.w	r3, r3, #76800	@ 0x12c00
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d008      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x13e>
 8002b5c:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d004      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x13e>
 8002b64:	485c      	ldr	r0, [pc, #368]	@ (8002cd8 <HAL_TIM_ConfigClockSource+0x2a8>)
 8002b66:	f241 519d 	movw	r1, #5533	@ 0x159d
 8002b6a:	f001 fd47 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002b6e:	68ab      	ldr	r3, [r5, #8]
 8002b70:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
 8002b74:	d004      	beq.n	8002b80 <HAL_TIM_ConfigClockSource+0x150>
 8002b76:	4858      	ldr	r0, [pc, #352]	@ (8002cd8 <HAL_TIM_ConfigClockSource+0x2a8>)
 8002b78:	f44f 51ad 	mov.w	r1, #5536	@ 0x15a0
 8002b7c:	f001 fd3e 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002b80:	686b      	ldr	r3, [r5, #4]
 8002b82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b86:	d003      	beq.n	8002b90 <HAL_TIM_ConfigClockSource+0x160>
 8002b88:	f033 0202 	bics.w	r2, r3, #2
 8002b8c:	f040 817c 	bne.w	8002e88 <HAL_TIM_ConfigClockSource+0x458>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002b90:	68e8      	ldr	r0, [r5, #12]
 8002b92:	280f      	cmp	r0, #15
 8002b94:	f200 8192 	bhi.w	8002ebc <HAL_TIM_ConfigClockSource+0x48c>
      TIM_ETR_SetConfig(htim->Instance,
 8002b98:	6822      	ldr	r2, [r4, #0]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b9a:	e9d5 5301 	ldrd	r5, r3, [r5, #4]
 8002b9e:	6891      	ldr	r1, [r2, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ba0:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ba2:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
 8002ba6:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ba8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bac:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bae:	6893      	ldr	r3, [r2, #8]
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bb4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002bb8:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8002bba:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002bbc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002bc0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002bc4:	bd38      	pop	{r3, r4, r5, pc}
  tmpsmcr = htim->Instance->SMCR;
 8002bc6:	6802      	ldr	r2, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc8:	4b44      	ldr	r3, [pc, #272]	@ (8002cdc <HAL_TIM_ConfigClockSource+0x2ac>)
  tmpsmcr = htim->Instance->SMCR;
 8002bca:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bcc:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 8002bce:	6093      	str	r3, [r2, #8]
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002bd0:	4b43      	ldr	r3, [pc, #268]	@ (8002ce0 <HAL_TIM_ConfigClockSource+0x2b0>)
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d0ef      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
 8002bd6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002bda:	d0ec      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
 8002bdc:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d0e8      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
 8002be4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d0e4      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
 8002bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d0e0      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
 8002bf4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d0dc      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
 8002bfc:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d0d8      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
 8002c04:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d0d4      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
 8002c0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d0d0      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
 8002c14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d0cc      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
 8002c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d0c8      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
 8002c24:	482c      	ldr	r0, [pc, #176]	@ (8002cd8 <HAL_TIM_ConfigClockSource+0x2a8>)
 8002c26:	f241 517e 	movw	r1, #5502	@ 0x157e
 8002c2a:	f001 fce7 	bl	80045fc <assert_failed>
 8002c2e:	e7c2      	b.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
  tmpsmcr = htim->Instance->SMCR;
 8002c30:	6822      	ldr	r2, [r4, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c32:	492a      	ldr	r1, [pc, #168]	@ (8002cdc <HAL_TIM_ConfigClockSource+0x2ac>)
  tmpsmcr = htim->Instance->SMCR;
 8002c34:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c36:	4001      	ands	r1, r0
  htim->Instance->SMCR = tmpsmcr;
 8002c38:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002c3a:	2b40      	cmp	r3, #64	@ 0x40
 8002c3c:	f240 80ef 	bls.w	8002e1e <HAL_TIM_ConfigClockSource+0x3ee>
 8002c40:	2b50      	cmp	r3, #80	@ 0x50
 8002c42:	f040 811d 	bne.w	8002e80 <HAL_TIM_ConfigClockSource+0x450>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002c46:	4b26      	ldr	r3, [pc, #152]	@ (8002ce0 <HAL_TIM_ConfigClockSource+0x2b0>)
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d01b      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0x254>
 8002c4c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002c50:	d018      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0x254>
 8002c52:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d014      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0x254>
 8002c5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d010      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0x254>
 8002c62:	f503 3396 	add.w	r3, r3, #76800	@ 0x12c00
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d00c      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0x254>
 8002c6a:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d008      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0x254>
 8002c72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d004      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0x254>
 8002c7a:	4817      	ldr	r0, [pc, #92]	@ (8002cd8 <HAL_TIM_ConfigClockSource+0x2a8>)
 8002c7c:	f241 51b1 	movw	r1, #5553	@ 0x15b1
 8002c80:	f001 fcbc 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002c84:	686b      	ldr	r3, [r5, #4]
 8002c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c8a:	d009      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0x270>
 8002c8c:	f033 0202 	bics.w	r2, r3, #2
 8002c90:	d006      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0x270>
 8002c92:	2b0a      	cmp	r3, #10
 8002c94:	d004      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0x270>
 8002c96:	4810      	ldr	r0, [pc, #64]	@ (8002cd8 <HAL_TIM_ConfigClockSource+0x2a8>)
 8002c98:	f241 51b4 	movw	r1, #5556	@ 0x15b4
 8002c9c:	f001 fcae 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002ca0:	68e8      	ldr	r0, [r5, #12]
 8002ca2:	280f      	cmp	r0, #15
 8002ca4:	f200 8118 	bhi.w	8002ed8 <HAL_TIM_ConfigClockSource+0x4a8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca8:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8002caa:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8002cac:	6a1a      	ldr	r2, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cae:	f022 020a 	bic.w	r2, r2, #10
  tmpccer |= TIM_ICPolarity;
 8002cb2:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb4:	6a1a      	ldr	r2, [r3, #32]
 8002cb6:	f022 0201 	bic.w	r2, r2, #1
 8002cba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cbc:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cbe:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cc2:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cc8:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8002cca:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ccc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cd0:	f042 0257 	orr.w	r2, r2, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8002cd4:	609a      	str	r2, [r3, #8]
}
 8002cd6:	e76e      	b.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
 8002cd8:	080054e8 	.word	0x080054e8
 8002cdc:	fffe0088 	.word	0xfffe0088
 8002ce0:	40012c00 	.word	0x40012c00
  tmpsmcr = htim->Instance->SMCR;
 8002ce4:	6802      	ldr	r2, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce6:	4b8a      	ldr	r3, [pc, #552]	@ (8002f10 <HAL_TIM_ConfigClockSource+0x4e0>)
  tmpsmcr = htim->Instance->SMCR;
 8002ce8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cea:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 8002cec:	6093      	str	r3, [r2, #8]
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8002cee:	4b89      	ldr	r3, [pc, #548]	@ (8002f14 <HAL_TIM_ConfigClockSource+0x4e4>)
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d017      	beq.n	8002d24 <HAL_TIM_ConfigClockSource+0x2f4>
 8002cf4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002cf8:	d014      	beq.n	8002d24 <HAL_TIM_ConfigClockSource+0x2f4>
 8002cfa:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d010      	beq.n	8002d24 <HAL_TIM_ConfigClockSource+0x2f4>
 8002d02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d00c      	beq.n	8002d24 <HAL_TIM_ConfigClockSource+0x2f4>
 8002d0a:	f503 3396 	add.w	r3, r3, #76800	@ 0x12c00
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d008      	beq.n	8002d24 <HAL_TIM_ConfigClockSource+0x2f4>
 8002d12:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d004      	beq.n	8002d24 <HAL_TIM_ConfigClockSource+0x2f4>
 8002d1a:	487f      	ldr	r0, [pc, #508]	@ (8002f18 <HAL_TIM_ConfigClockSource+0x4e8>)
 8002d1c:	f241 5185 	movw	r1, #5509	@ 0x1585
 8002d20:	f001 fc6c 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002d24:	68ab      	ldr	r3, [r5, #8]
 8002d26:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
 8002d2a:	d004      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x306>
 8002d2c:	487a      	ldr	r0, [pc, #488]	@ (8002f18 <HAL_TIM_ConfigClockSource+0x4e8>)
 8002d2e:	f241 5188 	movw	r1, #5512	@ 0x1588
 8002d32:	f001 fc63 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002d36:	686b      	ldr	r3, [r5, #4]
 8002d38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d3c:	d009      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x322>
 8002d3e:	f033 0202 	bics.w	r2, r3, #2
 8002d42:	d006      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x322>
 8002d44:	2b0a      	cmp	r3, #10
 8002d46:	d004      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x322>
 8002d48:	4873      	ldr	r0, [pc, #460]	@ (8002f18 <HAL_TIM_ConfigClockSource+0x4e8>)
 8002d4a:	f241 5189 	movw	r1, #5513	@ 0x1589
 8002d4e:	f001 fc55 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002d52:	68e8      	ldr	r0, [r5, #12]
 8002d54:	280f      	cmp	r0, #15
 8002d56:	f200 80b8 	bhi.w	8002eca <HAL_TIM_ConfigClockSource+0x49a>
      TIM_ETR_SetConfig(htim->Instance,
 8002d5a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002d5c:	e9d5 5301 	ldrd	r5, r3, [r5, #4]
 8002d60:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d62:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d64:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
 8002d68:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d6a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 8002d6e:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002d70:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d72:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002d76:	6093      	str	r3, [r2, #8]
      break;
 8002d78:	e71d      	b.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
  tmpsmcr = htim->Instance->SMCR;
 8002d7a:	6802      	ldr	r2, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d7c:	4964      	ldr	r1, [pc, #400]	@ (8002f10 <HAL_TIM_ConfigClockSource+0x4e0>)
  tmpsmcr = htim->Instance->SMCR;
 8002d7e:	6890      	ldr	r0, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002d80:	2b40      	cmp	r3, #64	@ 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d82:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 8002d86:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002d88:	f47f af5a 	bne.w	8002c40 <HAL_TIM_ConfigClockSource+0x210>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002d8c:	4b61      	ldr	r3, [pc, #388]	@ (8002f14 <HAL_TIM_ConfigClockSource+0x4e4>)
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d01b      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x39a>
 8002d92:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002d96:	d018      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x39a>
 8002d98:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d014      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x39a>
 8002da0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d010      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x39a>
 8002da8:	f503 3396 	add.w	r3, r3, #76800	@ 0x12c00
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d00c      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x39a>
 8002db0:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d008      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x39a>
 8002db8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d004      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x39a>
 8002dc0:	4855      	ldr	r0, [pc, #340]	@ (8002f18 <HAL_TIM_ConfigClockSource+0x4e8>)
 8002dc2:	f241 51d1 	movw	r1, #5585	@ 0x15d1
 8002dc6:	f001 fc19 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002dca:	686b      	ldr	r3, [r5, #4]
 8002dcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dd0:	d009      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x3b6>
 8002dd2:	f033 0202 	bics.w	r2, r3, #2
 8002dd6:	d006      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x3b6>
 8002dd8:	2b0a      	cmp	r3, #10
 8002dda:	d004      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x3b6>
 8002ddc:	484e      	ldr	r0, [pc, #312]	@ (8002f18 <HAL_TIM_ConfigClockSource+0x4e8>)
 8002dde:	f241 51d4 	movw	r1, #5588	@ 0x15d4
 8002de2:	f001 fc0b 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002de6:	68e8      	ldr	r0, [r5, #12]
 8002de8:	280f      	cmp	r0, #15
 8002dea:	f200 8083 	bhi.w	8002ef4 <HAL_TIM_ConfigClockSource+0x4c4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dee:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8002df0:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8002df2:	6a1a      	ldr	r2, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002df4:	f022 020a 	bic.w	r2, r2, #10
  tmpccer |= TIM_ICPolarity;
 8002df8:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dfa:	6a1a      	ldr	r2, [r3, #32]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e02:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e04:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e08:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002e0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e0e:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8002e10:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e12:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e16:	f042 0247 	orr.w	r2, r2, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8002e1a:	609a      	str	r2, [r3, #8]
}
 8002e1c:	e6cb      	b.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
  switch (sClockSourceConfig->ClockSource)
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d002      	beq.n	8002e28 <HAL_TIM_ConfigClockSource+0x3f8>
 8002e22:	d92a      	bls.n	8002e7a <HAL_TIM_ConfigClockSource+0x44a>
 8002e24:	2b30      	cmp	r3, #48	@ 0x30
 8002e26:	d12b      	bne.n	8002e80 <HAL_TIM_ConfigClockSource+0x450>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8002e28:	493a      	ldr	r1, [pc, #232]	@ (8002f14 <HAL_TIM_ConfigClockSource+0x4e4>)
 8002e2a:	428a      	cmp	r2, r1
 8002e2c:	d01d      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x43a>
 8002e2e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002e32:	d01a      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x43a>
 8002e34:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 8002e38:	428a      	cmp	r2, r1
 8002e3a:	d016      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x43a>
 8002e3c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8002e40:	428a      	cmp	r2, r1
 8002e42:	d012      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x43a>
 8002e44:	f501 3196 	add.w	r1, r1, #76800	@ 0x12c00
 8002e48:	428a      	cmp	r2, r1
 8002e4a:	d00e      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x43a>
 8002e4c:	f501 6140 	add.w	r1, r1, #3072	@ 0xc00
 8002e50:	428a      	cmp	r2, r1
 8002e52:	d00a      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x43a>
 8002e54:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8002e58:	428a      	cmp	r2, r1
 8002e5a:	d006      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x43a>
 8002e5c:	482e      	ldr	r0, [pc, #184]	@ (8002f18 <HAL_TIM_ConfigClockSource+0x4e8>)
 8002e5e:	f241 51e4 	movw	r1, #5604	@ 0x15e4
 8002e62:	f001 fbcb 	bl	80045fc <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e66:	6822      	ldr	r2, [r4, #0]
 8002e68:	682b      	ldr	r3, [r5, #0]
  tmpsmcr = TIMx->SMCR;
 8002e6a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e6c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e70:	430b      	orrs	r3, r1
 8002e72:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8002e76:	6093      	str	r3, [r2, #8]
}
 8002e78:	e69d      	b.n	8002bb6 <HAL_TIM_ConfigClockSource+0x186>
  switch (sClockSourceConfig->ClockSource)
 8002e7a:	f033 0110 	bics.w	r1, r3, #16
 8002e7e:	d0d3      	beq.n	8002e28 <HAL_TIM_ConfigClockSource+0x3f8>
  HAL_StatusTypeDef status = HAL_OK;
 8002e80:	2001      	movs	r0, #1
 8002e82:	e699      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x188>
  __HAL_LOCK(htim);
 8002e84:	2002      	movs	r0, #2
}
 8002e86:	bd38      	pop	{r3, r4, r5, pc}
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002e88:	2b0a      	cmp	r3, #10
 8002e8a:	f43f ae81 	beq.w	8002b90 <HAL_TIM_ConfigClockSource+0x160>
 8002e8e:	4822      	ldr	r0, [pc, #136]	@ (8002f18 <HAL_TIM_ConfigClockSource+0x4e8>)
 8002e90:	f241 51a1 	movw	r1, #5537	@ 0x15a1
 8002e94:	f001 fbb2 	bl	80045fc <assert_failed>
 8002e98:	e67a      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x160>
  switch (sClockSourceConfig->ClockSource)
 8002e9a:	d803      	bhi.n	8002ea4 <HAL_TIM_ConfigClockSource+0x474>
 8002e9c:	2b40      	cmp	r3, #64	@ 0x40
 8002e9e:	f47f aecc 	bne.w	8002c3a <HAL_TIM_ConfigClockSource+0x20a>
 8002ea2:	e773      	b.n	8002d8c <HAL_TIM_ConfigClockSource+0x35c>
 8002ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ea8:	f43f ae92 	beq.w	8002bd0 <HAL_TIM_ConfigClockSource+0x1a0>
 8002eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eb0:	f43f ae42 	beq.w	8002b38 <HAL_TIM_ConfigClockSource+0x108>
 8002eb4:	2b70      	cmp	r3, #112	@ 0x70
 8002eb6:	f43f af1a 	beq.w	8002cee <HAL_TIM_ConfigClockSource+0x2be>
 8002eba:	e7e1      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x450>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002ebc:	4816      	ldr	r0, [pc, #88]	@ (8002f18 <HAL_TIM_ConfigClockSource+0x4e8>)
 8002ebe:	f241 51a2 	movw	r1, #5538	@ 0x15a2
 8002ec2:	f001 fb9b 	bl	80045fc <assert_failed>
                        sClockSourceConfig->ClockFilter);
 8002ec6:	68e8      	ldr	r0, [r5, #12]
 8002ec8:	e666      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x168>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002eca:	4813      	ldr	r0, [pc, #76]	@ (8002f18 <HAL_TIM_ConfigClockSource+0x4e8>)
 8002ecc:	f241 518a 	movw	r1, #5514	@ 0x158a
 8002ed0:	f001 fb94 	bl	80045fc <assert_failed>
                        sClockSourceConfig->ClockFilter);
 8002ed4:	68e8      	ldr	r0, [r5, #12]
 8002ed6:	e740      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x32a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002ed8:	480f      	ldr	r0, [pc, #60]	@ (8002f18 <HAL_TIM_ConfigClockSource+0x4e8>)
 8002eda:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 8002ede:	f001 fb8d 	bl	80045fc <assert_failed>
                               sClockSourceConfig->ClockFilter);
 8002ee2:	68e8      	ldr	r0, [r5, #12]
 8002ee4:	e6e0      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x278>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002ee6:	480c      	ldr	r0, [pc, #48]	@ (8002f18 <HAL_TIM_ConfigClockSource+0x4e8>)
 8002ee8:	f241 51c5 	movw	r1, #5573	@ 0x15c5
 8002eec:	f001 fb86 	bl	80045fc <assert_failed>
                               sClockSourceConfig->ClockFilter);
 8002ef0:	68e8      	ldr	r0, [r5, #12]
 8002ef2:	e5fd      	b.n	8002af0 <HAL_TIM_ConfigClockSource+0xc0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002ef4:	4808      	ldr	r0, [pc, #32]	@ (8002f18 <HAL_TIM_ConfigClockSource+0x4e8>)
 8002ef6:	f241 51d5 	movw	r1, #5589	@ 0x15d5
 8002efa:	f001 fb7f 	bl	80045fc <assert_failed>
                               sClockSourceConfig->ClockFilter);
 8002efe:	68e8      	ldr	r0, [r5, #12]
 8002f00:	e775      	b.n	8002dee <HAL_TIM_ConfigClockSource+0x3be>
  tmpsmcr = htim->Instance->SMCR;
 8002f02:	6802      	ldr	r2, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f04:	4b02      	ldr	r3, [pc, #8]	@ (8002f10 <HAL_TIM_ConfigClockSource+0x4e0>)
  tmpsmcr = htim->Instance->SMCR;
 8002f06:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f08:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 8002f0a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002f0c:	e5bf      	b.n	8002a8e <HAL_TIM_ConfigClockSource+0x5e>
 8002f0e:	bf00      	nop
 8002f10:	fffe0088 	.word	0xfffe0088
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	080054e8 	.word	0x080054e8

08002f1c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f1c:	4a3b      	ldr	r2, [pc, #236]	@ (800300c <TIM_Base_SetConfig+0xf0>)
  tmpcr1 = TIMx->CR1;
 8002f1e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f20:	4290      	cmp	r0, r2
{
 8002f22:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f24:	d039      	beq.n	8002f9a <TIM_Base_SetConfig+0x7e>
 8002f26:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002f2a:	d019      	beq.n	8002f60 <TIM_Base_SetConfig+0x44>
 8002f2c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002f30:	4290      	cmp	r0, r2
 8002f32:	d015      	beq.n	8002f60 <TIM_Base_SetConfig+0x44>
 8002f34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f38:	4290      	cmp	r0, r2
 8002f3a:	d011      	beq.n	8002f60 <TIM_Base_SetConfig+0x44>
 8002f3c:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8002f40:	4290      	cmp	r0, r2
 8002f42:	d03e      	beq.n	8002fc2 <TIM_Base_SetConfig+0xa6>
 8002f44:	f502 52e0 	add.w	r2, r2, #7168	@ 0x1c00
 8002f48:	4290      	cmp	r0, r2
 8002f4a:	d03a      	beq.n	8002fc2 <TIM_Base_SetConfig+0xa6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f4c:	f5a2 5280 	sub.w	r2, r2, #4096	@ 0x1000
 8002f50:	4290      	cmp	r0, r2
 8002f52:	d13b      	bne.n	8002fcc <TIM_Base_SetConfig+0xb0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f54:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f56:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f5c:	4323      	orrs	r3, r4
 8002f5e:	e025      	b.n	8002fac <TIM_Base_SetConfig+0x90>
    tmpcr1 |= Structure->CounterMode;
 8002f60:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f62:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f68:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f6e:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f70:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f76:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f78:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8002f7a:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8002f7c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f7e:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002f80:	6282      	str	r2, [r0, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002f82:	2301      	movs	r3, #1
 8002f84:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f86:	6903      	ldr	r3, [r0, #16]
 8002f88:	07db      	lsls	r3, r3, #31
 8002f8a:	d503      	bpl.n	8002f94 <TIM_Base_SetConfig+0x78>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f8c:	6903      	ldr	r3, [r0, #16]
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	6103      	str	r3, [r0, #16]
}
 8002f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f98:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f9a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f9c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002fa2:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fa8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002faa:	694a      	ldr	r2, [r1, #20]
 8002fac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fb0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002fb2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb4:	688b      	ldr	r3, [r1, #8]
 8002fb6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002fb8:	680b      	ldr	r3, [r1, #0]
 8002fba:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002fbc:	690b      	ldr	r3, [r1, #16]
 8002fbe:	6303      	str	r3, [r0, #48]	@ 0x30
 8002fc0:	e7df      	b.n	8002f82 <TIM_Base_SetConfig+0x66>
    tmpcr1 |= Structure->CounterMode;
 8002fc2:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fc4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002fca:	e7ea      	b.n	8002fa2 <TIM_Base_SetConfig+0x86>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fcc:	4a10      	ldr	r2, [pc, #64]	@ (8003010 <TIM_Base_SetConfig+0xf4>)
 8002fce:	4290      	cmp	r0, r2
 8002fd0:	d00d      	beq.n	8002fee <TIM_Base_SetConfig+0xd2>
 8002fd2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002fd6:	4290      	cmp	r0, r2
 8002fd8:	d009      	beq.n	8002fee <TIM_Base_SetConfig+0xd2>
  TIMx->PSC = Structure->Prescaler;
 8002fda:	680a      	ldr	r2, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fdc:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fde:	6949      	ldr	r1, [r1, #20]
 8002fe0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fe4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002fe6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe8:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002fea:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fec:	e7c9      	b.n	8002f82 <TIM_Base_SetConfig+0x66>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fee:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff0:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ff2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ffc:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ffe:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8003000:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8003002:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003004:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003006:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003008:	e7d8      	b.n	8002fbc <TIM_Base_SetConfig+0xa0>
 800300a:	bf00      	nop
 800300c:	40012c00 	.word	0x40012c00
 8003010:	40014400 	.word	0x40014400

08003014 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003014:	2800      	cmp	r0, #0
 8003016:	f000 80a5 	beq.w	8003164 <HAL_TIM_Base_Init+0x150>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800301a:	6803      	ldr	r3, [r0, #0]
 800301c:	4a52      	ldr	r2, [pc, #328]	@ (8003168 <HAL_TIM_Base_Init+0x154>)
 800301e:	4293      	cmp	r3, r2
{
 8003020:	b510      	push	{r4, lr}
 8003022:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003024:	d02b      	beq.n	800307e <HAL_TIM_Base_Init+0x6a>
 8003026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800302a:	d028      	beq.n	800307e <HAL_TIM_Base_Init+0x6a>
 800302c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003030:	4293      	cmp	r3, r2
 8003032:	d024      	beq.n	800307e <HAL_TIM_Base_Init+0x6a>
 8003034:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003038:	4293      	cmp	r3, r2
 800303a:	d020      	beq.n	800307e <HAL_TIM_Base_Init+0x6a>
 800303c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003040:	4293      	cmp	r3, r2
 8003042:	d01c      	beq.n	800307e <HAL_TIM_Base_Init+0x6a>
 8003044:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003048:	4293      	cmp	r3, r2
 800304a:	d018      	beq.n	800307e <HAL_TIM_Base_Init+0x6a>
 800304c:	f502 3290 	add.w	r2, r2, #73728	@ 0x12000
 8003050:	4293      	cmp	r3, r2
 8003052:	d014      	beq.n	800307e <HAL_TIM_Base_Init+0x6a>
 8003054:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8003058:	4293      	cmp	r3, r2
 800305a:	d010      	beq.n	800307e <HAL_TIM_Base_Init+0x6a>
 800305c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003060:	4293      	cmp	r3, r2
 8003062:	d00c      	beq.n	800307e <HAL_TIM_Base_Init+0x6a>
 8003064:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003068:	4293      	cmp	r3, r2
 800306a:	d008      	beq.n	800307e <HAL_TIM_Base_Init+0x6a>
 800306c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003070:	4293      	cmp	r3, r2
 8003072:	d004      	beq.n	800307e <HAL_TIM_Base_Init+0x6a>
 8003074:	483d      	ldr	r0, [pc, #244]	@ (800316c <HAL_TIM_Base_Init+0x158>)
 8003076:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800307a:	f001 fabf 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800307e:	68a3      	ldr	r3, [r4, #8]
 8003080:	f033 0210 	bics.w	r2, r3, #16
 8003084:	d00a      	beq.n	800309c <HAL_TIM_Base_Init+0x88>
 8003086:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800308a:	2a20      	cmp	r2, #32
 800308c:	d006      	beq.n	800309c <HAL_TIM_Base_Init+0x88>
 800308e:	2b40      	cmp	r3, #64	@ 0x40
 8003090:	d004      	beq.n	800309c <HAL_TIM_Base_Init+0x88>
 8003092:	4836      	ldr	r0, [pc, #216]	@ (800316c <HAL_TIM_Base_Init+0x158>)
 8003094:	f240 111b 	movw	r1, #283	@ 0x11b
 8003098:	f001 fab0 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800309c:	6923      	ldr	r3, [r4, #16]
 800309e:	f433 7280 	bics.w	r2, r3, #256	@ 0x100
 80030a2:	d136      	bne.n	8003112 <HAL_TIM_Base_Init+0xfe>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80030a4:	6822      	ldr	r2, [r4, #0]
 80030a6:	68e3      	ldr	r3, [r4, #12]
 80030a8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80030ac:	d03e      	beq.n	800312c <HAL_TIM_Base_Init+0x118>
 80030ae:	3b01      	subs	r3, #1
 80030b0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d83b      	bhi.n	8003130 <HAL_TIM_Base_Init+0x11c>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80030b8:	69a3      	ldr	r3, [r4, #24]
 80030ba:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 80030be:	d140      	bne.n	8003142 <HAL_TIM_Base_Init+0x12e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80030c0:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80030c4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d045      	beq.n	8003158 <HAL_TIM_Base_Init+0x144>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030cc:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80030ce:	2302      	movs	r3, #2
 80030d0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d4:	f851 0b04 	ldr.w	r0, [r1], #4
 80030d8:	f7ff ff20 	bl	8002f1c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030dc:	2301      	movs	r3, #1
 80030de:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80030e6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80030ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80030ee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80030f2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80030f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80030fe:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003102:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8003106:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800310a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800310e:	2000      	movs	r0, #0
}
 8003110:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003116:	d0c5      	beq.n	80030a4 <HAL_TIM_Base_Init+0x90>
 8003118:	4814      	ldr	r0, [pc, #80]	@ (800316c <HAL_TIM_Base_Init+0x158>)
 800311a:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800311e:	f001 fa6d 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8003122:	6822      	ldr	r2, [r4, #0]
 8003124:	68e3      	ldr	r3, [r4, #12]
 8003126:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800312a:	d1c0      	bne.n	80030ae <HAL_TIM_Base_Init+0x9a>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1c3      	bne.n	80030b8 <HAL_TIM_Base_Init+0xa4>
 8003130:	480e      	ldr	r0, [pc, #56]	@ (800316c <HAL_TIM_Base_Init+0x158>)
 8003132:	f240 111d 	movw	r1, #285	@ 0x11d
 8003136:	f001 fa61 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800313a:	69a3      	ldr	r3, [r4, #24]
 800313c:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 8003140:	d0be      	beq.n	80030c0 <HAL_TIM_Base_Init+0xac>
 8003142:	480a      	ldr	r0, [pc, #40]	@ (800316c <HAL_TIM_Base_Init+0x158>)
 8003144:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8003148:	f001 fa58 	bl	80045fc <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800314c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003150:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1b9      	bne.n	80030cc <HAL_TIM_Base_Init+0xb8>
    htim->Lock = HAL_UNLOCKED;
 8003158:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800315c:	4620      	mov	r0, r4
 800315e:	f001 fbc3 	bl	80048e8 <HAL_TIM_Base_MspInit>
 8003162:	e7b3      	b.n	80030cc <HAL_TIM_Base_Init+0xb8>
    return HAL_ERROR;
 8003164:	2001      	movs	r0, #1
}
 8003166:	4770      	bx	lr
 8003168:	40012c00 	.word	0x40012c00
 800316c:	080054e8 	.word	0x080054e8

08003170 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 8003170:	2800      	cmp	r0, #0
 8003172:	f000 80a5 	beq.w	80032c0 <HAL_TIM_OnePulse_Init+0x150>
{
 8003176:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003178:	4a52      	ldr	r2, [pc, #328]	@ (80032c4 <HAL_TIM_OnePulse_Init+0x154>)
 800317a:	6803      	ldr	r3, [r0, #0]
 800317c:	4293      	cmp	r3, r2
 800317e:	460d      	mov	r5, r1
 8003180:	4604      	mov	r4, r0
 8003182:	d02b      	beq.n	80031dc <HAL_TIM_OnePulse_Init+0x6c>
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003188:	d028      	beq.n	80031dc <HAL_TIM_OnePulse_Init+0x6c>
 800318a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800318e:	4293      	cmp	r3, r2
 8003190:	d024      	beq.n	80031dc <HAL_TIM_OnePulse_Init+0x6c>
 8003192:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003196:	4293      	cmp	r3, r2
 8003198:	d020      	beq.n	80031dc <HAL_TIM_OnePulse_Init+0x6c>
 800319a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01c      	beq.n	80031dc <HAL_TIM_OnePulse_Init+0x6c>
 80031a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d018      	beq.n	80031dc <HAL_TIM_OnePulse_Init+0x6c>
 80031aa:	f502 3290 	add.w	r2, r2, #73728	@ 0x12000
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d014      	beq.n	80031dc <HAL_TIM_OnePulse_Init+0x6c>
 80031b2:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d010      	beq.n	80031dc <HAL_TIM_OnePulse_Init+0x6c>
 80031ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00c      	beq.n	80031dc <HAL_TIM_OnePulse_Init+0x6c>
 80031c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d008      	beq.n	80031dc <HAL_TIM_OnePulse_Init+0x6c>
 80031ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d004      	beq.n	80031dc <HAL_TIM_OnePulse_Init+0x6c>
 80031d2:	483d      	ldr	r0, [pc, #244]	@ (80032c8 <HAL_TIM_OnePulse_Init+0x158>)
 80031d4:	f44f 6126 	mov.w	r1, #2656	@ 0xa60
 80031d8:	f001 fa10 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80031dc:	68a3      	ldr	r3, [r4, #8]
 80031de:	f033 0210 	bics.w	r2, r3, #16
 80031e2:	d00a      	beq.n	80031fa <HAL_TIM_OnePulse_Init+0x8a>
 80031e4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80031e8:	2a20      	cmp	r2, #32
 80031ea:	d006      	beq.n	80031fa <HAL_TIM_OnePulse_Init+0x8a>
 80031ec:	2b40      	cmp	r3, #64	@ 0x40
 80031ee:	d004      	beq.n	80031fa <HAL_TIM_OnePulse_Init+0x8a>
 80031f0:	4835      	ldr	r0, [pc, #212]	@ (80032c8 <HAL_TIM_OnePulse_Init+0x158>)
 80031f2:	f640 2161 	movw	r1, #2657	@ 0xa61
 80031f6:	f001 fa01 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80031fa:	6923      	ldr	r3, [r4, #16]
 80031fc:	f433 7280 	bics.w	r2, r3, #256	@ 0x100
 8003200:	d138      	bne.n	8003274 <HAL_TIM_OnePulse_Init+0x104>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 8003202:	f035 0308 	bics.w	r3, r5, #8
 8003206:	d004      	beq.n	8003212 <HAL_TIM_OnePulse_Init+0xa2>
 8003208:	482f      	ldr	r0, [pc, #188]	@ (80032c8 <HAL_TIM_OnePulse_Init+0x158>)
 800320a:	f640 2163 	movw	r1, #2659	@ 0xa63
 800320e:	f001 f9f5 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8003212:	6822      	ldr	r2, [r4, #0]
 8003214:	68e3      	ldr	r3, [r4, #12]
 8003216:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800321a:	d045      	beq.n	80032a8 <HAL_TIM_OnePulse_Init+0x138>
 800321c:	3b01      	subs	r3, #1
 800321e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003222:	4293      	cmp	r3, r2
 8003224:	d842      	bhi.n	80032ac <HAL_TIM_OnePulse_Init+0x13c>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003226:	69a3      	ldr	r3, [r4, #24]
 8003228:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 800322c:	d12b      	bne.n	8003286 <HAL_TIM_OnePulse_Init+0x116>
  if (htim->State == HAL_TIM_STATE_RESET)
 800322e:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003232:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003236:	b38b      	cbz	r3, 800329c <HAL_TIM_OnePulse_Init+0x12c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003238:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800323a:	2302      	movs	r3, #2
 800323c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003240:	f851 0b04 	ldr.w	r0, [r1], #4
 8003244:	f7ff fe6a 	bl	8002f1c <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003248:	6802      	ldr	r2, [r0, #0]
 800324a:	f022 0208 	bic.w	r2, r2, #8
 800324e:	6002      	str	r2, [r0, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8003250:	6802      	ldr	r2, [r0, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003252:	2301      	movs	r3, #1
  htim->Instance->CR1 |= OnePulseMode;
 8003254:	432a      	orrs	r2, r5
 8003256:	6002      	str	r2, [r0, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003258:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800325c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003260:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003264:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003268:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800326c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003270:	2000      	movs	r0, #0
}
 8003272:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003278:	d0c3      	beq.n	8003202 <HAL_TIM_OnePulse_Init+0x92>
 800327a:	4813      	ldr	r0, [pc, #76]	@ (80032c8 <HAL_TIM_OnePulse_Init+0x158>)
 800327c:	f640 2162 	movw	r1, #2658	@ 0xa62
 8003280:	f001 f9bc 	bl	80045fc <assert_failed>
 8003284:	e7bd      	b.n	8003202 <HAL_TIM_OnePulse_Init+0x92>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003286:	4810      	ldr	r0, [pc, #64]	@ (80032c8 <HAL_TIM_OnePulse_Init+0x158>)
 8003288:	f640 2165 	movw	r1, #2661	@ 0xa65
 800328c:	f001 f9b6 	bl	80045fc <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003290:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003294:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1cd      	bne.n	8003238 <HAL_TIM_OnePulse_Init+0xc8>
    htim->Lock = HAL_UNLOCKED;
 800329c:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 80032a0:	4620      	mov	r0, r4
 80032a2:	f7ff fbc3 	bl	8002a2c <HAL_TIM_OnePulse_MspInit>
 80032a6:	e7c7      	b.n	8003238 <HAL_TIM_OnePulse_Init+0xc8>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1bc      	bne.n	8003226 <HAL_TIM_OnePulse_Init+0xb6>
 80032ac:	4806      	ldr	r0, [pc, #24]	@ (80032c8 <HAL_TIM_OnePulse_Init+0x158>)
 80032ae:	f640 2164 	movw	r1, #2660	@ 0xa64
 80032b2:	f001 f9a3 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80032b6:	69a3      	ldr	r3, [r4, #24]
 80032b8:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 80032bc:	d0b7      	beq.n	800322e <HAL_TIM_OnePulse_Init+0xbe>
 80032be:	e7e2      	b.n	8003286 <HAL_TIM_OnePulse_Init+0x116>
    return HAL_ERROR;
 80032c0:	2001      	movs	r0, #1
}
 80032c2:	4770      	bx	lr
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	080054e8 	.word	0x080054e8

080032cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80032ce:	4a61      	ldr	r2, [pc, #388]	@ (8003454 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80032d0:	6803      	ldr	r3, [r0, #0]
 80032d2:	4293      	cmp	r3, r2
{
 80032d4:	4604      	mov	r4, r0
 80032d6:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80032d8:	d023      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032de:	d020      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032e0:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d01c      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d018      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d014      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d010      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003300:	f502 3290 	add.w	r2, r2, #73728	@ 0x12000
 8003304:	4293      	cmp	r3, r2
 8003306:	d00c      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003308:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800330c:	4293      	cmp	r3, r2
 800330e:	d008      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003310:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003314:	4293      	cmp	r3, r2
 8003316:	d004      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003318:	484f      	ldr	r0, [pc, #316]	@ (8003458 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800331a:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 800331e:	f001 f96d 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8003322:	682b      	ldr	r3, [r5, #0]
 8003324:	f033 0240 	bics.w	r2, r3, #64	@ 0x40
 8003328:	d00c      	beq.n	8003344 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800332a:	2b40      	cmp	r3, #64	@ 0x40
 800332c:	d952      	bls.n	80033d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800332e:	2b60      	cmp	r3, #96	@ 0x60
 8003330:	d008      	beq.n	8003344 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003332:	f023 0320 	bic.w	r3, r3, #32
 8003336:	2b50      	cmp	r3, #80	@ 0x50
 8003338:	d004      	beq.n	8003344 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800333a:	4847      	ldr	r0, [pc, #284]	@ (8003458 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800333c:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8003340:	f001 f95c 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8003344:	68ab      	ldr	r3, [r5, #8]
 8003346:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 800334a:	d004      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 800334c:	4842      	ldr	r0, [pc, #264]	@ (8003458 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800334e:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 8003352:	f001 f953 	bl	80045fc <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8003356:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800335a:	2b01      	cmp	r3, #1
 800335c:	d06f      	beq.n	800343e <HAL_TIMEx_MasterConfigSynchronization+0x172>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335e:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003360:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003362:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003366:	4a3b      	ldr	r2, [pc, #236]	@ (8003454 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
  __HAL_LOCK(htim);
 8003368:	2101      	movs	r1, #1
 800336a:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800336e:	4293      	cmp	r3, r2
  tmpcr2 = htim->Instance->CR2;
 8003370:	685e      	ldr	r6, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003372:	689f      	ldr	r7, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003374:	d042      	beq.n	80033fc <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003376:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800337a:	4293      	cmp	r3, r2
 800337c:	d031      	beq.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0x116>
 800337e:	f502 52e0 	add.w	r2, r2, #7168	@ 0x1c00
 8003382:	4293      	cmp	r3, r2
 8003384:	d02d      	beq.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0x116>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003386:	682a      	ldr	r2, [r5, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003388:	f026 0670 	bic.w	r6, r6, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800338c:	4316      	orrs	r6, r2

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800338e:	605e      	str	r6, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003394:	d012      	beq.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
 8003396:	4a31      	ldr	r2, [pc, #196]	@ (800345c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00f      	beq.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
 800339c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00b      	beq.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
 80033a4:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d007      	beq.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
 80033ac:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
 80033b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d104      	bne.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0xfa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033bc:	68aa      	ldr	r2, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033be:	f027 0780 	bic.w	r7, r7, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033c2:	4317      	orrs	r7, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033c4:	609f      	str	r7, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80033c6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80033ce:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 80033d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d0b5      	beq.n	8003344 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80033d8:	f023 0320 	bic.w	r3, r3, #32
 80033dc:	2b10      	cmp	r3, #16
 80033de:	d1ac      	bne.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80033e0:	e7b0      	b.n	8003344 <HAL_TIMEx_MasterConfigSynchronization+0x78>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80033e2:	686a      	ldr	r2, [r5, #4]
 80033e4:	f432 1140 	bics.w	r1, r2, #3145728	@ 0x300000
 80033e8:	d10c      	bne.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x138>
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033ea:	f426 0670 	bic.w	r6, r6, #15728640	@ 0xf00000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033ee:	6829      	ldr	r1, [r5, #0]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033f0:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80033f2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033f6:	430a      	orrs	r2, r1
  htim->Instance->CR2 = tmpcr2;
 80033f8:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fa:	e7c9      	b.n	8003390 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80033fc:	686a      	ldr	r2, [r5, #4]
 80033fe:	f432 1140 	bics.w	r1, r2, #3145728	@ 0x300000
 8003402:	d01e      	beq.n	8003442 <HAL_TIMEx_MasterConfigSynchronization+0x176>
 8003404:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8003408:	d00c      	beq.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 800340a:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800340e:	d009      	beq.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8003410:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 8003414:	d006      	beq.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8003416:	4810      	ldr	r0, [pc, #64]	@ (8003458 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8003418:	f240 71c1 	movw	r1, #1985	@ 0x7c1
 800341c:	f001 f8ee 	bl	80045fc <assert_failed>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003420:	686a      	ldr	r2, [r5, #4]
  htim->Instance->CR2 = tmpcr2;
 8003422:	6823      	ldr	r3, [r4, #0]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003424:	f426 0670 	bic.w	r6, r6, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003428:	4316      	orrs	r6, r2
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800342a:	682a      	ldr	r2, [r5, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800342c:	f026 0670 	bic.w	r6, r6, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003430:	4316      	orrs	r6, r2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003432:	4a08      	ldr	r2, [pc, #32]	@ (8003454 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
  htim->Instance->CR2 = tmpcr2;
 8003434:	605e      	str	r6, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003436:	4293      	cmp	r3, r2
 8003438:	d1aa      	bne.n	8003390 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
  htim->Instance->CR2 = tmpcr2;
 800343a:	4b06      	ldr	r3, [pc, #24]	@ (8003454 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800343c:	e7be      	b.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  __HAL_LOCK(htim);
 800343e:	2002      	movs	r0, #2
}
 8003440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003442:	f426 0670 	bic.w	r6, r6, #15728640	@ 0xf00000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003446:	6829      	ldr	r1, [r5, #0]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003448:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800344a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800344e:	430a      	orrs	r2, r1
  htim->Instance->CR2 = tmpcr2;
 8003450:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003452:	e7f2      	b.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0x16e>
 8003454:	40012c00 	.word	0x40012c00
 8003458:	08005520 	.word	0x08005520
 800345c:	40000400 	.word	0x40000400

08003460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003460:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003466:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	e842 3100 	strex	r1, r3, [r2]
 800346e:	2900      	cmp	r1, #0
 8003470:	d1f7      	bne.n	8003462 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003472:	f102 0308 	add.w	r3, r2, #8
 8003476:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	f102 0c08 	add.w	ip, r2, #8
 8003482:	e84c 3100 	strex	r1, r3, [ip]
 8003486:	2900      	cmp	r1, #0
 8003488:	d1f3      	bne.n	8003472 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800348a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800348c:	2b01      	cmp	r3, #1
 800348e:	d006      	beq.n	800349e <UART_EndRxTransfer+0x3e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003490:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003492:	2220      	movs	r2, #32
 8003494:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003498:	6683      	str	r3, [r0, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349a:	6603      	str	r3, [r0, #96]	@ 0x60
}
 800349c:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349e:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	e842 3100 	strex	r1, r3, [r2]
 80034aa:	2900      	cmp	r1, #0
 80034ac:	d0f0      	beq.n	8003490 <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ae:	e852 3f00 	ldrex	r3, [r2]
 80034b2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b6:	e842 3100 	strex	r1, r3, [r2]
 80034ba:	2900      	cmp	r1, #0
 80034bc:	d1ef      	bne.n	800349e <UART_EndRxTransfer+0x3e>
 80034be:	e7e7      	b.n	8003490 <UART_EndRxTransfer+0x30>

080034c0 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034c0:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80034c2:	2b21      	cmp	r3, #33	@ 0x21
 80034c4:	d000      	beq.n	80034c8 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80034c6:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 80034c8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80034cc:	6802      	ldr	r2, [r0, #0]
    if (huart->TxXferCount == 0U)
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	b983      	cbnz	r3, 80034f4 <UART_TxISR_16BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d2:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80034d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034da:	e842 3100 	strex	r1, r3, [r2]
 80034de:	2900      	cmp	r1, #0
 80034e0:	d1f7      	bne.n	80034d2 <UART_TxISR_16BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ea:	e842 3100 	strex	r1, r3, [r2]
 80034ee:	2900      	cmp	r1, #0
 80034f0:	d1f7      	bne.n	80034e2 <UART_TxISR_16BIT+0x22>
 80034f2:	4770      	bx	lr
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80034f4:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80034f6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80034fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fe:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8003500:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
      huart->pTxBuffPtr += 2U;
 8003504:	64c1      	str	r1, [r0, #76]	@ 0x4c
      huart->TxXferCount--;
 8003506:	3b01      	subs	r3, #1
 8003508:	b29b      	uxth	r3, r3
 800350a:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
}
 800350e:	4770      	bx	lr

08003510 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003510:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8003512:	2b21      	cmp	r3, #33	@ 0x21
 8003514:	d000      	beq.n	8003518 <UART_TxISR_8BIT+0x8>
}
 8003516:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8003518:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800351c:	6802      	ldr	r2, [r0, #0]
    if (huart->TxXferCount == 0U)
 800351e:	b29b      	uxth	r3, r3
 8003520:	b983      	cbnz	r3, 8003544 <UART_TxISR_8BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003526:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	e842 3100 	strex	r1, r3, [r2]
 800352e:	2900      	cmp	r1, #0
 8003530:	d1f7      	bne.n	8003522 <UART_TxISR_8BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003532:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353a:	e842 3100 	strex	r1, r3, [r2]
 800353e:	2900      	cmp	r1, #0
 8003540:	d1f7      	bne.n	8003532 <UART_TxISR_8BIT+0x22>
 8003542:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003544:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8003546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800354a:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800354c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
      huart->pTxBuffPtr++;
 8003550:	64c1      	str	r1, [r0, #76]	@ 0x4c
      huart->TxXferCount--;
 8003552:	3b01      	subs	r3, #1
 8003554:	b29b      	uxth	r3, r3
 8003556:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
}
 800355a:	4770      	bx	lr

0800355c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800355c:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800355e:	2b20      	cmp	r3, #32
 8003560:	d122      	bne.n	80035a8 <HAL_UART_Transmit_IT+0x4c>
    if ((pData == NULL) || (Size == 0U))
 8003562:	b101      	cbz	r1, 8003566 <HAL_UART_Transmit_IT+0xa>
 8003564:	b90a      	cbnz	r2, 800356a <HAL_UART_Transmit_IT+0xe>
      return HAL_ERROR;
 8003566:	2001      	movs	r0, #1
}
 8003568:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800356a:	6883      	ldr	r3, [r0, #8]
{
 800356c:	b410      	push	{r4}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800356e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003572:	f04f 0400 	mov.w	r4, #0
    huart->pTxBuffPtr  = pData;
 8003576:	64c1      	str	r1, [r0, #76]	@ 0x4c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003578:	f04f 0121 	mov.w	r1, #33	@ 0x21
    huart->TxXferCount = Size;
 800357c:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
    huart->TxXferSize  = Size;
 8003580:	f8a0 2050 	strh.w	r2, [r0, #80]	@ 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003584:	f8c0 4084 	str.w	r4, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003588:	67c1      	str	r1, [r0, #124]	@ 0x7c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800358a:	d00f      	beq.n	80035ac <HAL_UART_Transmit_IT+0x50>
      huart->TxISR = UART_TxISR_8BIT;
 800358c:	4b0b      	ldr	r3, [pc, #44]	@ (80035bc <HAL_UART_Transmit_IT+0x60>)
 800358e:	6802      	ldr	r2, [r0, #0]
 8003590:	66c3      	str	r3, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359a:	e842 3000 	strex	r0, r3, [r2]
 800359e:	2800      	cmp	r0, #0
 80035a0:	d1f7      	bne.n	8003592 <HAL_UART_Transmit_IT+0x36>
}
 80035a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035a6:	4770      	bx	lr
    return HAL_BUSY;
 80035a8:	2002      	movs	r0, #2
 80035aa:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ac:	6901      	ldr	r1, [r0, #16]
      huart->TxISR = UART_TxISR_16BIT;
 80035ae:	4b03      	ldr	r3, [pc, #12]	@ (80035bc <HAL_UART_Transmit_IT+0x60>)
 80035b0:	4a03      	ldr	r2, [pc, #12]	@ (80035c0 <HAL_UART_Transmit_IT+0x64>)
 80035b2:	42a1      	cmp	r1, r4
 80035b4:	bf08      	it	eq
 80035b6:	4613      	moveq	r3, r2
 80035b8:	e7e9      	b.n	800358e <HAL_UART_Transmit_IT+0x32>
 80035ba:	bf00      	nop
 80035bc:	08003511 	.word	0x08003511
 80035c0:	080034c1 	.word	0x080034c1

080035c4 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop

080035c8 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop

080035cc <UART_DMAAbortOnError>:
{
 80035cc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035ce:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80035d6:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
  HAL_UART_ErrorCallback(huart);
 80035da:	f7ff fff5 	bl	80035c8 <HAL_UART_ErrorCallback>
}
 80035de:	bd08      	pop	{r3, pc}

080035e0 <HAL_UARTEx_RxEventCallback>:
}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop

080035e4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035e4:	6803      	ldr	r3, [r0, #0]
 80035e6:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035e8:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035ea:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  if (errorflags == 0U)
 80035ee:	ea12 0f0c 	tst.w	r2, ip
{
 80035f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035f6:	689d      	ldr	r5, [r3, #8]
{
 80035f8:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80035fa:	f040 8081 	bne.w	8003700 <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035fe:	0697      	lsls	r7, r2, #26
 8003600:	d502      	bpl.n	8003608 <HAL_UART_IRQHandler+0x24>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003602:	068e      	lsls	r6, r1, #26
 8003604:	f100 80ec 	bmi.w	80037e0 <HAL_UART_IRQHandler+0x1fc>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003608:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800360a:	2801      	cmp	r0, #1
 800360c:	d025      	beq.n	800365a <HAL_UART_IRQHandler+0x76>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800360e:	02d0      	lsls	r0, r2, #11
 8003610:	d502      	bpl.n	8003618 <HAL_UART_IRQHandler+0x34>
 8003612:	026f      	lsls	r7, r5, #9
 8003614:	f100 80e9 	bmi.w	80037ea <HAL_UART_IRQHandler+0x206>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003618:	0616      	lsls	r6, r2, #24
 800361a:	d415      	bmi.n	8003648 <HAL_UART_IRQHandler+0x64>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800361c:	0650      	lsls	r0, r2, #25
 800361e:	d501      	bpl.n	8003624 <HAL_UART_IRQHandler+0x40>
 8003620:	064a      	lsls	r2, r1, #25
 8003622:	d401      	bmi.n	8003628 <HAL_UART_IRQHandler+0x44>
}
 8003624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800362c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003630:	e843 2100 	strex	r1, r2, [r3]
 8003634:	2900      	cmp	r1, #0
 8003636:	d1f7      	bne.n	8003628 <HAL_UART_IRQHandler+0x44>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003638:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800363a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800363c:	67e2      	str	r2, [r4, #124]	@ 0x7c
  huart->TxISR = NULL;
 800363e:	66e3      	str	r3, [r4, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003640:	4620      	mov	r0, r4
 8003642:	f7ff ffbf 	bl	80035c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003646:	e7ed      	b.n	8003624 <HAL_UART_IRQHandler+0x40>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003648:	060d      	lsls	r5, r1, #24
 800364a:	d5e7      	bpl.n	800361c <HAL_UART_IRQHandler+0x38>
    if (huart->TxISR != NULL)
 800364c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0e8      	beq.n	8003624 <HAL_UART_IRQHandler+0x40>
      huart->TxISR(huart);
 8003652:	4620      	mov	r0, r4
}
 8003654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8003658:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800365a:	06d7      	lsls	r7, r2, #27
 800365c:	d5d7      	bpl.n	800360e <HAL_UART_IRQHandler+0x2a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800365e:	06ce      	lsls	r6, r1, #27
 8003660:	d5d5      	bpl.n	800360e <HAL_UART_IRQHandler+0x2a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003662:	2210      	movs	r2, #16
 8003664:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	0655      	lsls	r5, r2, #25
 800366a:	f140 8110 	bpl.w	800388e <HAL_UART_IRQHandler+0x2aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800366e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003670:	6802      	ldr	r2, [r0, #0]
 8003672:	6852      	ldr	r2, [r2, #4]
 8003674:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003676:	2a00      	cmp	r2, #0
 8003678:	d0d4      	beq.n	8003624 <HAL_UART_IRQHandler+0x40>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800367a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 800367e:	4291      	cmp	r1, r2
 8003680:	d9d0      	bls.n	8003624 <HAL_UART_IRQHandler+0x40>
        huart->RxXferCount = nb_remaining_rx_data;
 8003682:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003686:	6982      	ldr	r2, [r0, #24]
 8003688:	2a20      	cmp	r2, #32
 800368a:	d02f      	beq.n	80036ec <HAL_UART_IRQHandler+0x108>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003690:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	e843 2100 	strex	r1, r2, [r3]
 8003698:	2900      	cmp	r1, #0
 800369a:	d1f7      	bne.n	800368c <HAL_UART_IRQHandler+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369c:	f103 0208 	add.w	r2, r3, #8
 80036a0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a8:	f103 0508 	add.w	r5, r3, #8
 80036ac:	e845 2100 	strex	r1, r2, [r5]
 80036b0:	2900      	cmp	r1, #0
 80036b2:	d1f3      	bne.n	800369c <HAL_UART_IRQHandler+0xb8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b4:	f103 0208 	add.w	r2, r3, #8
 80036b8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	f103 0508 	add.w	r5, r3, #8
 80036c4:	e845 2100 	strex	r1, r2, [r5]
 80036c8:	2900      	cmp	r1, #0
 80036ca:	d1f3      	bne.n	80036b4 <HAL_UART_IRQHandler+0xd0>
          huart->RxState = HAL_UART_STATE_READY;
 80036cc:	2220      	movs	r2, #32
 80036ce:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d2:	6621      	str	r1, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	e843 2100 	strex	r1, r2, [r3]
 80036e0:	2900      	cmp	r1, #0
 80036e2:	d1f7      	bne.n	80036d4 <HAL_UART_IRQHandler+0xf0>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036e4:	f7fd fec6 	bl	8001474 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036e8:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036ec:	2302      	movs	r3, #2
 80036ee:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036f0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 80036f4:	1ac9      	subs	r1, r1, r3
 80036f6:	4620      	mov	r0, r4
 80036f8:	b289      	uxth	r1, r1
 80036fa:	f7ff ff71 	bl	80035e0 <HAL_UARTEx_RxEventCallback>
 80036fe:	e791      	b.n	8003624 <HAL_UART_IRQHandler+0x40>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003700:	f015 0701 	ands.w	r7, r5, #1
 8003704:	461e      	mov	r6, r3
 8003706:	f040 8093 	bne.w	8003830 <HAL_UART_IRQHandler+0x24c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800370a:	487f      	ldr	r0, [pc, #508]	@ (8003908 <HAL_UART_IRQHandler+0x324>)
 800370c:	4201      	tst	r1, r0
 800370e:	f43f af7b 	beq.w	8003608 <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003712:	07d5      	lsls	r5, r2, #31
 8003714:	d50f      	bpl.n	8003736 <HAL_UART_IRQHandler+0x152>
 8003716:	05c8      	lsls	r0, r1, #23
 8003718:	f140 80b5 	bpl.w	8003886 <HAL_UART_IRQHandler+0x2a2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800371c:	2001      	movs	r0, #1
 800371e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003720:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003724:	f040 0001 	orr.w	r0, r0, #1
 8003728:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800372c:	0790      	lsls	r0, r2, #30
 800372e:	d568      	bpl.n	8003802 <HAL_UART_IRQHandler+0x21e>
 8003730:	2f00      	cmp	r7, #0
 8003732:	f040 8081 	bne.w	8003838 <HAL_UART_IRQHandler+0x254>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003736:	0755      	lsls	r5, r2, #29
 8003738:	f140 8088 	bpl.w	800384c <HAL_UART_IRQHandler+0x268>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800373c:	0717      	lsls	r7, r2, #28
 800373e:	f100 8097 	bmi.w	8003870 <HAL_UART_IRQHandler+0x28c>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003742:	0517      	lsls	r7, r2, #20
 8003744:	d50a      	bpl.n	800375c <HAL_UART_IRQHandler+0x178>
 8003746:	014d      	lsls	r5, r1, #5
 8003748:	d508      	bpl.n	800375c <HAL_UART_IRQHandler+0x178>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800374a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800374e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003750:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8003754:	f043 0320 	orr.w	r3, r3, #32
 8003758:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800375c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8003760:	2b00      	cmp	r3, #0
 8003762:	f43f af5f 	beq.w	8003624 <HAL_UART_IRQHandler+0x40>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003766:	0690      	lsls	r0, r2, #26
 8003768:	d502      	bpl.n	8003770 <HAL_UART_IRQHandler+0x18c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800376a:	068a      	lsls	r2, r1, #26
 800376c:	f100 8083 	bmi.w	8003876 <HAL_UART_IRQHandler+0x292>
      errorcode = huart->ErrorCode;
 8003770:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003774:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003776:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800377a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377e:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 8003782:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003784:	f000 80ba 	beq.w	80038fc <HAL_UART_IRQHandler+0x318>
        UART_EndRxTransfer(huart);
 8003788:	f7ff fe6a 	bl	8003460 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800378c:	68b3      	ldr	r3, [r6, #8]
 800378e:	065b      	lsls	r3, r3, #25
 8003790:	d565      	bpl.n	800385e <HAL_UART_IRQHandler+0x27a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003792:	f106 0308 	add.w	r3, r6, #8
 8003796:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800379a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	f106 0108 	add.w	r1, r6, #8
 80037a2:	e841 3200 	strex	r2, r3, [r1]
 80037a6:	b162      	cbz	r2, 80037c2 <HAL_UART_IRQHandler+0x1de>
 80037a8:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	f103 0208 	add.w	r2, r3, #8
 80037ae:	e852 2f00 	ldrex	r2, [r2]
 80037b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b6:	f103 0008 	add.w	r0, r3, #8
 80037ba:	e840 2100 	strex	r1, r2, [r0]
 80037be:	2900      	cmp	r1, #0
 80037c0:	d1f3      	bne.n	80037aa <HAL_UART_IRQHandler+0x1c6>
          if (huart->hdmarx != NULL)
 80037c2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80037c4:	2800      	cmp	r0, #0
 80037c6:	d04a      	beq.n	800385e <HAL_UART_IRQHandler+0x27a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037c8:	4b50      	ldr	r3, [pc, #320]	@ (800390c <HAL_UART_IRQHandler+0x328>)
 80037ca:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037cc:	f7fd fe76 	bl	80014bc <HAL_DMA_Abort_IT>
 80037d0:	2800      	cmp	r0, #0
 80037d2:	f43f af27 	beq.w	8003624 <HAL_UART_IRQHandler+0x40>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037d6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
}
 80037d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037dc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80037de:	4718      	bx	r3
      if (huart->RxISR != NULL)
 80037e0:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f47f af36 	bne.w	8003654 <HAL_UART_IRQHandler+0x70>
 80037e8:	e71c      	b.n	8003624 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80037ee:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037f0:	621a      	str	r2, [r3, #32]
}
 80037f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80037f6:	f000 bbc3 	b.w	8003f80 <HAL_UARTEx_WakeupCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037fa:	05c8      	lsls	r0, r1, #23
 80037fc:	d48e      	bmi.n	800371c <HAL_UART_IRQHandler+0x138>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037fe:	0795      	lsls	r5, r2, #30
 8003800:	d41a      	bmi.n	8003838 <HAL_UART_IRQHandler+0x254>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003802:	0750      	lsls	r0, r2, #29
 8003804:	d522      	bpl.n	800384c <HAL_UART_IRQHandler+0x268>
 8003806:	2f00      	cmp	r7, #0
 8003808:	d098      	beq.n	800373c <HAL_UART_IRQHandler+0x158>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800380a:	2004      	movs	r0, #4
 800380c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800380e:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003812:	0715      	lsls	r5, r2, #28
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003814:	f040 0002 	orr.w	r0, r0, #2
 8003818:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 800381c:	d591      	bpl.n	8003742 <HAL_UART_IRQHandler+0x15e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800381e:	2008      	movs	r0, #8
 8003820:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003822:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003826:	f040 0008 	orr.w	r0, r0, #8
 800382a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800382e:	e788      	b.n	8003742 <HAL_UART_IRQHandler+0x15e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003830:	07d0      	lsls	r0, r2, #31
 8003832:	d4e2      	bmi.n	80037fa <HAL_UART_IRQHandler+0x216>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003834:	0795      	lsls	r5, r2, #30
 8003836:	d516      	bpl.n	8003866 <HAL_UART_IRQHandler+0x282>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003838:	2002      	movs	r0, #2
 800383a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800383c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003840:	f040 0004 	orr.w	r0, r0, #4
 8003844:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003848:	0750      	lsls	r0, r2, #29
 800384a:	d4de      	bmi.n	800380a <HAL_UART_IRQHandler+0x226>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800384c:	0710      	lsls	r0, r2, #28
 800384e:	f57f af78 	bpl.w	8003742 <HAL_UART_IRQHandler+0x15e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003852:	f001 0020 	and.w	r0, r1, #32
 8003856:	4338      	orrs	r0, r7
 8003858:	f43f af73 	beq.w	8003742 <HAL_UART_IRQHandler+0x15e>
 800385c:	e7df      	b.n	800381e <HAL_UART_IRQHandler+0x23a>
            HAL_UART_ErrorCallback(huart);
 800385e:	4620      	mov	r0, r4
 8003860:	f7ff feb2 	bl	80035c8 <HAL_UART_ErrorCallback>
 8003864:	e6de      	b.n	8003624 <HAL_UART_IRQHandler+0x40>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003866:	0757      	lsls	r7, r2, #29
 8003868:	d4cf      	bmi.n	800380a <HAL_UART_IRQHandler+0x226>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800386a:	0710      	lsls	r0, r2, #28
 800386c:	d4d7      	bmi.n	800381e <HAL_UART_IRQHandler+0x23a>
 800386e:	e768      	b.n	8003742 <HAL_UART_IRQHandler+0x15e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003870:	068d      	lsls	r5, r1, #26
 8003872:	d4d4      	bmi.n	800381e <HAL_UART_IRQHandler+0x23a>
 8003874:	e765      	b.n	8003742 <HAL_UART_IRQHandler+0x15e>
        if (huart->RxISR != NULL)
 8003876:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8003878:	2b00      	cmp	r3, #0
 800387a:	f43f af79 	beq.w	8003770 <HAL_UART_IRQHandler+0x18c>
          huart->RxISR(huart);
 800387e:	4620      	mov	r0, r4
 8003880:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003882:	6826      	ldr	r6, [r4, #0]
 8003884:	e774      	b.n	8003770 <HAL_UART_IRQHandler+0x18c>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003886:	0795      	lsls	r5, r2, #30
 8003888:	f53f af55 	bmi.w	8003736 <HAL_UART_IRQHandler+0x152>
 800388c:	e7b9      	b.n	8003802 <HAL_UART_IRQHandler+0x21e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800388e:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
      if ((huart->RxXferCount > 0U)
 8003892:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003896:	f8b4 0058 	ldrh.w	r0, [r4, #88]	@ 0x58
      if ((huart->RxXferCount > 0U)
 800389a:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800389c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800389e:	2a00      	cmp	r2, #0
 80038a0:	f43f aec0 	beq.w	8003624 <HAL_UART_IRQHandler+0x40>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038a4:	1a41      	subs	r1, r0, r1
 80038a6:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80038a8:	2900      	cmp	r1, #0
 80038aa:	f43f aebb 	beq.w	8003624 <HAL_UART_IRQHandler+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b2:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	e843 2000 	strex	r0, r2, [r3]
 80038ba:	2800      	cmp	r0, #0
 80038bc:	d1f7      	bne.n	80038ae <HAL_UART_IRQHandler+0x2ca>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	f103 0208 	add.w	r2, r3, #8
 80038c2:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ca:	f103 0508 	add.w	r5, r3, #8
 80038ce:	e845 2000 	strex	r0, r2, [r5]
 80038d2:	2800      	cmp	r0, #0
 80038d4:	d1f3      	bne.n	80038be <HAL_UART_IRQHandler+0x2da>
        huart->RxState = HAL_UART_STATE_READY;
 80038d6:	2220      	movs	r2, #32
 80038d8:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
        huart->RxISR = NULL;
 80038dc:	66a0      	str	r0, [r4, #104]	@ 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038de:	6620      	str	r0, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	e843 2000 	strex	r0, r2, [r3]
 80038ec:	2800      	cmp	r0, #0
 80038ee:	d1f7      	bne.n	80038e0 <HAL_UART_IRQHandler+0x2fc>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038f0:	2302      	movs	r3, #2
 80038f2:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038f4:	4620      	mov	r0, r4
 80038f6:	f7ff fe73 	bl	80035e0 <HAL_UARTEx_RxEventCallback>
 80038fa:	e693      	b.n	8003624 <HAL_UART_IRQHandler+0x40>
        HAL_UART_ErrorCallback(huart);
 80038fc:	f7ff fe64 	bl	80035c8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003900:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
 8003904:	e68e      	b.n	8003624 <HAL_UART_IRQHandler+0x40>
 8003906:	bf00      	nop
 8003908:	04000120 	.word	0x04000120
 800390c:	080035cd 	.word	0x080035cd

08003910 <UART_SetConfig>:
{
 8003910:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003912:	6842      	ldr	r2, [r0, #4]
 8003914:	4b97      	ldr	r3, [pc, #604]	@ (8003b74 <UART_SetConfig+0x264>)
 8003916:	429a      	cmp	r2, r3
{
 8003918:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800391a:	f200 80aa 	bhi.w	8003a72 <UART_SetConfig+0x162>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800391e:	68a3      	ldr	r3, [r4, #8]
 8003920:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003924:	d003      	beq.n	800392e <UART_SetConfig+0x1e>
 8003926:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
 800392a:	f040 80b8 	bne.w	8003a9e <UART_SetConfig+0x18e>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800392e:	68e3      	ldr	r3, [r4, #12]
 8003930:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
 8003934:	d004      	beq.n	8003940 <UART_SetConfig+0x30>
 8003936:	4890      	ldr	r0, [pc, #576]	@ (8003b78 <UART_SetConfig+0x268>)
 8003938:	f640 313b 	movw	r1, #2875	@ 0xb3b
 800393c:	f000 fe5e 	bl	80045fc <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8003940:	6a23      	ldr	r3, [r4, #32]
 8003942:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
 8003946:	d004      	beq.n	8003952 <UART_SetConfig+0x42>
 8003948:	488b      	ldr	r0, [pc, #556]	@ (8003b78 <UART_SetConfig+0x268>)
 800394a:	f640 313c 	movw	r1, #2876	@ 0xb3c
 800394e:	f000 fe55 	bl	80045fc <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003952:	6923      	ldr	r3, [r4, #16]
 8003954:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
 8003958:	d003      	beq.n	8003962 <UART_SetConfig+0x52>
 800395a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800395e:	f040 80a4 	bne.w	8003aaa <UART_SetConfig+0x19a>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003962:	6963      	ldr	r3, [r4, #20]
 8003964:	f033 020c 	bics.w	r2, r3, #12
 8003968:	d14f      	bne.n	8003a0a <UART_SetConfig+0xfa>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d04d      	beq.n	8003a0a <UART_SetConfig+0xfa>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800396e:	69a3      	ldr	r3, [r4, #24]
 8003970:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
 8003974:	d004      	beq.n	8003980 <UART_SetConfig+0x70>
 8003976:	4880      	ldr	r0, [pc, #512]	@ (8003b78 <UART_SetConfig+0x268>)
 8003978:	f44f 6134 	mov.w	r1, #2880	@ 0xb40
 800397c:	f000 fe3e 	bl	80045fc <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003980:	69e1      	ldr	r1, [r4, #28]
 8003982:	f431 4300 	bics.w	r3, r1, #32768	@ 0x8000
 8003986:	d005      	beq.n	8003994 <UART_SetConfig+0x84>
 8003988:	f640 3141 	movw	r1, #2881	@ 0xb41
 800398c:	487a      	ldr	r0, [pc, #488]	@ (8003b78 <UART_SetConfig+0x268>)
 800398e:	f000 fe35 	bl	80045fc <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003992:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003994:	6920      	ldr	r0, [r4, #16]
 8003996:	68a3      	ldr	r3, [r4, #8]
 8003998:	6822      	ldr	r2, [r4, #0]
 800399a:	4303      	orrs	r3, r0
 800399c:	6960      	ldr	r0, [r4, #20]
 800399e:	6815      	ldr	r5, [r2, #0]
 80039a0:	4303      	orrs	r3, r0
 80039a2:	4876      	ldr	r0, [pc, #472]	@ (8003b7c <UART_SetConfig+0x26c>)
 80039a4:	4028      	ands	r0, r5
 80039a6:	4303      	orrs	r3, r0
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ac:	6853      	ldr	r3, [r2, #4]
 80039ae:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 80039b0:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80039b6:	4303      	orrs	r3, r0
 80039b8:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039ba:	6890      	ldr	r0, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039bc:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039be:	f420 6030 	bic.w	r0, r0, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80039c2:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039c4:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039c6:	486e      	ldr	r0, [pc, #440]	@ (8003b80 <UART_SetConfig+0x270>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039c8:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039ca:	4282      	cmp	r2, r0
 80039cc:	d057      	beq.n	8003a7e <UART_SetConfig+0x16e>
 80039ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003b84 <UART_SetConfig+0x274>)
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d020      	beq.n	8003a16 <UART_SetConfig+0x106>
 80039d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003b88 <UART_SetConfig+0x278>)
 80039d6:	429a      	cmp	r2, r3
 80039d8:	f000 809c 	beq.w	8003b14 <UART_SetConfig+0x204>
 80039dc:	4b6b      	ldr	r3, [pc, #428]	@ (8003b8c <UART_SetConfig+0x27c>)
 80039de:	429a      	cmp	r2, r3
 80039e0:	f000 80ab 	beq.w	8003b3a <UART_SetConfig+0x22a>
 80039e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003b90 <UART_SetConfig+0x280>)
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d141      	bne.n	8003a6e <UART_SetConfig+0x15e>
 80039ea:	f503 33e0 	add.w	r3, r3, #114688	@ 0x1c000
 80039ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80039f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039f8:	d07c      	beq.n	8003af4 <UART_SetConfig+0x1e4>
 80039fa:	f200 8081 	bhi.w	8003b00 <UART_SetConfig+0x1f0>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d059      	beq.n	8003ab6 <UART_SetConfig+0x1a6>
 8003a02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a06:	d014      	beq.n	8003a32 <UART_SetConfig+0x122>
 8003a08:	e031      	b.n	8003a6e <UART_SetConfig+0x15e>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003a0a:	485b      	ldr	r0, [pc, #364]	@ (8003b78 <UART_SetConfig+0x268>)
 8003a0c:	f640 313f 	movw	r1, #2879	@ 0xb3f
 8003a10:	f000 fdf4 	bl	80045fc <assert_failed>
 8003a14:	e7ab      	b.n	800396e <UART_SetConfig+0x5e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a16:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a24:	d066      	beq.n	8003af4 <UART_SetConfig+0x1e4>
 8003a26:	d80f      	bhi.n	8003a48 <UART_SetConfig+0x138>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d044      	beq.n	8003ab6 <UART_SetConfig+0x1a6>
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a30:	d11d      	bne.n	8003a6e <UART_SetConfig+0x15e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a32:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003a36:	d044      	beq.n	8003ac2 <UART_SetConfig+0x1b2>
        pclk = HAL_RCC_GetSysClockFreq();
 8003a38:	f7fe fbbc 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003a3c:	b960      	cbnz	r0, 8003a58 <UART_SetConfig+0x148>
        pclk = (uint32_t) HSI_VALUE;
 8003a3e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8003a46:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a4c:	d10f      	bne.n	8003a6e <UART_SetConfig+0x15e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a4e:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003a52:	f000 8087 	beq.w	8003b64 <UART_SetConfig+0x254>
        pclk = (uint32_t) HSI_VALUE;
 8003a56:	484f      	ldr	r0, [pc, #316]	@ (8003b94 <UART_SetConfig+0x284>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a58:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a5a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a5e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003a62:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a66:	f1a0 0310 	sub.w	r3, r0, #16
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d94f      	bls.n	8003b0e <UART_SetConfig+0x1fe>
        pclk = (uint32_t) HSI_VALUE;
 8003a6e:	2001      	movs	r0, #1
 8003a70:	e7e6      	b.n	8003a40 <UART_SetConfig+0x130>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003a72:	4841      	ldr	r0, [pc, #260]	@ (8003b78 <UART_SetConfig+0x268>)
 8003a74:	f640 3139 	movw	r1, #2873	@ 0xb39
 8003a78:	f000 fdc0 	bl	80045fc <assert_failed>
 8003a7c:	e74f      	b.n	800391e <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a7e:	4b46      	ldr	r3, [pc, #280]	@ (8003b98 <UART_SetConfig+0x288>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d034      	beq.n	8003af4 <UART_SetConfig+0x1e4>
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d0df      	beq.n	8003a4e <UART_SetConfig+0x13e>
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d0cf      	beq.n	8003a32 <UART_SetConfig+0x122>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a92:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003a96:	d037      	beq.n	8003b08 <UART_SetConfig+0x1f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a98:	f7fe fcda 	bl	8002450 <HAL_RCC_GetPCLK2Freq>
        break;
 8003a9c:	e7ce      	b.n	8003a3c <UART_SetConfig+0x12c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003a9e:	4836      	ldr	r0, [pc, #216]	@ (8003b78 <UART_SetConfig+0x268>)
 8003aa0:	f640 313a 	movw	r1, #2874	@ 0xb3a
 8003aa4:	f000 fdaa 	bl	80045fc <assert_failed>
 8003aa8:	e741      	b.n	800392e <UART_SetConfig+0x1e>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003aaa:	4833      	ldr	r0, [pc, #204]	@ (8003b78 <UART_SetConfig+0x268>)
 8003aac:	f640 313e 	movw	r1, #2878	@ 0xb3e
 8003ab0:	f000 fda4 	bl	80045fc <assert_failed>
 8003ab4:	e755      	b.n	8003962 <UART_SetConfig+0x52>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab6:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003aba:	d058      	beq.n	8003b6e <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003abc:	f7fe fcb0 	bl	8002420 <HAL_RCC_GetPCLK1Freq>
        break;
 8003ac0:	e7bc      	b.n	8003a3c <UART_SetConfig+0x12c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac2:	f7fe fb77 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d0b9      	beq.n	8003a3e <UART_SetConfig+0x12e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003aca:	0040      	lsls	r0, r0, #1
 8003acc:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ace:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ad2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003ad6:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ada:	f1a3 0110 	sub.w	r1, r3, #16
 8003ade:	4291      	cmp	r1, r2
 8003ae0:	d8c5      	bhi.n	8003a6e <UART_SetConfig+0x15e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ae2:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8003ae6:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ae8:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aea:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60cb      	str	r3, [r1, #12]
 8003af2:	e7a4      	b.n	8003a3e <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003af4:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003af8:	d036      	beq.n	8003b68 <UART_SetConfig+0x258>
        pclk = (uint32_t) LSE_VALUE;
 8003afa:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003afe:	e7ab      	b.n	8003a58 <UART_SetConfig+0x148>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b00:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b04:	d0a3      	beq.n	8003a4e <UART_SetConfig+0x13e>
 8003b06:	e7b2      	b.n	8003a6e <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b08:	f7fe fca2 	bl	8002450 <HAL_RCC_GetPCLK2Freq>
        break;
 8003b0c:	e7db      	b.n	8003ac6 <UART_SetConfig+0x1b6>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	60d8      	str	r0, [r3, #12]
 8003b12:	e794      	b.n	8003a3e <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b14:	f503 33e4 	add.w	r3, r3, #116736	@ 0x1c800
 8003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003b1e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b22:	d0e7      	beq.n	8003af4 <UART_SetConfig+0x1e4>
 8003b24:	d805      	bhi.n	8003b32 <UART_SetConfig+0x222>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0c5      	beq.n	8003ab6 <UART_SetConfig+0x1a6>
 8003b2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b2e:	d080      	beq.n	8003a32 <UART_SetConfig+0x122>
 8003b30:	e79d      	b.n	8003a6e <UART_SetConfig+0x15e>
 8003b32:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b36:	d08a      	beq.n	8003a4e <UART_SetConfig+0x13e>
 8003b38:	e799      	b.n	8003a6e <UART_SetConfig+0x15e>
 8003b3a:	f503 33e2 	add.w	r3, r3, #115712	@ 0x1c400
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b40:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003b44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b48:	d0d4      	beq.n	8003af4 <UART_SetConfig+0x1e4>
 8003b4a:	d806      	bhi.n	8003b5a <UART_SetConfig+0x24a>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0b2      	beq.n	8003ab6 <UART_SetConfig+0x1a6>
 8003b50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b54:	f43f af6d 	beq.w	8003a32 <UART_SetConfig+0x122>
 8003b58:	e789      	b.n	8003a6e <UART_SetConfig+0x15e>
 8003b5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b5e:	f43f af76 	beq.w	8003a4e <UART_SetConfig+0x13e>
 8003b62:	e784      	b.n	8003a6e <UART_SetConfig+0x15e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b64:	480d      	ldr	r0, [pc, #52]	@ (8003b9c <UART_SetConfig+0x28c>)
 8003b66:	e7b1      	b.n	8003acc <UART_SetConfig+0x1bc>
 8003b68:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8003b6c:	e7ae      	b.n	8003acc <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b6e:	f7fe fc57 	bl	8002420 <HAL_RCC_GetPCLK1Freq>
        break;
 8003b72:	e7a8      	b.n	8003ac6 <UART_SetConfig+0x1b6>
 8003b74:	00895440 	.word	0x00895440
 8003b78:	0800555c 	.word	0x0800555c
 8003b7c:	efff69f3 	.word	0xefff69f3
 8003b80:	40013800 	.word	0x40013800
 8003b84:	40004400 	.word	0x40004400
 8003b88:	40004800 	.word	0x40004800
 8003b8c:	40004c00 	.word	0x40004c00
 8003b90:	40005000 	.word	0x40005000
 8003b94:	007a1200 	.word	0x007a1200
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	00f42400 	.word	0x00f42400

08003ba0 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8003ba0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003ba2:	2bff      	cmp	r3, #255	@ 0xff
{
 8003ba4:	b510      	push	{r4, lr}
 8003ba6:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8003ba8:	f200 8095 	bhi.w	8003cd6 <UART_AdvFeatureConfig+0x136>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bac:	071a      	lsls	r2, r3, #28
 8003bae:	d50a      	bpl.n	8003bc6 <UART_AdvFeatureConfig+0x26>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8003bb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bb2:	f431 4200 	bics.w	r2, r1, #32768	@ 0x8000
 8003bb6:	f040 809d 	bne.w	8003cf4 <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bba:	6820      	ldr	r0, [r4, #0]
 8003bbc:	6842      	ldr	r2, [r0, #4]
 8003bbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bc6:	07d8      	lsls	r0, r3, #31
 8003bc8:	d50a      	bpl.n	8003be0 <UART_AdvFeatureConfig+0x40>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8003bca:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003bcc:	f431 3200 	bics.w	r2, r1, #131072	@ 0x20000
 8003bd0:	f040 8098 	bne.w	8003d04 <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bd4:	6820      	ldr	r0, [r4, #0]
 8003bd6:	6842      	ldr	r2, [r0, #4]
 8003bd8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003be0:	0799      	lsls	r1, r3, #30
 8003be2:	d50a      	bpl.n	8003bfa <UART_AdvFeatureConfig+0x5a>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8003be4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003be6:	f431 3280 	bics.w	r2, r1, #65536	@ 0x10000
 8003bea:	f040 8093 	bne.w	8003d14 <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bee:	6820      	ldr	r0, [r4, #0]
 8003bf0:	6842      	ldr	r2, [r0, #4]
 8003bf2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bfa:	075a      	lsls	r2, r3, #29
 8003bfc:	d50a      	bpl.n	8003c14 <UART_AdvFeatureConfig+0x74>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8003bfe:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003c00:	f431 2280 	bics.w	r2, r1, #262144	@ 0x40000
 8003c04:	f040 808e 	bne.w	8003d24 <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c08:	6820      	ldr	r0, [r4, #0]
 8003c0a:	6842      	ldr	r2, [r0, #4]
 8003c0c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c10:	430a      	orrs	r2, r1
 8003c12:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c14:	06d8      	lsls	r0, r3, #27
 8003c16:	d50a      	bpl.n	8003c2e <UART_AdvFeatureConfig+0x8e>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8003c18:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003c1a:	f431 5280 	bics.w	r2, r1, #4096	@ 0x1000
 8003c1e:	f040 8089 	bne.w	8003d34 <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c22:	6820      	ldr	r0, [r4, #0]
 8003c24:	6882      	ldr	r2, [r0, #8]
 8003c26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c2e:	0699      	lsls	r1, r3, #26
 8003c30:	d509      	bpl.n	8003c46 <UART_AdvFeatureConfig+0xa6>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8003c32:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8003c34:	f431 5200 	bics.w	r2, r1, #8192	@ 0x2000
 8003c38:	d154      	bne.n	8003ce4 <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c3a:	6820      	ldr	r0, [r4, #0]
 8003c3c:	6882      	ldr	r2, [r0, #8]
 8003c3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c42:	430a      	orrs	r2, r1
 8003c44:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c46:	065a      	lsls	r2, r3, #25
 8003c48:	d52b      	bpl.n	8003ca2 <UART_AdvFeatureConfig+0x102>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	4a46      	ldr	r2, [pc, #280]	@ (8003d68 <UART_AdvFeatureConfig+0x1c8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00c      	beq.n	8003c6c <UART_AdvFeatureConfig+0xcc>
 8003c52:	f5a2 4274 	sub.w	r2, r2, #62464	@ 0xf400
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d008      	beq.n	8003c6c <UART_AdvFeatureConfig+0xcc>
 8003c5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d004      	beq.n	8003c6c <UART_AdvFeatureConfig+0xcc>
 8003c62:	4842      	ldr	r0, [pc, #264]	@ (8003d6c <UART_AdvFeatureConfig+0x1cc>)
 8003c64:	f640 31f1 	movw	r1, #3057	@ 0xbf1
 8003c68:	f000 fcc8 	bl	80045fc <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8003c6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c6e:	b35b      	cbz	r3, 8003cc8 <UART_AdvFeatureConfig+0x128>
 8003c70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c74:	d166      	bne.n	8003d44 <UART_AdvFeatureConfig+0x1a4>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c76:	6822      	ldr	r2, [r4, #0]
 8003c78:	6853      	ldr	r3, [r2, #4]
 8003c7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c7e:	6053      	str	r3, [r2, #4]
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8003c80:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003c82:	f430 03c0 	bics.w	r3, r0, #6291456	@ 0x600000
 8003c86:	d006      	beq.n	8003c96 <UART_AdvFeatureConfig+0xf6>
 8003c88:	4838      	ldr	r0, [pc, #224]	@ (8003d6c <UART_AdvFeatureConfig+0x1cc>)
 8003c8a:	f640 31f7 	movw	r1, #3063	@ 0xbf7
 8003c8e:	f000 fcb5 	bl	80045fc <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c92:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003c94:	6822      	ldr	r2, [r4, #0]
 8003c96:	6851      	ldr	r1, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c98:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c9a:	f421 01c0 	bic.w	r1, r1, #6291456	@ 0x600000
 8003c9e:	4301      	orrs	r1, r0
 8003ca0:	6051      	str	r1, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ca2:	061b      	lsls	r3, r3, #24
 8003ca4:	d50f      	bpl.n	8003cc6 <UART_AdvFeatureConfig+0x126>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8003ca6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003ca8:	f432 2300 	bics.w	r3, r2, #524288	@ 0x80000
 8003cac:	d005      	beq.n	8003cba <UART_AdvFeatureConfig+0x11a>
 8003cae:	482f      	ldr	r0, [pc, #188]	@ (8003d6c <UART_AdvFeatureConfig+0x1cc>)
 8003cb0:	f640 31ff 	movw	r1, #3071	@ 0xbff
 8003cb4:	f000 fca2 	bl	80045fc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cb8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003cba:	6821      	ldr	r1, [r4, #0]
 8003cbc:	684b      	ldr	r3, [r1, #4]
 8003cbe:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	604b      	str	r3, [r1, #4]
}
 8003cc6:	bd10      	pop	{r4, pc}
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cc8:	6821      	ldr	r1, [r4, #0]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ccc:	684a      	ldr	r2, [r1, #4]
 8003cce:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003cd2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cd4:	e7e5      	b.n	8003ca2 <UART_AdvFeatureConfig+0x102>
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8003cd6:	4825      	ldr	r0, [pc, #148]	@ (8003d6c <UART_AdvFeatureConfig+0x1cc>)
 8003cd8:	f640 31c2 	movw	r1, #3010	@ 0xbc2
 8003cdc:	f000 fc8e 	bl	80045fc <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ce0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003ce2:	e763      	b.n	8003bac <UART_AdvFeatureConfig+0xc>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8003ce4:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8003ce8:	4820      	ldr	r0, [pc, #128]	@ (8003d6c <UART_AdvFeatureConfig+0x1cc>)
 8003cea:	f000 fc87 	bl	80045fc <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cee:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cf0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003cf2:	e7a2      	b.n	8003c3a <UART_AdvFeatureConfig+0x9a>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8003cf4:	f640 31c7 	movw	r1, #3015	@ 0xbc7
 8003cf8:	481c      	ldr	r0, [pc, #112]	@ (8003d6c <UART_AdvFeatureConfig+0x1cc>)
 8003cfa:	f000 fc7f 	bl	80045fc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cfe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d00:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d02:	e75a      	b.n	8003bba <UART_AdvFeatureConfig+0x1a>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8003d04:	f640 31ce 	movw	r1, #3022	@ 0xbce
 8003d08:	4818      	ldr	r0, [pc, #96]	@ (8003d6c <UART_AdvFeatureConfig+0x1cc>)
 8003d0a:	f000 fc77 	bl	80045fc <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d0e:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	@ 0x24
 8003d12:	e75f      	b.n	8003bd4 <UART_AdvFeatureConfig+0x34>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8003d14:	f640 31d5 	movw	r1, #3029	@ 0xbd5
 8003d18:	4814      	ldr	r0, [pc, #80]	@ (8003d6c <UART_AdvFeatureConfig+0x1cc>)
 8003d1a:	f000 fc6f 	bl	80045fc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d1e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d20:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d22:	e764      	b.n	8003bee <UART_AdvFeatureConfig+0x4e>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8003d24:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8003d28:	4810      	ldr	r0, [pc, #64]	@ (8003d6c <UART_AdvFeatureConfig+0x1cc>)
 8003d2a:	f000 fc67 	bl	80045fc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d2e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d30:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d32:	e769      	b.n	8003c08 <UART_AdvFeatureConfig+0x68>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8003d34:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8003d38:	480c      	ldr	r0, [pc, #48]	@ (8003d6c <UART_AdvFeatureConfig+0x1cc>)
 8003d3a:	f000 fc5f 	bl	80045fc <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d3e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d40:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d42:	e76e      	b.n	8003c22 <UART_AdvFeatureConfig+0x82>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8003d44:	f640 31f2 	movw	r1, #3058	@ 0xbf2
 8003d48:	4808      	ldr	r0, [pc, #32]	@ (8003d6c <UART_AdvFeatureConfig+0x1cc>)
 8003d4a:	f000 fc57 	bl	80045fc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d4e:	6822      	ldr	r2, [r4, #0]
 8003d50:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003d52:	6853      	ldr	r3, [r2, #4]
 8003d54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d58:	430b      	orrs	r3, r1
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d5a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d5e:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d60:	d08e      	beq.n	8003c80 <UART_AdvFeatureConfig+0xe0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d62:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d64:	e79d      	b.n	8003ca2 <UART_AdvFeatureConfig+0x102>
 8003d66:	bf00      	nop
 8003d68:	40013800 	.word	0x40013800
 8003d6c:	0800555c 	.word	0x0800555c

08003d70 <UART_WaitOnFlagUntilTimeout>:
{
 8003d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d74:	9f08      	ldr	r7, [sp, #32]
 8003d76:	460d      	mov	r5, r1
 8003d78:	4680      	mov	r8, r0
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d7a:	6801      	ldr	r1, [r0, #0]
{
 8003d7c:	4616      	mov	r6, r2
 8003d7e:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d80:	e001      	b.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 8003d82:	1c78      	adds	r0, r7, #1
 8003d84:	d10a      	bne.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x2c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d86:	69cc      	ldr	r4, [r1, #28]
 8003d88:	ea35 0404 	bics.w	r4, r5, r4
 8003d8c:	bf0c      	ite	eq
 8003d8e:	2401      	moveq	r4, #1
 8003d90:	2400      	movne	r4, #0
 8003d92:	42b4      	cmp	r4, r6
 8003d94:	d0f5      	beq.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 8003d96:	2000      	movs	r0, #0
}
 8003d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9c:	f7fc fa88 	bl	80002b0 <HAL_GetTick>
 8003da0:	eba0 0009 	sub.w	r0, r0, r9
 8003da4:	42b8      	cmp	r0, r7
 8003da6:	d81b      	bhi.n	8003de0 <UART_WaitOnFlagUntilTimeout+0x70>
 8003da8:	b1d7      	cbz	r7, 8003de0 <UART_WaitOnFlagUntilTimeout+0x70>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003daa:	f8d8 1000 	ldr.w	r1, [r8]
 8003dae:	680b      	ldr	r3, [r1, #0]
 8003db0:	075a      	lsls	r2, r3, #29
 8003db2:	d5e8      	bpl.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x16>
 8003db4:	2d80      	cmp	r5, #128	@ 0x80
 8003db6:	d0e6      	beq.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x16>
 8003db8:	2d40      	cmp	r5, #64	@ 0x40
 8003dba:	d0e4      	beq.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dbc:	69cc      	ldr	r4, [r1, #28]
 8003dbe:	f014 0408 	ands.w	r4, r4, #8
 8003dc2:	d10f      	bne.n	8003de4 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc4:	69cb      	ldr	r3, [r1, #28]
 8003dc6:	051b      	lsls	r3, r3, #20
 8003dc8:	d5dd      	bpl.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x16>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003dce:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8003dd0:	4640      	mov	r0, r8
 8003dd2:	f7ff fb45 	bl	8003460 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dd6:	2320      	movs	r3, #32
 8003dd8:	f8c8 3084 	str.w	r3, [r8, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8003ddc:	f888 4078 	strb.w	r4, [r8, #120]	@ 0x78
        return HAL_TIMEOUT;
 8003de0:	2003      	movs	r0, #3
 8003de2:	e7d9      	b.n	8003d98 <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003de4:	2408      	movs	r4, #8
          UART_EndRxTransfer(huart);
 8003de6:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003de8:	620c      	str	r4, [r1, #32]
          UART_EndRxTransfer(huart);
 8003dea:	f7ff fb39 	bl	8003460 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8003dee:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003df0:	f8c8 4084 	str.w	r4, [r8, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8003df4:	f888 3078 	strb.w	r3, [r8, #120]	@ 0x78
          return HAL_ERROR;
 8003df8:	2001      	movs	r0, #1
 8003dfa:	e7cd      	b.n	8003d98 <UART_WaitOnFlagUntilTimeout+0x28>

08003dfc <UART_CheckIdleState>:
{
 8003dfc:	b570      	push	{r4, r5, r6, lr}
 8003dfe:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e00:	2600      	movs	r6, #0
{
 8003e02:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e04:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8003e08:	f7fc fa52 	bl	80002b0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8003e12:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e14:	d40f      	bmi.n	8003e36 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	075b      	lsls	r3, r3, #29
 8003e1a:	d425      	bmi.n	8003e68 <UART_CheckIdleState+0x6c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003e1e:	2220      	movs	r2, #32
 8003e20:	67e2      	str	r2, [r4, #124]	@ 0x7c
  return HAL_OK;
 8003e22:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8003e24:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e28:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e2a:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8003e32:	b002      	add	sp, #8
 8003e34:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	4632      	mov	r2, r6
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e44:	4620      	mov	r0, r4
 8003e46:	f7ff ff93 	bl	8003d70 <UART_WaitOnFlagUntilTimeout>
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d0e2      	beq.n	8003e16 <UART_CheckIdleState+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e50:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	e843 2100 	strex	r1, r2, [r3]
 8003e5c:	2900      	cmp	r1, #0
 8003e5e:	d1f7      	bne.n	8003e50 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 8003e60:	2320      	movs	r3, #32
 8003e62:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8003e64:	2003      	movs	r0, #3
 8003e66:	e7e1      	b.n	8003e2c <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	462b      	mov	r3, r5
 8003e72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e76:	4620      	mov	r0, r4
 8003e78:	f7ff ff7a 	bl	8003d70 <UART_WaitOnFlagUntilTimeout>
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	d0cd      	beq.n	8003e1c <UART_CheckIdleState+0x20>
 8003e80:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e86:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	e843 2100 	strex	r1, r2, [r3]
 8003e8e:	2900      	cmp	r1, #0
 8003e90:	d1f7      	bne.n	8003e82 <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	f103 0208 	add.w	r2, r3, #8
 8003e96:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	f103 0008 	add.w	r0, r3, #8
 8003ea2:	e840 2100 	strex	r1, r2, [r0]
 8003ea6:	2900      	cmp	r1, #0
 8003ea8:	d1f3      	bne.n	8003e92 <UART_CheckIdleState+0x96>
      huart->RxState = HAL_UART_STATE_READY;
 8003eaa:	2320      	movs	r3, #32
 8003eac:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8003eb0:	e7d8      	b.n	8003e64 <UART_CheckIdleState+0x68>
 8003eb2:	bf00      	nop

08003eb4 <HAL_UART_Init>:
  if (huart == NULL)
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d05d      	beq.n	8003f74 <HAL_UART_Init+0xc0>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003eb8:	6982      	ldr	r2, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003eba:	6803      	ldr	r3, [r0, #0]
{
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003ec0:	2a00      	cmp	r2, #0
 8003ec2:	d032      	beq.n	8003f2a <HAL_UART_Init+0x76>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8003f78 <HAL_UART_Init+0xc4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00c      	beq.n	8003ee4 <HAL_UART_Init+0x30>
 8003eca:	f5a2 4274 	sub.w	r2, r2, #62464	@ 0xf400
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d008      	beq.n	8003ee4 <HAL_UART_Init+0x30>
 8003ed2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d004      	beq.n	8003ee4 <HAL_UART_Init+0x30>
 8003eda:	4828      	ldr	r0, [pc, #160]	@ (8003f7c <HAL_UART_Init+0xc8>)
 8003edc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8003ee0:	f000 fb8c 	bl	80045fc <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003ee4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d03e      	beq.n	8003f68 <HAL_UART_Init+0xb4>
  __HAL_UART_DISABLE(huart);
 8003eea:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 8003eee:	2324      	movs	r3, #36	@ 0x24
 8003ef0:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8003ef2:	6813      	ldr	r3, [r2, #0]
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003efa:	bb89      	cbnz	r1, 8003f60 <HAL_UART_Init+0xac>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003efc:	4620      	mov	r0, r4
 8003efe:	f7ff fd07 	bl	8003910 <UART_SetConfig>
 8003f02:	2801      	cmp	r0, #1
 8003f04:	d02a      	beq.n	8003f5c <HAL_UART_Init+0xa8>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f16:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003f1e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003f20:	601a      	str	r2, [r3, #0]
}
 8003f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003f26:	f7ff bf69 	b.w	8003dfc <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003f2a:	4a13      	ldr	r2, [pc, #76]	@ (8003f78 <HAL_UART_Init+0xc4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d0d9      	beq.n	8003ee4 <HAL_UART_Init+0x30>
 8003f30:	f5a2 4274 	sub.w	r2, r2, #62464	@ 0xf400
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d0d5      	beq.n	8003ee4 <HAL_UART_Init+0x30>
 8003f38:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d0d1      	beq.n	8003ee4 <HAL_UART_Init+0x30>
 8003f40:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d0cd      	beq.n	8003ee4 <HAL_UART_Init+0x30>
 8003f48:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d0c9      	beq.n	8003ee4 <HAL_UART_Init+0x30>
 8003f50:	480a      	ldr	r0, [pc, #40]	@ (8003f7c <HAL_UART_Init+0xc8>)
 8003f52:	f240 1131 	movw	r1, #305	@ 0x131
 8003f56:	f000 fb51 	bl	80045fc <assert_failed>
 8003f5a:	e7c3      	b.n	8003ee4 <HAL_UART_Init+0x30>
}
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8003f60:	4620      	mov	r0, r4
 8003f62:	f7ff fe1d 	bl	8003ba0 <UART_AdvFeatureConfig>
 8003f66:	e7c9      	b.n	8003efc <HAL_UART_Init+0x48>
    huart->Lock = HAL_UNLOCKED;
 8003f68:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f000 fd27 	bl	80049c0 <HAL_UART_MspInit>
 8003f72:	e7ba      	b.n	8003eea <HAL_UART_Init+0x36>
}
 8003f74:	2001      	movs	r0, #1
 8003f76:	4770      	bx	lr
 8003f78:	40013800 	.word	0x40013800
 8003f7c:	0800555c 	.word	0x0800555c

08003f80 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	0000      	movs	r0, r0
	...

08003f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f88:	b500      	push	{lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f8a:	2220      	movs	r2, #32
{
 8003f8c:	b0a7      	sub	sp, #156	@ 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f8e:	2100      	movs	r1, #0
 8003f90:	eb0d 0002 	add.w	r0, sp, r2
 8003f94:	f001 f958 	bl	8005248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f98:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f9a:	2258      	movs	r2, #88	@ 0x58
 8003f9c:	a810      	add	r0, sp, #64	@ 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f9e:	e9cd 1101 	strd	r1, r1, [sp, #4]
 8003fa2:	e9cd 1103 	strd	r1, r1, [sp, #12]
 8003fa6:	9105      	str	r1, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fa8:	f001 f94e 	bl	8005248 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003fac:	2001      	movs	r0, #1
 8003fae:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8003fb2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fb6:	2002      	movs	r0, #2
 8003fb8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8003fbc:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fc0:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003fc2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fc6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fc8:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003fca:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fcc:	f7fd fda0 	bl	8001b10 <HAL_RCC_OscConfig>
 8003fd0:	b108      	cbz	r0, 8003fd6 <SystemClock_Config+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fd4:	e7fe      	b.n	8003fd4 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fd6:	220f      	movs	r2, #15
 8003fd8:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fda:	2102      	movs	r1, #2
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fdc:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003fde:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003fe0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fe4:	e9cd 1302 	strd	r1, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fe8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003fec:	f7fe f904 	bl	80021f8 <HAL_RCC_ClockConfig>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	b108      	cbz	r0, 8003ff8 <SystemClock_Config+0x70>
 8003ff4:	b672      	cpsid	i
  while (1)
 8003ff6:	e7fe      	b.n	8003ff6 <SystemClock_Config+0x6e>
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8003ff8:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8004020 <SystemClock_Config+0x98>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM8
 8003ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8004028 <SystemClock_Config+0xa0>)
 8003ffe:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004000:	a810      	add	r0, sp, #64	@ 0x40
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8004002:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004006:	9312      	str	r3, [sp, #72]	@ 0x48
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8004008:	9320      	str	r3, [sp, #128]	@ 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800400a:	f7fe fa39 	bl	8002480 <HAL_RCCEx_PeriphCLKConfig>
 800400e:	b108      	cbz	r0, 8004014 <SystemClock_Config+0x8c>
 8004010:	b672      	cpsid	i
  while (1)
 8004012:	e7fe      	b.n	8004012 <SystemClock_Config+0x8a>
}
 8004014:	b027      	add	sp, #156	@ 0x9c
 8004016:	f85d fb04 	ldr.w	pc, [sp], #4
 800401a:	bf00      	nop
 800401c:	f3af 8000 	nop.w
	...
 8004028:	00302001 	.word	0x00302001

0800402c <main>:
{
 800402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004030:	2400      	movs	r4, #0
{
 8004032:	b095      	sub	sp, #84	@ 0x54
  HAL_Init();
 8004034:	f7fc f91e 	bl	8000274 <HAL_Init>
  SystemClock_Config();
 8004038:	f7ff ffa6 	bl	8003f88 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800403c:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
 8004040:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004044:	4dae      	ldr	r5, [pc, #696]	@ (8004300 <main+0x2d4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004046:	9412      	str	r4, [sp, #72]	@ 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004048:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, ping_drive_Pin|GPIO_PIN_8|LED_out_Pin|GPIO_PIN_10
 800404a:	48ae      	ldr	r0, [pc, #696]	@ (8004304 <main+0x2d8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800404c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004050:	616b      	str	r3, [r5, #20]
 8004052:	696b      	ldr	r3, [r5, #20]
 8004054:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004058:	9306      	str	r3, [sp, #24]
 800405a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800405c:	696b      	ldr	r3, [r5, #20]
 800405e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004062:	616b      	str	r3, [r5, #20]
 8004064:	696b      	ldr	r3, [r5, #20]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800406a:	9307      	str	r3, [sp, #28]
 800406c:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800406e:	696b      	ldr	r3, [r5, #20]
 8004070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004074:	616b      	str	r3, [r5, #20]
 8004076:	696b      	ldr	r3, [r5, #20]
 8004078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407c:	9308      	str	r3, [sp, #32]
 800407e:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004080:	696b      	ldr	r3, [r5, #20]
 8004082:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004086:	616b      	str	r3, [r5, #20]
 8004088:	696b      	ldr	r3, [r5, #20]
 800408a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800408e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004092:	696b      	ldr	r3, [r5, #20]
 8004094:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004098:	616b      	str	r3, [r5, #20]
 800409a:	696b      	ldr	r3, [r5, #20]
 800409c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
  HAL_GPIO_WritePin(GPIOC, ping_drive_Pin|GPIO_PIN_8|LED_out_Pin|GPIO_PIN_10
 80040a0:	f44f 6174 	mov.w	r1, #3904	@ 0xf40
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040a4:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_WritePin(GPIOC, ping_drive_Pin|GPIO_PIN_8|LED_out_Pin|GPIO_PIN_10
 80040a6:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  HAL_GPIO_WritePin(GPIOC, ping_drive_Pin|GPIO_PIN_8|LED_out_Pin|GPIO_PIN_10
 80040aa:	f7fd fc19 	bl	80018e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Boot_Charger_GPIO_Port, Boot_Charger_Pin, GPIO_PIN_RESET);
 80040ae:	4622      	mov	r2, r4
 80040b0:	4895      	ldr	r0, [pc, #596]	@ (8004308 <main+0x2dc>)
 80040b2:	2180      	movs	r1, #128	@ 0x80
 80040b4:	f7fd fc14 	bl	80018e0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040b8:	2603      	movs	r6, #3
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3
 80040ba:	f243 03bb 	movw	r3, #12475	@ 0x30bb
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040be:	4891      	ldr	r0, [pc, #580]	@ (8004304 <main+0x2d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	9410      	str	r4, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c2:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040c4:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c8:	f7fd fa62 	bl	8001590 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_8
 80040cc:	f649 130b 	movw	r3, #39179	@ 0x990b
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d0:	a90e      	add	r1, sp, #56	@ 0x38
 80040d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d6:	e9cd 640f 	strd	r6, r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_8
 80040da:	930e      	str	r3, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040dc:	f7fd fa58 	bl	8001590 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5
 80040e0:	f246 3370 	movw	r3, #25456	@ 0x6370
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e4:	4888      	ldr	r0, [pc, #544]	@ (8004308 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5
 80040e6:	930e      	str	r3, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e8:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ea:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ec:	e9cd 640f 	strd	r6, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f0:	f7fd fa4e 	bl	8001590 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040f4:	f44f 6374 	mov.w	r3, #3904	@ 0xf40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040f8:	4882      	ldr	r0, [pc, #520]	@ (8004304 <main+0x2d8>)
 80040fa:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040fc:	e9cd 370e 	strd	r3, r7, [sp, #56]	@ 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004100:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004104:	f7fd fa44 	bl	8001590 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004108:	4880      	ldr	r0, [pc, #512]	@ (800430c <main+0x2e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800410a:	960f      	str	r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800410c:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800410e:	2604      	movs	r6, #4
  GPIO_InitStruct.Pin = Boot_Charger_Pin;
 8004110:	f04f 0880 	mov.w	r8, #128	@ 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004114:	9410      	str	r4, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004116:	960e      	str	r6, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004118:	f7fd fa3a 	bl	8001590 <HAL_GPIO_Init>
  HAL_GPIO_Init(Boot_Charger_GPIO_Port, &GPIO_InitStruct);
 800411c:	487a      	ldr	r0, [pc, #488]	@ (8004308 <main+0x2dc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411e:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(Boot_Charger_GPIO_Port, &GPIO_InitStruct);
 8004120:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004122:	e9cd 740f 	strd	r7, r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pin = Boot_Charger_Pin;
 8004126:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
  HAL_GPIO_Init(Boot_Charger_GPIO_Port, &GPIO_InitStruct);
 800412a:	f7fd fa31 	bl	8001590 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800412e:	696b      	ldr	r3, [r5, #20]
 8004130:	f043 0302 	orr.w	r3, r3, #2
 8004134:	616b      	str	r3, [r5, #20]
 8004136:	696b      	ldr	r3, [r5, #20]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	9304      	str	r3, [sp, #16]
 800413e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004140:	696b      	ldr	r3, [r5, #20]
 8004142:	433b      	orrs	r3, r7
 8004144:	616b      	str	r3, [r5, #20]
 8004146:	696b      	ldr	r3, [r5, #20]
  htim3.Instance = TIM3;
 8004148:	4d71      	ldr	r5, [pc, #452]	@ (8004310 <main+0x2e4>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800414a:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800414c:	4622      	mov	r2, r4
 800414e:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004150:	9305      	str	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004152:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004154:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004156:	f7fc ff8d 	bl	8001074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800415a:	200c      	movs	r0, #12
 800415c:	f7fc ffd0 	bl	8001100 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8004160:	4622      	mov	r2, r4
 8004162:	4621      	mov	r1, r4
 8004164:	2039      	movs	r0, #57	@ 0x39
 8004166:	f7fc ff85 	bl	8001074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800416a:	2039      	movs	r0, #57	@ 0x39
 800416c:	f7fc ffc8 	bl	8001100 <HAL_NVIC_EnableIRQ>
  htim3.Instance = TIM3;
 8004170:	4b68      	ldr	r3, [pc, #416]	@ (8004314 <main+0x2e8>)
 8004172:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004174:	4628      	mov	r0, r5
  htim3.Init.Period = 52-1;
 8004176:	2333      	movs	r3, #51	@ 0x33
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004178:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
 800417c:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004180:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004184:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004188:	f8c5 8018 	str.w	r8, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800418c:	940d      	str	r4, [sp, #52]	@ 0x34
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800418e:	612c      	str	r4, [r5, #16]
  htim3.Init.Period = 52-1;
 8004190:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004192:	f7fe ff3f 	bl	8003014 <HAL_TIM_Base_Init>
 8004196:	b108      	cbz	r0, 800419c <main+0x170>
 8004198:	b672      	cpsid	i
  while (1)
 800419a:	e7fe      	b.n	800419a <main+0x16e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800419c:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80041a0:	a90e      	add	r1, sp, #56	@ 0x38
 80041a2:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041a4:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80041a8:	f7fe fc42 	bl	8002a30 <HAL_TIM_ConfigClockSource>
 80041ac:	b108      	cbz	r0, 80041b2 <main+0x186>
 80041ae:	b672      	cpsid	i
  while (1)
 80041b0:	e7fe      	b.n	80041b0 <main+0x184>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041b2:	900d      	str	r0, [sp, #52]	@ 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80041b4:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80041b6:	4628      	mov	r0, r5
 80041b8:	a90b      	add	r1, sp, #44	@ 0x2c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80041ba:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80041bc:	f7ff f886 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 80041c0:	b108      	cbz	r0, 80041c6 <main+0x19a>
 80041c2:	b672      	cpsid	i
  while (1)
 80041c4:	e7fe      	b.n	80041c4 <main+0x198>
  hopamp2.Instance = OPAMP2;
 80041c6:	4d54      	ldr	r5, [pc, #336]	@ (8004318 <main+0x2ec>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80041c8:	4b54      	ldr	r3, [pc, #336]	@ (800431c <main+0x2f0>)
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80041ca:	6128      	str	r0, [r5, #16]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80041cc:	e9c5 0008 	strd	r0, r0, [r5, #32]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80041d0:	f04f 0b40 	mov.w	fp, #64	@ 0x40
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80041d4:	f04f 0a0c 	mov.w	sl, #12
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO1;
 80041d8:	f44f 3840 	mov.w	r8, #196608	@ 0x30000
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80041dc:	4628      	mov	r0, r5
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80041de:	e9c5 3b00 	strd	r3, fp, [r5]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80041e2:	f8c5 a00c 	str.w	sl, [r5, #12]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO1;
 80041e6:	f8c5 801c 	str.w	r8, [r5, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80041ea:	f7fd fb93 	bl	8001914 <HAL_OPAMP_Init>
 80041ee:	b988      	cbnz	r0, 8004214 <main+0x1e8>
  hopamp3.Instance = OPAMP3;
 80041f0:	4c4b      	ldr	r4, [pc, #300]	@ (8004320 <main+0x2f4>)
 80041f2:	4b4c      	ldr	r3, [pc, #304]	@ (8004324 <main+0x2f8>)
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80041f4:	6120      	str	r0, [r4, #16]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80041f6:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80041fa:	4620      	mov	r0, r4
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80041fc:	f8c4 b004 	str.w	fp, [r4, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004200:	f8c4 a00c 	str.w	sl, [r4, #12]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO1;
 8004204:	f8c4 801c 	str.w	r8, [r4, #28]
  hopamp3.Instance = OPAMP3;
 8004208:	6023      	str	r3, [r4, #0]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800420a:	f7fd fb83 	bl	8001914 <HAL_OPAMP_Init>
 800420e:	b118      	cbz	r0, 8004218 <main+0x1ec>
 8004210:	b672      	cpsid	i
  while (1)
 8004212:	e7fe      	b.n	8004212 <main+0x1e6>
 8004214:	b672      	cpsid	i
 8004216:	e7fe      	b.n	8004216 <main+0x1ea>
  hopamp4.Instance = OPAMP4;
 8004218:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8004338 <main+0x30c>
 800421c:	4b42      	ldr	r3, [pc, #264]	@ (8004328 <main+0x2fc>)
  hopamp4.Init.Mode = OPAMP_STANDALONE_MODE;
 800421e:	f8c8 0004 	str.w	r0, [r8, #4]
  hopamp4.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8004222:	e9c8 0602 	strd	r0, r6, [r8, #8]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004226:	f8c8 0010 	str.w	r0, [r8, #16]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800422a:	f8c8 0024 	str.w	r0, [r8, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 800422e:	4640      	mov	r0, r8
  hopamp4.Instance = OPAMP4;
 8004230:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8004234:	f7fd fb6e 	bl	8001914 <HAL_OPAMP_Init>
 8004238:	b108      	cbz	r0, 800423e <main+0x212>
 800423a:	b672      	cpsid	i
  while (1)
 800423c:	e7fe      	b.n	800423c <main+0x210>
  htim4.Instance = TIM4;
 800423e:	f8df a0fc 	ldr.w	sl, [pc, #252]	@ 800433c <main+0x310>
 8004242:	4b3a      	ldr	r3, [pc, #232]	@ (800432c <main+0x300>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004244:	900d      	str	r0, [sp, #52]	@ 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004246:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 800424a:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800424e:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004252:	e9ca 0001 	strd	r0, r0, [sl, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004256:	f8ca 0010 	str.w	r0, [sl, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800425a:	f8ca 0018 	str.w	r0, [sl, #24]
  htim4.Instance = TIM4;
 800425e:	f8ca 3000 	str.w	r3, [sl]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004262:	4650      	mov	r0, sl
  htim4.Init.Period = 648;
 8004264:	f44f 7322 	mov.w	r3, #648	@ 0x288
 8004268:	f8ca 300c 	str.w	r3, [sl, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800426c:	f7fe fed2 	bl	8003014 <HAL_TIM_Base_Init>
 8004270:	b108      	cbz	r0, 8004276 <main+0x24a>
 8004272:	b672      	cpsid	i
  while (1)
 8004274:	e7fe      	b.n	8004274 <main+0x248>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004276:	a90e      	add	r1, sp, #56	@ 0x38
 8004278:	4650      	mov	r0, sl
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800427a:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800427e:	f7fe fbd7 	bl	8002a30 <HAL_TIM_ConfigClockSource>
 8004282:	4603      	mov	r3, r0
 8004284:	b108      	cbz	r0, 800428a <main+0x25e>
 8004286:	b672      	cpsid	i
  while (1)
 8004288:	e7fe      	b.n	8004288 <main+0x25c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800428a:	4650      	mov	r0, sl
 800428c:	a90b      	add	r1, sp, #44	@ 0x2c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800428e:	930b      	str	r3, [sp, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004290:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004292:	f7ff f81b 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 8004296:	4603      	mov	r3, r0
 8004298:	b108      	cbz	r0, 800429e <main+0x272>
 800429a:	b672      	cpsid	i
  while (1)
 800429c:	e7fe      	b.n	800429c <main+0x270>
  ADC_ChannelConfTypeDef sConfig = {0};
 800429e:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 80042a2:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
 80042a6:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
  hadc2.Instance = ADC2;
 80042aa:	4821      	ldr	r0, [pc, #132]	@ (8004330 <main+0x304>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80042ac:	4921      	ldr	r1, [pc, #132]	@ (8004334 <main+0x308>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80042ae:	6083      	str	r3, [r0, #8]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80042b0:	e9c0 730a 	strd	r7, r3, [r0, #40]	@ 0x28
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80042b4:	6103      	str	r3, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80042b6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80042ba:	60c3      	str	r3, [r0, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80042bc:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80042c0:	8303      	strh	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80042c2:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80042c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042c8:	e9c0 1300 	strd	r1, r3, [r0]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80042cc:	6146      	str	r6, [r0, #20]
  hadc2.Init.NbrOfConversion = 1;
 80042ce:	61c7      	str	r7, [r0, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80042d0:	f7fc f894 	bl	80003fc <HAL_ADC_Init>
 80042d4:	b108      	cbz	r0, 80042da <main+0x2ae>
 80042d6:	b672      	cpsid	i
  while (1)
 80042d8:	e7fe      	b.n	80042d8 <main+0x2ac>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80042da:	2300      	movs	r3, #0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80042dc:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  sConfig.Offset = 0;
 80042e0:	9313      	str	r3, [sp, #76]	@ 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80042e2:	2701      	movs	r7, #1
 80042e4:	2308      	movs	r3, #8
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 80042e6:	f04f 0906 	mov.w	r9, #6
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80042ea:	4811      	ldr	r0, [pc, #68]	@ (8004330 <main+0x304>)
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 80042ec:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80042f0:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80042f2:	e9cd 370e 	strd	r3, r7, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80042f6:	f7fc fb83 	bl	8000a00 <HAL_ADC_ConfigChannel>
 80042fa:	b308      	cbz	r0, 8004340 <main+0x314>
 80042fc:	b672      	cpsid	i
  while (1)
 80042fe:	e7fe      	b.n	80042fe <main+0x2d2>
 8004300:	40021000 	.word	0x40021000
 8004304:	48000800 	.word	0x48000800
 8004308:	48000400 	.word	0x48000400
 800430c:	48000c00 	.word	0x48000c00
 8004310:	2000019c 	.word	0x2000019c
 8004314:	40000400 	.word	0x40000400
 8004318:	2000029c 	.word	0x2000029c
 800431c:	4001003c 	.word	0x4001003c
 8004320:	20000268 	.word	0x20000268
 8004324:	40010040 	.word	0x40010040
 8004328:	40010044 	.word	0x40010044
 800432c:	40000800 	.word	0x40000800
 8004330:	20000378 	.word	0x20000378
 8004334:	50000100 	.word	0x50000100
 8004338:	20000234 	.word	0x20000234
 800433c:	20000150 	.word	0x20000150
  htim2.Instance = TIM2;
 8004340:	4e9f      	ldr	r6, [pc, #636]	@ (80045c0 <main+0x594>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004342:	900d      	str	r0, [sp, #52]	@ 0x34
  htim2.Instance = TIM2;
 8004344:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004348:	6033      	str	r3, [r6, #0]
  htim2.Init.Period = 312-1;
 800434a:	f240 1337 	movw	r3, #311	@ 0x137
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800434e:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 8004352:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004356:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800435a:	e9c6 0001 	strd	r0, r0, [r6, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800435e:	6130      	str	r0, [r6, #16]
  htim2.Init.Period = 312-1;
 8004360:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004362:	4630      	mov	r0, r6
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004364:	2380      	movs	r3, #128	@ 0x80
 8004366:	61b3      	str	r3, [r6, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004368:	f7fe fe54 	bl	8003014 <HAL_TIM_Base_Init>
 800436c:	b108      	cbz	r0, 8004372 <main+0x346>
 800436e:	b672      	cpsid	i
  while (1)
 8004370:	e7fe      	b.n	8004370 <main+0x344>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004372:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004376:	a90e      	add	r1, sp, #56	@ 0x38
 8004378:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800437a:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800437c:	f7fe fb58 	bl	8002a30 <HAL_TIM_ConfigClockSource>
 8004380:	b108      	cbz	r0, 8004386 <main+0x35a>
 8004382:	b672      	cpsid	i
  while (1)
 8004384:	e7fe      	b.n	8004384 <main+0x358>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004386:	900d      	str	r0, [sp, #52]	@ 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004388:	f04f 0a20 	mov.w	sl, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800438c:	a90b      	add	r1, sp, #44	@ 0x2c
 800438e:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004390:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004394:	f7fe ff9a 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 8004398:	b108      	cbz	r0, 800439e <main+0x372>
 800439a:	b672      	cpsid	i
  while (1)
 800439c:	e7fe      	b.n	800439c <main+0x370>
  hdac1.Instance = DAC1;
 800439e:	f8df b244 	ldr.w	fp, [pc, #580]	@ 80045e4 <main+0x5b8>
 80043a2:	4a88      	ldr	r2, [pc, #544]	@ (80045c4 <main+0x598>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80043a4:	9010      	str	r0, [sp, #64]	@ 0x40
 80043a6:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80043aa:	4658      	mov	r0, fp
  hdac1.Instance = DAC1;
 80043ac:	f8cb 2000 	str.w	r2, [fp]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80043b0:	f7fc fed4 	bl	800115c <HAL_DAC_Init>
 80043b4:	4602      	mov	r2, r0
 80043b6:	b108      	cbz	r0, 80043bc <main+0x390>
 80043b8:	b672      	cpsid	i
  while (1)
 80043ba:	e7fe      	b.n	80043ba <main+0x38e>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80043bc:	4658      	mov	r0, fp
 80043be:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80043c0:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80043c4:	f7fc feee 	bl	80011a4 <HAL_DAC_ConfigChannel>
 80043c8:	4603      	mov	r3, r0
 80043ca:	b108      	cbz	r0, 80043d0 <main+0x3a4>
 80043cc:	b672      	cpsid	i
  while (1)
 80043ce:	e7fe      	b.n	80043ce <main+0x3a2>
  huart1.Instance = USART1;
 80043d0:	487d      	ldr	r0, [pc, #500]	@ (80045c8 <main+0x59c>)
  huart1.Init.BaudRate = 115200;
 80043d2:	f8df e214 	ldr.w	lr, [pc, #532]	@ 80045e8 <main+0x5bc>
  huart1.Init.Parity = UART_PARITY_NONE;
 80043d6:	6103      	str	r3, [r0, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043d8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043dc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043e0:	6203      	str	r3, [r0, #32]
  huart1.Init.BaudRate = 115200;
 80043e2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80043e6:	e9c0 e300 	strd	lr, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043ea:	230c      	movs	r3, #12
 80043ec:	6143      	str	r3, [r0, #20]
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80043ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80043f2:	f8c0 a024 	str.w	sl, [r0, #36]	@ 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80043f6:	63c3      	str	r3, [r0, #60]	@ 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043f8:	f7ff fd5c 	bl	8003eb4 <HAL_UART_Init>
 80043fc:	b108      	cbz	r0, 8004402 <main+0x3d6>
 80043fe:	b672      	cpsid	i
  while (1)
 8004400:	e7fe      	b.n	8004400 <main+0x3d4>
  hadc1.Instance = ADC1;
 8004402:	f8df a1e8 	ldr.w	sl, [pc, #488]	@ 80045ec <main+0x5c0>
  ADC_ChannelConfTypeDef sConfig = {0};
 8004406:	9013      	str	r0, [sp, #76]	@ 0x4c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004408:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800440c:	f04f 4ca0 	mov.w	ip, #1342177280	@ 0x50000000
  ADC_MultiModeTypeDef multimode = {0};
 8004410:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8004414:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 8004418:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
 800441c:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004420:	e9ca 700a 	strd	r7, r0, [sl, #40]	@ 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004424:	e9ca c300 	strd	ip, r3, [sl]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004428:	f8ca 0008 	str.w	r0, [sl, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800442c:	f8ca 0010 	str.w	r0, [sl, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004430:	f88a 0020 	strb.w	r0, [sl, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004434:	f8ca 000c 	str.w	r0, [sl, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004438:	f88a 0030 	strb.w	r0, [sl, #48]	@ 0x30
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800443c:	f8aa 0018 	strh.w	r0, [sl, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004440:	f8ca 0034 	str.w	r0, [sl, #52]	@ 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004444:	2304      	movs	r3, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004446:	4650      	mov	r0, sl
  hadc1.Init.NbrOfConversion = 1;
 8004448:	f8ca 701c 	str.w	r7, [sl, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800444c:	f8ca 3014 	str.w	r3, [sl, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004450:	f7fb ffd4 	bl	80003fc <HAL_ADC_Init>
 8004454:	b108      	cbz	r0, 800445a <main+0x42e>
 8004456:	b672      	cpsid	i
  while (1)
 8004458:	e7fe      	b.n	8004458 <main+0x42c>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800445a:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800445c:	a90b      	add	r1, sp, #44	@ 0x2c
 800445e:	4650      	mov	r0, sl
 8004460:	f7fc fd1e 	bl	8000ea0 <HAL_ADCEx_MultiModeConfigChannel>
 8004464:	4603      	mov	r3, r0
 8004466:	b108      	cbz	r0, 800446c <main+0x440>
 8004468:	b672      	cpsid	i
  while (1)
 800446a:	e7fe      	b.n	800446a <main+0x43e>
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800446c:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  sConfig.Offset = 0;
 8004470:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004472:	4650      	mov	r0, sl
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004474:	2310      	movs	r3, #16
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004476:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8004478:	e9cd 790f 	strd	r7, r9, [sp, #60]	@ 0x3c
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800447c:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800447e:	f7fc fabf 	bl	8000a00 <HAL_ADC_ConfigChannel>
 8004482:	b108      	cbz	r0, 8004488 <main+0x45c>
 8004484:	b672      	cpsid	i
  while (1)
 8004486:	e7fe      	b.n	8004486 <main+0x45a>
  htim8.Instance = TIM8;
 8004488:	4f50      	ldr	r7, [pc, #320]	@ (80045cc <main+0x5a0>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800448a:	2300      	movs	r3, #0
 800448c:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 8004490:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004494:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004498:	e9c7 3301 	strd	r3, r3, [r7, #4]
  htim8.Init.RepetitionCounter = 0;
 800449c:	e9c7 3304 	strd	r3, r3, [r7, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044a0:	930d      	str	r3, [sp, #52]	@ 0x34
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044a2:	61bb      	str	r3, [r7, #24]
  htim8.Instance = TIM8;
 80044a4:	4b4a      	ldr	r3, [pc, #296]	@ (80045d0 <main+0x5a4>)
 80044a6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80044a8:	4638      	mov	r0, r7
  htim8.Init.Period = 65535;
 80044aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80044b0:	f7fe fdb0 	bl	8003014 <HAL_TIM_Base_Init>
 80044b4:	b108      	cbz	r0, 80044ba <main+0x48e>
 80044b6:	b672      	cpsid	i
  while (1)
 80044b8:	e7fe      	b.n	80044b8 <main+0x48c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80044be:	a90e      	add	r1, sp, #56	@ 0x38
 80044c0:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044c2:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80044c4:	f7fe fab4 	bl	8002a30 <HAL_TIM_ConfigClockSource>
 80044c8:	b108      	cbz	r0, 80044ce <main+0x4a2>
 80044ca:	b672      	cpsid	i
  while (1)
 80044cc:	e7fe      	b.n	80044cc <main+0x4a0>
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 80044ce:	2108      	movs	r1, #8
 80044d0:	4638      	mov	r0, r7
 80044d2:	f7fe fe4d 	bl	8003170 <HAL_TIM_OnePulse_Init>
 80044d6:	4603      	mov	r3, r0
 80044d8:	b108      	cbz	r0, 80044de <main+0x4b2>
 80044da:	b672      	cpsid	i
  while (1)
 80044dc:	e7fe      	b.n	80044dc <main+0x4b0>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80044de:	a90b      	add	r1, sp, #44	@ 0x2c
 80044e0:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80044e2:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044e6:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80044e8:	f7fe fef0 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 80044ec:	b108      	cbz	r0, 80044f2 <main+0x4c6>
 80044ee:	b672      	cpsid	i
  while (1)
 80044f0:	e7fe      	b.n	80044f0 <main+0x4c4>
  hadc4.Instance = ADC4;
 80044f2:	4f38      	ldr	r7, [pc, #224]	@ (80045d4 <main+0x5a8>)
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80044f4:	4a38      	ldr	r2, [pc, #224]	@ (80045d8 <main+0x5ac>)
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80044f6:	60b8      	str	r0, [r7, #8]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80044f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80044fc:	e9c7 2300 	strd	r2, r3, [r7]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8004500:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004504:	f44f 7380 	mov.w	r3, #256	@ 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 8004508:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 800450c:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
 8004510:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8004514:	e9c7 310a 	strd	r3, r1, [r7, #40]	@ 0x28
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004518:	6138      	str	r0, [r7, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800451a:	2304      	movs	r3, #4
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800451c:	f887 0020 	strb.w	r0, [r7, #32]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004520:	60f8      	str	r0, [r7, #12]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8004522:	8338      	strh	r0, [r7, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004524:	6378      	str	r0, [r7, #52]	@ 0x34
  hadc4.Init.NbrOfConversion = 1;
 8004526:	f04f 0901 	mov.w	r9, #1
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800452a:	4638      	mov	r0, r7
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800452c:	617b      	str	r3, [r7, #20]
  hadc4.Init.NbrOfConversion = 1;
 800452e:	f8c7 901c 	str.w	r9, [r7, #28]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8004532:	f887 9030 	strb.w	r9, [r7, #48]	@ 0x30
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8004536:	f7fb ff61 	bl	80003fc <HAL_ADC_Init>
 800453a:	4603      	mov	r3, r0
 800453c:	b108      	cbz	r0, 8004542 <main+0x516>
 800453e:	b672      	cpsid	i
  while (1)
 8004540:	e7fe      	b.n	8004540 <main+0x514>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004542:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  sConfig.Offset = 0;
 8004546:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800454a:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.Channel = ADC_CHANNEL_5;
 800454c:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800454e:	4638      	mov	r0, r7
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004550:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
  sConfig.Channel = ADC_CHANNEL_5;
 8004554:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8004556:	f7fc fa53 	bl	8000a00 <HAL_ADC_ConfigChannel>
 800455a:	b108      	cbz	r0, 8004560 <main+0x534>
 800455c:	b672      	cpsid	i
  while (1)
 800455e:	e7fe      	b.n	800455e <main+0x532>
  	  unsigned int csr = (unsigned int) hopamp4.Instance->CSR;
 8004560:	f8d8 2000 	ldr.w	r2, [r8]
  	  hopamp2.Instance->CSR |= 1;	// enable op amp!
 8004564:	6828      	ldr	r0, [r5, #0]
  	  unsigned int csr = (unsigned int) hopamp4.Instance->CSR;
 8004566:	6813      	ldr	r3, [r2, #0]
  	  if ((csr & vpsel_mask) != wanted_vpsel)
 8004568:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 80045f0 <main+0x5c4>
    tof_master_main(&hadc4, &htim3, &huart1, &hopamp2, &hopamp3,
 800456c:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 80045f4 <main+0x5c8>
 8004570:	4f15      	ldr	r7, [pc, #84]	@ (80045c8 <main+0x59c>)
 8004572:	4d1a      	ldr	r5, [pc, #104]	@ (80045dc <main+0x5b0>)
  	  if ((csr & vpsel_mask) != wanted_vpsel)
 8004574:	f003 010c 	and.w	r1, r3, #12
 8004578:	2904      	cmp	r1, #4
  		  csr &= ~vpsel_mask;	// reset VP_SEL bits
 800457a:	bf1c      	itt	ne
 800457c:	f023 030c 	bicne.w	r3, r3, #12
  		  csr |= wanted_vpsel;	// VP_SEL = 01 (PB11)
 8004580:	f043 0304 	orrne.w	r3, r3, #4
  	  hopamp4.Instance->CSR = csr;
 8004584:	6013      	str	r3, [r2, #0]
  	  hopamp4.Instance->CSR |= 1;	// enable op amp!
 8004586:	6813      	ldr	r3, [r2, #0]
  	  hopamp3.Instance->CSR |= 1;	// enable op amp!
 8004588:	6821      	ldr	r1, [r4, #0]
  	  hopamp4.Instance->CSR |= 1;	// enable op amp!
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6013      	str	r3, [r2, #0]
  	  hopamp2.Instance->CSR |= 1;	// enable op amp!
 8004590:	6803      	ldr	r3, [r0, #0]
  	  DBGMCU->APB1FZ |= 1;	// stop timer 2 (HIRES_CLK)
 8004592:	4a13      	ldr	r2, [pc, #76]	@ (80045e0 <main+0x5b4>)
  	  hopamp2.Instance->CSR |= 1;	// enable op amp!
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	6003      	str	r3, [r0, #0]
  	  hopamp3.Instance->CSR |= 1;	// enable op amp!
 800459a:	680b      	ldr	r3, [r1, #0]
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	600b      	str	r3, [r1, #0]
  	  DBGMCU->APB1FZ |= 1;	// stop timer 2 (HIRES_CLK)
 80045a2:	6893      	ldr	r3, [r2, #8]
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6093      	str	r3, [r2, #8]
    tof_master_main(&hadc4, &htim3, &huart1, &hopamp2, &hopamp3,
 80045aa:	e9cd 8601 	strd	r8, r6, [sp, #4]
 80045ae:	4809      	ldr	r0, [pc, #36]	@ (80045d4 <main+0x5a8>)
 80045b0:	9400      	str	r4, [sp, #0]
 80045b2:	464b      	mov	r3, r9
 80045b4:	463a      	mov	r2, r7
 80045b6:	4629      	mov	r1, r5
 80045b8:	f000 fe18 	bl	80051ec <tof_master_main>
  while (1)
 80045bc:	e7f5      	b.n	80045aa <main+0x57e>
 80045be:	bf00      	nop
 80045c0:	200001e8 	.word	0x200001e8
 80045c4:	40007400 	.word	0x40007400
 80045c8:	20000038 	.word	0x20000038
 80045cc:	20000104 	.word	0x20000104
 80045d0:	40013400 	.word	0x40013400
 80045d4:	20000328 	.word	0x20000328
 80045d8:	50000500 	.word	0x50000500
 80045dc:	2000019c 	.word	0x2000019c
 80045e0:	e0042000 	.word	0xe0042000
 80045e4:	200002d0 	.word	0x200002d0
 80045e8:	40013800 	.word	0x40013800
 80045ec:	200003c8 	.word	0x200003c8
 80045f0:	200000c0 	.word	0x200000c0
 80045f4:	2000029c 	.word	0x2000029c

080045f8 <Error_Handler>:
 80045f8:	b672      	cpsid	i
  while (1)
 80045fa:	e7fe      	b.n	80045fa <Error_Handler+0x2>

080045fc <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop

08004600 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004600:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <HAL_MspInit+0x30>)
 8004602:	699a      	ldr	r2, [r3, #24]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	619a      	str	r2, [r3, #24]
 800460a:	699a      	ldr	r2, [r3, #24]
{
 800460c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800460e:	f002 0201 	and.w	r2, r2, #1
 8004612:	9200      	str	r2, [sp, #0]
 8004614:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800461c:	61da      	str	r2, [r3, #28]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8004628:	2005      	movs	r0, #5
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800462a:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800462c:	f7fc bd04 	b.w	8001038 <HAL_NVIC_SetPriorityGrouping>
 8004630:	40021000 	.word	0x40021000

08004634 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004634:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8004636:	6803      	ldr	r3, [r0, #0]
{
 8004638:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800463a:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800463c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004640:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004644:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8004648:	940a      	str	r4, [sp, #40]	@ 0x28
  if(hadc->Instance==ADC1)
 800464a:	d021      	beq.n	8004690 <HAL_ADC_MspInit+0x5c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800464c:	4a45      	ldr	r2, [pc, #276]	@ (8004764 <HAL_ADC_MspInit+0x130>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <HAL_ADC_MspInit+0x28>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC4)
 8004652:	4a45      	ldr	r2, [pc, #276]	@ (8004768 <HAL_ADC_MspInit+0x134>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d04c      	beq.n	80046f2 <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8004658:	b00c      	add	sp, #48	@ 0x30
 800465a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 800465c:	4a43      	ldr	r2, [pc, #268]	@ (800476c <HAL_ADC_MspInit+0x138>)
 800465e:	6813      	ldr	r3, [r2, #0]
 8004660:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004662:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004664:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004666:	d039      	beq.n	80046dc <HAL_ADC_MspInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004668:	4b41      	ldr	r3, [pc, #260]	@ (8004770 <HAL_ADC_MspInit+0x13c>)
    HAL_GPIO_Init(Battery_Sense_In_GPIO_Port, &GPIO_InitStruct);
 800466a:	4842      	ldr	r0, [pc, #264]	@ (8004774 <HAL_ADC_MspInit+0x140>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800466c:	695a      	ldr	r2, [r3, #20]
 800466e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8004672:	615a      	str	r2, [r3, #20]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800467a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = Battery_Sense_In_Pin;
 800467c:	2404      	movs	r4, #4
 800467e:	2503      	movs	r5, #3
    HAL_GPIO_Init(Battery_Sense_In_GPIO_Port, &GPIO_InitStruct);
 8004680:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = Battery_Sense_In_Pin;
 8004682:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004686:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(Battery_Sense_In_GPIO_Port, &GPIO_InitStruct);
 8004688:	f7fc ff82 	bl	8001590 <HAL_GPIO_Init>
}
 800468c:	b00c      	add	sp, #48	@ 0x30
 800468e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004690:	4a36      	ldr	r2, [pc, #216]	@ (800476c <HAL_ADC_MspInit+0x138>)
 8004692:	6813      	ldr	r3, [r2, #0]
 8004694:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004696:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004698:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800469a:	d014      	beq.n	80046c6 <HAL_ADC_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800469c:	4b34      	ldr	r3, [pc, #208]	@ (8004770 <HAL_ADC_MspInit+0x13c>)
 800469e:	695a      	ldr	r2, [r3, #20]
 80046a0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80046a4:	615a      	str	r2, [r3, #20]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = Thermistor_Pin;
 80046ae:	2404      	movs	r4, #4
 80046b0:	2503      	movs	r5, #3
    HAL_GPIO_Init(Thermistor_GPIO_Port, &GPIO_InitStruct);
 80046b2:	a906      	add	r1, sp, #24
 80046b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = Thermistor_Pin;
 80046b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046bc:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(Thermistor_GPIO_Port, &GPIO_InitStruct);
 80046be:	f7fc ff67 	bl	8001590 <HAL_GPIO_Init>
}
 80046c2:	b00c      	add	sp, #48	@ 0x30
 80046c4:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 80046c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004770 <HAL_ADC_MspInit+0x13c>)
 80046c8:	695a      	ldr	r2, [r3, #20]
 80046ca:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80046ce:	615a      	str	r2, [r3, #20]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	9b00      	ldr	r3, [sp, #0]
 80046da:	e7df      	b.n	800469c <HAL_ADC_MspInit+0x68>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80046dc:	4b24      	ldr	r3, [pc, #144]	@ (8004770 <HAL_ADC_MspInit+0x13c>)
 80046de:	695a      	ldr	r2, [r3, #20]
 80046e0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80046e4:	615a      	str	r2, [r3, #20]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ec:	9302      	str	r3, [sp, #8]
 80046ee:	9b02      	ldr	r3, [sp, #8]
 80046f0:	e7ba      	b.n	8004668 <HAL_ADC_MspInit+0x34>
    __HAL_RCC_ADC34_CLK_ENABLE();
 80046f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004770 <HAL_ADC_MspInit+0x13c>)
    hdma_adc4.Instance = DMA2_Channel2;
 80046f4:	4e20      	ldr	r6, [pc, #128]	@ (8004778 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 80046f6:	695a      	ldr	r2, [r3, #20]
 80046f8:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80046fc:	615a      	str	r2, [r3, #20]
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8004704:	9204      	str	r2, [sp, #16]
 8004706:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004708:	695a      	ldr	r2, [r3, #20]
 800470a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800470e:	615a      	str	r2, [r3, #20]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004716:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = Rcv_Siganl_In_Pin;
 8004718:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    HAL_GPIO_Init(Rcv_Siganl_In_GPIO_Port, &GPIO_InitStruct);
 800471c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = Rcv_Siganl_In_Pin;
 800471e:	2303      	movs	r3, #3
 8004720:	4605      	mov	r5, r0
    HAL_GPIO_Init(Rcv_Siganl_In_GPIO_Port, &GPIO_InitStruct);
 8004722:	4816      	ldr	r0, [pc, #88]	@ (800477c <HAL_ADC_MspInit+0x148>)
    GPIO_InitStruct.Pin = Rcv_Siganl_In_Pin;
 8004724:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004728:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(Rcv_Siganl_In_GPIO_Port, &GPIO_InitStruct);
 800472a:	f7fc ff31 	bl	8001590 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 800472e:	4b14      	ldr	r3, [pc, #80]	@ (8004780 <HAL_ADC_MspInit+0x14c>)
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8004730:	60b4      	str	r4, [r6, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8004732:	2280      	movs	r2, #128	@ 0x80
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004734:	e9c6 3400 	strd	r3, r4, [r6]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004738:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800473c:	e9c6 2303 	strd	r2, r3, [r6, #12]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004740:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004744:	2220      	movs	r2, #32
    hdma_adc4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004746:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800474a:	4630      	mov	r0, r6
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800474c:	e9c6 1205 	strd	r1, r2, [r6, #20]
    hdma_adc4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004750:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8004752:	f7fc fd7f 	bl	8001254 <HAL_DMA_Init>
 8004756:	b910      	cbnz	r0, 800475e <HAL_ADC_MspInit+0x12a>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8004758:	63ae      	str	r6, [r5, #56]	@ 0x38
 800475a:	6275      	str	r5, [r6, #36]	@ 0x24
}
 800475c:	e77c      	b.n	8004658 <HAL_ADC_MspInit+0x24>
      Error_Handler();
 800475e:	f7ff ff4b 	bl	80045f8 <Error_Handler>
 8004762:	e7f9      	b.n	8004758 <HAL_ADC_MspInit+0x124>
 8004764:	50000100 	.word	0x50000100
 8004768:	50000500 	.word	0x50000500
 800476c:	20000418 	.word	0x20000418
 8004770:	40021000 	.word	0x40021000
 8004774:	48000800 	.word	0x48000800
 8004778:	200002e4 	.word	0x200002e4
 800477c:	48000400 	.word	0x48000400
 8004780:	4002041c 	.word	0x4002041c
 8004784:	00000000 	.word	0x00000000

08004788 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004788:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 800478a:	4a1b      	ldr	r2, [pc, #108]	@ (80047f8 <HAL_DAC_MspInit+0x70>)
 800478c:	6801      	ldr	r1, [r0, #0]
{
 800478e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004790:	2300      	movs	r3, #0
  if(hdac->Instance==DAC1)
 8004792:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004794:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004798:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800479c:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC1)
 800479e:	d002      	beq.n	80047a6 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80047a0:	b009      	add	sp, #36	@ 0x24
 80047a2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 80047a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047aa:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80047ae:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80047f0 <HAL_DAC_MspInit+0x68>
    __HAL_RCC_DAC1_CLK_ENABLE();
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80047b8:	61da      	str	r2, [r3, #28]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 80047c0:	9200      	str	r2, [sp, #0]
 80047c2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047c4:	695a      	ldr	r2, [r3, #20]
 80047c6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80047ca:	615a      	str	r2, [r3, #20]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d4:	a902      	add	r1, sp, #8
 80047d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80047da:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047de:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047e0:	f7fc fed6 	bl	8001590 <HAL_GPIO_Init>
}
 80047e4:	b009      	add	sp, #36	@ 0x24
 80047e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80047ea:	bf00      	nop
 80047ec:	f3af 8000 	nop.w
 80047f0:	00000010 	.word	0x00000010
 80047f4:	00000003 	.word	0x00000003
 80047f8:	40007400 	.word	0x40007400
 80047fc:	00000000 	.word	0x00000000

08004800 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004800:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP2)
 8004802:	6802      	ldr	r2, [r0, #0]
 8004804:	4934      	ldr	r1, [pc, #208]	@ (80048d8 <HAL_OPAMP_MspInit+0xd8>)
{
 8004806:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004808:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP2)
 800480a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800480c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004810:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004814:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP2)
 8004816:	d008      	beq.n	800482a <HAL_OPAMP_MspInit+0x2a>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 8004818:	4b30      	ldr	r3, [pc, #192]	@ (80048dc <HAL_OPAMP_MspInit+0xdc>)
 800481a:	429a      	cmp	r2, r3
 800481c:	d01e      	beq.n	800485c <HAL_OPAMP_MspInit+0x5c>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP4)
 800481e:	4b30      	ldr	r3, [pc, #192]	@ (80048e0 <HAL_OPAMP_MspInit+0xe0>)
 8004820:	429a      	cmp	r2, r3
 8004822:	d033      	beq.n	800488c <HAL_OPAMP_MspInit+0x8c>
  /* USER CODE BEGIN OPAMP4_MspInit 1 */

  /* USER CODE END OPAMP4_MspInit 1 */
  }

}
 8004824:	b00b      	add	sp, #44	@ 0x2c
 8004826:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800482a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800482e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004832:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 80048c0 <HAL_OPAMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800483c:	615a      	str	r2, [r3, #20]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004844:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004846:	a904      	add	r1, sp, #16
 8004848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800484c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004850:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004852:	f7fc fe9d 	bl	8001590 <HAL_GPIO_Init>
}
 8004856:	b00b      	add	sp, #44	@ 0x2c
 8004858:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800485c:	f503 3387 	add.w	r3, r3, #69120	@ 0x10e00
 8004860:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8004864:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004866:	481f      	ldr	r0, [pc, #124]	@ (80048e4 <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004868:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800486c:	615a      	str	r2, [r3, #20]
 800486e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004870:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80048c8 <HAL_OPAMP_MspInit+0xc8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004874:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004878:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800487a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800487c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004880:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004882:	f7fc fe85 	bl	8001590 <HAL_GPIO_Init>
}
 8004886:	b00b      	add	sp, #44	@ 0x2c
 8004888:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800488c:	f503 3387 	add.w	r3, r3, #69120	@ 0x10e00
 8004890:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004894:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004896:	4813      	ldr	r0, [pc, #76]	@ (80048e4 <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004898:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800489c:	615a      	str	r2, [r3, #20]
 800489e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80048a0:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80048d0 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048a8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048aa:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80048ac:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048b0:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b2:	f7fc fe6d 	bl	8001590 <HAL_GPIO_Init>
}
 80048b6:	b00b      	add	sp, #44	@ 0x2c
 80048b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80048bc:	f3af 8000 	nop.w
 80048c0:	000000e0 	.word	0x000000e0
 80048c4:	00000003 	.word	0x00000003
 80048c8:	00000007 	.word	0x00000007
 80048cc:	00000003 	.word	0x00000003
 80048d0:	00001c00 	.word	0x00001c00
 80048d4:	00000003 	.word	0x00000003
 80048d8:	4001003c 	.word	0x4001003c
 80048dc:	40010040 	.word	0x40010040
 80048e0:	40010044 	.word	0x40010044
 80048e4:	48000400 	.word	0x48000400

080048e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048e8:	b530      	push	{r4, r5, lr}
  if(htim_base->Instance==TIM2)
 80048ea:	6803      	ldr	r3, [r0, #0]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
{
 80048f0:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM2)
 80048f2:	d022      	beq.n	800493a <HAL_TIM_Base_MspInit+0x52>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80048f4:	4a2c      	ldr	r2, [pc, #176]	@ (80049a8 <HAL_TIM_Base_MspInit+0xc0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d007      	beq.n	800490a <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80048fa:	4a2c      	ldr	r2, [pc, #176]	@ (80049ac <HAL_TIM_Base_MspInit+0xc4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d010      	beq.n	8004922 <HAL_TIM_Base_MspInit+0x3a>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 8004900:	4a2b      	ldr	r2, [pc, #172]	@ (80049b0 <HAL_TIM_Base_MspInit+0xc8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d041      	beq.n	800498a <HAL_TIM_Base_MspInit+0xa2>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004906:	b005      	add	sp, #20
 8004908:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800490a:	4b2a      	ldr	r3, [pc, #168]	@ (80049b4 <HAL_TIM_Base_MspInit+0xcc>)
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	f042 0202 	orr.w	r2, r2, #2
 8004912:	61da      	str	r2, [r3, #28]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	9301      	str	r3, [sp, #4]
 800491c:	9b01      	ldr	r3, [sp, #4]
}
 800491e:	b005      	add	sp, #20
 8004920:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004922:	4b24      	ldr	r3, [pc, #144]	@ (80049b4 <HAL_TIM_Base_MspInit+0xcc>)
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	f042 0204 	orr.w	r2, r2, #4
 800492a:	61da      	str	r2, [r3, #28]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	9302      	str	r3, [sp, #8]
 8004934:	9b02      	ldr	r3, [sp, #8]
}
 8004936:	b005      	add	sp, #20
 8004938:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800493a:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    hdma_tim2_up.Instance = DMA1_Channel2;
 800493e:	4d1e      	ldr	r5, [pc, #120]	@ (80049b8 <HAL_TIM_Base_MspInit+0xd0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004940:	69da      	ldr	r2, [r3, #28]
    hdma_tim2_up.Instance = DMA1_Channel2;
 8004942:	491e      	ldr	r1, [pc, #120]	@ (80049bc <HAL_TIM_Base_MspInit+0xd4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004944:	f042 0201 	orr.w	r2, r2, #1
 8004948:	61da      	str	r2, [r3, #28]
 800494a:	69db      	ldr	r3, [r3, #28]
    hdma_tim2_up.Instance = DMA1_Channel2;
 800494c:	6029      	str	r1, [r5, #0]
    __HAL_RCC_TIM2_CLK_ENABLE();
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	9300      	str	r3, [sp, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004954:	2110      	movs	r1, #16
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8004956:	2300      	movs	r3, #0
 8004958:	e9c5 1301 	strd	r1, r3, [r5, #4]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 800495c:	2280      	movs	r2, #128	@ 0x80
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800495e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004962:	e9c5 2303 	strd	r2, r3, [r5, #12]
 8004966:	4604      	mov	r4, r0
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004968:	f44f 6100 	mov.w	r1, #2048	@ 0x800
    __HAL_RCC_TIM2_CLK_ENABLE();
 800496c:	9800      	ldr	r0, [sp, #0]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800496e:	2220      	movs	r2, #32
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
 8004970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8004974:	4628      	mov	r0, r5
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004976:	e9c5 1205 	strd	r1, r2, [r5, #20]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
 800497a:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 800497c:	f7fc fc6a 	bl	8001254 <HAL_DMA_Init>
 8004980:	b978      	cbnz	r0, 80049a2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8004982:	6225      	str	r5, [r4, #32]
 8004984:	626c      	str	r4, [r5, #36]	@ 0x24
}
 8004986:	b005      	add	sp, #20
 8004988:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM8_CLK_ENABLE();
 800498a:	4b0a      	ldr	r3, [pc, #40]	@ (80049b4 <HAL_TIM_Base_MspInit+0xcc>)
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004992:	619a      	str	r2, [r3, #24]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800499a:	9303      	str	r3, [sp, #12]
 800499c:	9b03      	ldr	r3, [sp, #12]
}
 800499e:	b005      	add	sp, #20
 80049a0:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80049a2:	f7ff fe29 	bl	80045f8 <Error_Handler>
 80049a6:	e7ec      	b.n	8004982 <HAL_TIM_Base_MspInit+0x9a>
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40000800 	.word	0x40000800
 80049b0:	40013400 	.word	0x40013400
 80049b4:	40021000 	.word	0x40021000
 80049b8:	200000c0 	.word	0x200000c0
 80049bc:	4002001c 	.word	0x4002001c

080049c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049c0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 80049c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004a38 <HAL_UART_MspInit+0x78>)
 80049c4:	6801      	ldr	r1, [r0, #0]
{
 80049c6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c8:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 80049ca:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049cc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80049d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80049d4:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART1)
 80049d6:	d001      	beq.n	80049dc <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80049d8:	b008      	add	sp, #32
 80049da:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80049dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049e0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049e4:	2403      	movs	r4, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 80049e6:	6998      	ldr	r0, [r3, #24]
 80049e8:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 80049ec:	6198      	str	r0, [r3, #24]
 80049ee:	6998      	ldr	r0, [r3, #24]
 80049f0:	f400 4080 	and.w	r0, r0, #16384	@ 0x4000
 80049f4:	9000      	str	r0, [sp, #0]
 80049f6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049f8:	6958      	ldr	r0, [r3, #20]
 80049fa:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80049fe:	6158      	str	r0, [r3, #20]
 8004a00:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a02:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a08:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a0a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a14:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a16:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a1c:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a1e:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a20:	f7fc fdb6 	bl	8001590 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 3);
 8004a24:	4622      	mov	r2, r4
 8004a26:	4621      	mov	r1, r4
 8004a28:	2025      	movs	r0, #37	@ 0x25
 8004a2a:	f7fc fb23 	bl	8001074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a2e:	2025      	movs	r0, #37	@ 0x25
 8004a30:	f7fc fb66 	bl	8001100 <HAL_NVIC_EnableIRQ>
}
 8004a34:	b008      	add	sp, #32
 8004a36:	bd10      	pop	{r4, pc}
 8004a38:	40013800 	.word	0x40013800

08004a3c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a3c:	f7fb bc2c 	b.w	8000298 <HAL_IncTick>

08004a40 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8004a40:	4801      	ldr	r0, [pc, #4]	@ (8004a48 <DMA1_Channel2_IRQHandler+0x8>)
 8004a42:	f7fc bd5b 	b.w	80014fc <HAL_DMA_IRQHandler>
 8004a46:	bf00      	nop
 8004a48:	200000c0 	.word	0x200000c0

08004a4c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a4c:	4801      	ldr	r0, [pc, #4]	@ (8004a54 <USART1_IRQHandler+0x8>)
 8004a4e:	f7fe bdc9 	b.w	80035e4 <HAL_UART_IRQHandler>
 8004a52:	bf00      	nop
 8004a54:	20000038 	.word	0x20000038

08004a58 <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8004a58:	4801      	ldr	r0, [pc, #4]	@ (8004a60 <DMA2_Channel2_IRQHandler+0x8>)
 8004a5a:	f7fc bd4f 	b.w	80014fc <HAL_DMA_IRQHandler>
 8004a5e:	bf00      	nop
 8004a60:	200002e4 	.word	0x200002e4

08004a64 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a64:	4815      	ldr	r0, [pc, #84]	@ (8004abc <SystemInit+0x58>)
#endif

/* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004a66:	4b16      	ldr	r3, [pc, #88]	@ (8004ac0 <SystemInit+0x5c>)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a68:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004a6c:	4a15      	ldr	r2, [pc, #84]	@ (8004ac4 <SystemInit+0x60>)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a6e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
{
 8004a72:	b410      	push	{r4}
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a74:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
  RCC->CR |= 0x00000001U;
 8004a78:	6818      	ldr	r0, [r3, #0]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004a7a:	4913      	ldr	r1, [pc, #76]	@ (8004ac8 <SystemInit+0x64>)
  RCC->CR |= 0x00000001U;
 8004a7c:	f040 0001 	orr.w	r0, r0, #1
 8004a80:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 8004a82:	685c      	ldr	r4, [r3, #4]
 8004a84:	4022      	ands	r2, r4
 8004a86:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8004a88:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  RCC->CR &= 0xFEF6FFFFU;
 8004a8e:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8004a92:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004a96:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a9e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	f422 02fe 	bic.w	r2, r2, #8323072	@ 0x7f0000
 8004aa6:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aaa:	f022 020f 	bic.w	r2, r2, #15
 8004aae:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004ab0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  RCC->CIR = 0x00000000U;
 8004ab2:	2000      	movs	r0, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004ab4:	4011      	ands	r1, r2
 8004ab6:	6319      	str	r1, [r3, #48]	@ 0x30
  RCC->CIR = 0x00000000U;
 8004ab8:	6098      	str	r0, [r3, #8]
}
 8004aba:	4770      	bx	lr
 8004abc:	e000ed00 	.word	0xe000ed00
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	f87fc00c 	.word	0xf87fc00c
 8004ac8:	ff00fccc 	.word	0xff00fccc

08004acc <_ZN11IndexInfoTXC1EP20__UART_HandleTypeDef>:

#include "main.h"
#include "index_info_tx.h"

IndexInfoTX :: IndexInfoTX(UART_HandleTypeDef* p_huart) {
    this->p_huart = p_huart;
 8004acc:	6001      	str	r1, [r0, #0]
}
 8004ace:	4770      	bx	lr

08004ad0 <_ZN11IndexInfoTX12transmit_idxEiit>:
Args:
 - buffer index
 - index prefix
 - peak value (at index)
*/
void IndexInfoTX :: transmit_idx(int buf_idx, int pre_idx, uint16_t peak_val) {
 8004ad0:	4684      	mov	ip, r0
 8004ad2:	b500      	push	{lr}
    send_buf[0] = IdxInfoHeader::INDEX;
 8004ad4:	20f0      	movs	r0, #240	@ 0xf0
    *((uint16_t*)(send_buf + 1)) = (uint16_t) buf_idx;
    *((uint16_t*)(send_buf + 3)) = (uint16_t) pre_idx;
    *((uint16_t*)(send_buf + 5)) = peak_val;
	HAL_UART_Transmit_IT(p_huart, send_buf, IITX_PACKET_LEN); 
 8004ad6:	46e6      	mov	lr, ip
    send_buf[0] = IdxInfoHeader::INDEX;
 8004ad8:	f88c 0004 	strb.w	r0, [ip, #4]
	HAL_UART_Transmit_IT(p_huart, send_buf, IITX_PACKET_LEN); 
 8004adc:	f85e 0b04 	ldr.w	r0, [lr], #4
    *((uint16_t*)(send_buf + 1)) = (uint16_t) buf_idx;
 8004ae0:	f8ac 1005 	strh.w	r1, [ip, #5]
    *((uint16_t*)(send_buf + 3)) = (uint16_t) pre_idx;
 8004ae4:	f8ac 2007 	strh.w	r2, [ip, #7]
	HAL_UART_Transmit_IT(p_huart, send_buf, IITX_PACKET_LEN); 
 8004ae8:	4671      	mov	r1, lr
    *((uint16_t*)(send_buf + 5)) = peak_val;
 8004aea:	f8ac 3009 	strh.w	r3, [ip, #9]
}
 8004aee:	f85d eb04 	ldr.w	lr, [sp], #4
	HAL_UART_Transmit_IT(p_huart, send_buf, IITX_PACKET_LEN); 
 8004af2:	2207      	movs	r2, #7
 8004af4:	f7fe bd32 	b.w	800355c <HAL_UART_Transmit_IT>

08004af8 <_ZN11IndexInfoTX14transmit_err_1Eii>:
/*
Args:
 - buffer index
 - index prefix
*/
void IndexInfoTX :: transmit_err_1(int buf_idx, int pre_idx) {
 8004af8:	4603      	mov	r3, r0
    send_buf[0] = IdxInfoHeader::ERR_1;
    *((uint16_t*)(send_buf + 1)) = (uint16_t) buf_idx;
    *((uint16_t*)(send_buf + 3)) = (uint16_t) pre_idx;
    send_buf[5] = 0;
    send_buf[6] = 0;
	HAL_UART_Transmit_IT(p_huart, send_buf, IITX_PACKET_LEN);
 8004afa:	4684      	mov	ip, r0
    send_buf[0] = IdxInfoHeader::ERR_1;
 8004afc:	20f8      	movs	r0, #248	@ 0xf8
 8004afe:	7118      	strb	r0, [r3, #4]
    send_buf[5] = 0;
 8004b00:	2000      	movs	r0, #0
 8004b02:	f8a3 0009 	strh.w	r0, [r3, #9]
	HAL_UART_Transmit_IT(p_huart, send_buf, IITX_PACKET_LEN);
 8004b06:	f85c 0b04 	ldr.w	r0, [ip], #4
    *((uint16_t*)(send_buf + 1)) = (uint16_t) buf_idx;
 8004b0a:	f8a3 1005 	strh.w	r1, [r3, #5]
    *((uint16_t*)(send_buf + 3)) = (uint16_t) pre_idx;
 8004b0e:	f8a3 2007 	strh.w	r2, [r3, #7]
	HAL_UART_Transmit_IT(p_huart, send_buf, IITX_PACKET_LEN);
 8004b12:	4661      	mov	r1, ip
 8004b14:	2207      	movs	r2, #7
 8004b16:	f7fe bd21 	b.w	800355c <HAL_UART_Transmit_IT>
 8004b1a:	bf00      	nop

08004b1c <_ZN15MaxPeakDetectorC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDefP11IndexInfoTX>:
    search_threshold_reduction = 5; 
    search_window = 200;
    dead_zone_len = 4000;
    search_threshold = 2500;
*/
MaxPeakDetector :: MaxPeakDetector(ADC_HandleTypeDef* p_hadc, TIM_HandleTypeDef* p_htim, IndexInfoTX* p_index_info_tx) {
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	460d      	mov	r5, r1
    this->p_hadc = p_hadc;
    this->p_htim = p_htim;
    this->p_index_info_tx = p_index_info_tx;

	//initialise search sub-state:
	search_sub_state = MPDSearchState::FIND_SIGNAL;
 8004b20:	2100      	movs	r1, #0
 8004b22:	e9c0 3102 	strd	r3, r1, [r0, #8]
    //initialise start index of adc buffer (start half way through DMA will start at beginning):
    cur_idx = BUF_LEN/2;

    //set default parameter values:
    min_aid = false;
    search_threshold_reduction = 5; 
 8004b26:	f04f 33ff 	mov.w	r3, #4294967295
    this->p_htim = p_htim;
 8004b2a:	e9c0 5200 	strd	r5, r2, [r0]
    search_threshold_reduction = 5; 
 8004b2e:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
MaxPeakDetector :: MaxPeakDetector(ADC_HandleTypeDef* p_hadc, TIM_HandleTypeDef* p_htim, IndexInfoTX* p_index_info_tx) {
 8004b32:	4616      	mov	r6, r2
    search_threshold_reduction = 5; 
 8004b34:	2364      	movs	r3, #100	@ 0x64
 8004b36:	2205      	movs	r2, #5
 8004b38:	e9c0 110c 	strd	r1, r1, [r0, #48]	@ 0x30
 8004b3c:	e9c0 1110 	strd	r1, r1, [r0, #64]	@ 0x40
 8004b40:	e9c0 1112 	strd	r1, r1, [r0, #72]	@ 0x48
 8004b44:	e9c0 2305 	strd	r2, r3, [r0, #20]
    min_aid = false;
 8004b48:	7401      	strb	r1, [r0, #16]
    search_threshold_reduction = 5; 
 8004b4a:	6241      	str	r1, [r0, #36]	@ 0x24
 8004b4c:	6381      	str	r1, [r0, #56]	@ 0x38
MaxPeakDetector :: MaxPeakDetector(ADC_HandleTypeDef* p_hadc, TIM_HandleTypeDef* p_htim, IndexInfoTX* p_index_info_tx) {
 8004b4e:	4604      	mov	r4, r0
    search_threshold_reduction = 5; 
 8004b50:	f640 0334 	movw	r3, #2100	@ 0x834
 8004b54:	f243 40bc 	movw	r0, #13500	@ 0x34bc
 8004b58:	e9c4 0307 	strd	r0, r3, [r4, #28]
    window_count = 0;
    dead_zone_count = 0;

	//zero initialise the adc buffer:
	for (int i = 0; i < BUF_LEN; i++) {
		buf[i] = 0;
 8004b5c:	4f0b      	ldr	r7, [pc, #44]	@ (8004b8c <_ZN15MaxPeakDetectorC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDefP11IndexInfoTX+0x70>)
    search_threshold_reduction = 5; 
 8004b5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b62:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8004b64:	f242 3328 	movw	r3, #9000	@ 0x2328
 8004b68:	6523      	str	r3, [r4, #80]	@ 0x50
		buf[i] = 0;
 8004b6a:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8004b6e:	4638      	mov	r0, r7
 8004b70:	f000 fb6a 	bl	8005248 <memset>
	}

	//start ADC timer
	HAL_TIM_Base_Start(p_htim);
 8004b74:	4630      	mov	r0, r6
 8004b76:	f7fd feed 	bl	8002954 <HAL_TIM_Base_Start>
	// Start DMA
	HAL_ADC_Start_DMA(p_hadc, (uint32_t*)buf, BUF_LEN);
 8004b7a:	f244 6250 	movw	r2, #18000	@ 0x4650
 8004b7e:	4639      	mov	r1, r7
 8004b80:	4628      	mov	r0, r5
 8004b82:	f7fb fe7b 	bl	800087c <HAL_ADC_Start_DMA>
}
 8004b86:	4620      	mov	r0, r4
 8004b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000420 	.word	0x20000420

08004b90 <_ZN15MaxPeakDetector11search_loopEv>:
    last_peak_pfx = -1;
    return tmsp;
}


void MaxPeakDetector :: search_loop() {
 8004b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b92:	4e48      	ldr	r6, [pc, #288]	@ (8004cb4 <_ZN15MaxPeakDetector11search_loopEv+0x124>)
 8004b94:	4d48      	ldr	r5, [pc, #288]	@ (8004cb8 <_ZN15MaxPeakDetector11search_loopEv+0x128>)
 8004b96:	4604      	mov	r4, r0
    int peak_found = false;

	while (1) {
		cur_val = buf[cur_idx];

		switch (search_sub_state)
 8004b98:	68e3      	ldr	r3, [r4, #12]
		cur_val = buf[cur_idx];
 8004b9a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
		switch (search_sub_state)
 8004b9c:	2b01      	cmp	r3, #1
		cur_val = buf[cur_idx];
 8004b9e:	f836 1012 	ldrh.w	r1, [r6, r2, lsl #1]
		switch (search_sub_state)
 8004ba2:	d03a      	beq.n	8004c1a <_ZN15MaxPeakDetector11search_loopEv+0x8a>
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d025      	beq.n	8004bf4 <_ZN15MaxPeakDetector11search_loopEv+0x64>
 8004ba8:	b1d3      	cbz	r3, 8004be0 <_ZN15MaxPeakDetector11search_loopEv+0x50>
		// conditions to escape search mode
        if (peak_found) { // we found a peak and need to terminate
            peak_found = false;
            global_state = MPDState::IDLE;
			break;
		} else if ((global_state == MPDState::PROC_BUF_1ST_HLF) && (cur_idx >= (BUF_LEN/2))) {
 8004baa:	682b      	ldr	r3, [r5, #0]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d006      	beq.n	8004bbe <_ZN15MaxPeakDetector11search_loopEv+0x2e>
			global_state = MPDState::IDLE;
			break;
		} else if (global_state == MPDState::PROC_BUF_2ND_HLF && (cur_idx >= (BUF_LEN))) {
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d00b      	beq.n	8004bce <_ZN15MaxPeakDetector11search_loopEv+0x3e>
			global_state = MPDState::IDLE;
			cur_idx = 0;
			break;
		} else if (global_state == MPDState::ERROR_1) {
 8004bb6:	682b      	ldr	r3, [r5, #0]
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d1ed      	bne.n	8004b98 <_ZN15MaxPeakDetector11search_loopEv+0x8>
			break;
		} 
	} //while

}
 8004bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if ((global_state == MPDState::PROC_BUF_1ST_HLF) && (cur_idx >= (BUF_LEN/2))) {
 8004bbe:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004bc0:	f242 3327 	movw	r3, #8999	@ 0x2327
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	ddf3      	ble.n	8004bb0 <_ZN15MaxPeakDetector11search_loopEv+0x20>
			global_state = MPDState::IDLE;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	602b      	str	r3, [r5, #0]
}
 8004bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (global_state == MPDState::PROC_BUF_2ND_HLF && (cur_idx >= (BUF_LEN))) {
 8004bce:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004bd0:	f244 634f 	movw	r3, #17999	@ 0x464f
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	ddee      	ble.n	8004bb6 <_ZN15MaxPeakDetector11search_loopEv+0x26>
			global_state = MPDState::IDLE;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	602b      	str	r3, [r5, #0]
			cur_idx = 0;
 8004bdc:	6523      	str	r3, [r4, #80]	@ 0x50
}
 8004bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (cur_val > search_threshold) {
 8004be0:	6a23      	ldr	r3, [r4, #32]
 8004be2:	428b      	cmp	r3, r1
					search_sub_state = MPDSearchState::FIND_WINDOW_MAX;
 8004be4:	bfb8      	it	lt
 8004be6:	2301      	movlt	r3, #1
				cur_idx += 3;
 8004be8:	f102 0203 	add.w	r2, r2, #3
					search_sub_state = MPDSearchState::FIND_WINDOW_MAX;
 8004bec:	bfb8      	it	lt
 8004bee:	60e3      	strlt	r3, [r4, #12]
				cur_idx += 3;
 8004bf0:	6522      	str	r2, [r4, #80]	@ 0x50
				break;
 8004bf2:	e7da      	b.n	8004baa <_ZN15MaxPeakDetector11search_loopEv+0x1a>
                if (dead_zone_len > 0) {
 8004bf4:	69e3      	ldr	r3, [r4, #28]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	dd50      	ble.n	8004c9c <_ZN15MaxPeakDetector11search_loopEv+0x10c>
                    cur_idx = (cur_idx + dead_zone_len) % BUF_LEN;
 8004bfa:	4930      	ldr	r1, [pc, #192]	@ (8004cbc <_ZN15MaxPeakDetector11search_loopEv+0x12c>)
 8004bfc:	441a      	add	r2, r3
 8004bfe:	fb81 3102 	smull	r3, r1, r1, r2
 8004c02:	17d3      	asrs	r3, r2, #31
 8004c04:	ebc3 3361 	rsb	r3, r3, r1, asr #13
 8004c08:	f244 6150 	movw	r1, #18000	@ 0x4650
 8004c0c:	fb01 2313 	mls	r3, r1, r3, r2
                search_sub_state = MPDSearchState::FIND_SIGNAL;
 8004c10:	2200      	movs	r2, #0
 8004c12:	6523      	str	r3, [r4, #80]	@ 0x50
 8004c14:	60e2      	str	r2, [r4, #12]
            global_state = MPDState::IDLE;
 8004c16:	602a      	str	r2, [r5, #0]
}
 8004c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				window_count++;
 8004c1a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
				if (window_count > search_window) { // window is complete
 8004c1c:	69a7      	ldr	r7, [r4, #24]
                        last_peak_val = tentative_max_val;
 8004c1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
				window_count++;
 8004c20:	3001      	adds	r0, #1
				if (window_count > search_window) { // window is complete
 8004c22:	42b8      	cmp	r0, r7
				window_count++;
 8004c24:	64a0      	str	r0, [r4, #72]	@ 0x48
				if (window_count > search_window) { // window is complete
 8004c26:	dd2f      	ble.n	8004c88 <_ZN15MaxPeakDetector11search_loopEv+0xf8>
                    if (min_aid) {
 8004c28:	7c20      	ldrb	r0, [r4, #16]
                        Timestamp max_tmsp(tentative_max_idx, tentative_max_pfx);
 8004c2a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c2c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
                    if (min_aid) {
 8004c2e:	b1b0      	cbz	r0, 8004c5e <_ZN15MaxPeakDetector11search_loopEv+0xce>

/*
* Returns the total timestamp integer from the Timestamp object
*/
int Timestamp::get_total(void) {
    return idx + BUF_LEN*pfx;
 8004c30:	f244 6c50 	movw	ip, #18000	@ 0x4650
 8004c34:	fb0c 1202 	mla	r2, ip, r2, r1
 8004c38:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004c3a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004c3c:	fb0c 0001 	mla	r0, ip, r1, r0
                        Timestamp average_tmsp = Timestamp::from_total((min_tmsp.get_total() + max_tmsp.get_total())/2);
 8004c40:	4410      	add	r0, r2
 8004c42:	eb00 70d0 	add.w	r0, r0, r0, lsr #31

/*
* Returns a timestamp object from the total timestamp integer
*/
Timestamp Timestamp::from_total(int total_timestamp) {
    return Timestamp(total_timestamp % BUF_LEN, total_timestamp / BUF_LEN);
 8004c46:	4a1d      	ldr	r2, [pc, #116]	@ (8004cbc <_ZN15MaxPeakDetector11search_loopEv+0x12c>)
                        Timestamp average_tmsp = Timestamp::from_total((min_tmsp.get_total() + max_tmsp.get_total())/2);
 8004c48:	ea4f 0e60 	mov.w	lr, r0, asr #1
    return Timestamp(total_timestamp % BUF_LEN, total_timestamp / BUF_LEN);
 8004c4c:	fb82 120e 	smull	r1, r2, r2, lr
 8004c50:	17c0      	asrs	r0, r0, #31
 8004c52:	ebc0 3162 	rsb	r1, r0, r2, asr #13
 8004c56:	fb0c e111 	mls	r1, ip, r1, lr
 8004c5a:	ebc0 3262 	rsb	r2, r0, r2, asr #13
                        last_peak_idx = average_tmsp.idx;
 8004c5e:	e9c4 3109 	strd	r3, r1, [r4, #36]	@ 0x24
                        last_peak_pfx = average_tmsp.pfx;
 8004c62:	62e2      	str	r2, [r4, #44]	@ 0x2c
                    (*p_index_info_tx).transmit_idx(last_peak_idx, last_peak_pfx, last_peak_val);
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	68a0      	ldr	r0, [r4, #8]
 8004c68:	f7ff ff32 	bl	8004ad0 <_ZN11IndexInfoTX12transmit_idxEiit>
					tentative_max_val = 0;
 8004c6c:	2300      	movs	r3, #0
                    tentative_min_val = 4096;
 8004c6e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004c72:	e9c4 320e 	strd	r3, r2, [r4, #56]	@ 0x38
					search_sub_state = MPDSearchState::DEAD_ZONE;
 8004c76:	2202      	movs	r2, #2
 8004c78:	60e2      	str	r2, [r4, #12]
					tentative_max_idx = 0;
 8004c7a:	e9c4 330c 	strd	r3, r3, [r4, #48]	@ 0x30
					tentative_min_idx = 0;
 8004c7e:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
				cur_idx++;
 8004c82:	6d22      	ldr	r2, [r4, #80]	@ 0x50
					window_count = 0;
 8004c84:	64a3      	str	r3, [r4, #72]	@ 0x48
					search_sub_state = MPDSearchState::DEAD_ZONE;
 8004c86:	e006      	b.n	8004c96 <_ZN15MaxPeakDetector11search_loopEv+0x106>
				} else if (cur_val > tentative_max_val) { //new max
 8004c88:	4299      	cmp	r1, r3
 8004c8a:	dd0a      	ble.n	8004ca2 <_ZN15MaxPeakDetector11search_loopEv+0x112>
					tentative_max_pfx = cur_pfx;
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc0 <_ZN15MaxPeakDetector11search_loopEv+0x130>)
					tentative_max_val = cur_val;
 8004c8e:	6321      	str	r1, [r4, #48]	@ 0x30
					tentative_max_pfx = cur_pfx;
 8004c90:	681b      	ldr	r3, [r3, #0]
					tentative_max_idx = cur_idx;
 8004c92:	6362      	str	r2, [r4, #52]	@ 0x34
					tentative_max_pfx = cur_pfx;
 8004c94:	63a3      	str	r3, [r4, #56]	@ 0x38
				cur_idx++;
 8004c96:	3201      	adds	r2, #1
 8004c98:	6522      	str	r2, [r4, #80]	@ 0x50
				break;
 8004c9a:	e786      	b.n	8004baa <_ZN15MaxPeakDetector11search_loopEv+0x1a>
                    cur_idx = BUF_LEN;
 8004c9c:	f244 6350 	movw	r3, #18000	@ 0x4650
 8004ca0:	e7b6      	b.n	8004c10 <_ZN15MaxPeakDetector11search_loopEv+0x80>
				} else if (cur_val < tentative_min_val) { //new min
 8004ca2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004ca4:	428b      	cmp	r3, r1
 8004ca6:	ddf6      	ble.n	8004c96 <_ZN15MaxPeakDetector11search_loopEv+0x106>
					tentative_min_pfx = cur_pfx;
 8004ca8:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <_ZN15MaxPeakDetector11search_loopEv+0x130>)
                    tentative_min_val = cur_val;
 8004caa:	63e1      	str	r1, [r4, #60]	@ 0x3c
					tentative_min_pfx = cur_pfx;
 8004cac:	681b      	ldr	r3, [r3, #0]
					tentative_min_idx = cur_idx;
 8004cae:	6422      	str	r2, [r4, #64]	@ 0x40
					tentative_min_pfx = cur_pfx;
 8004cb0:	6463      	str	r3, [r4, #68]	@ 0x44
 8004cb2:	e7f0      	b.n	8004c96 <_ZN15MaxPeakDetector11search_loopEv+0x106>
 8004cb4:	20000420 	.word	0x20000420
 8004cb8:	2000000c 	.word	0x2000000c
 8004cbc:	7482296b 	.word	0x7482296b
 8004cc0:	2000041c 	.word	0x2000041c

08004cc4 <_ZN15MaxPeakDetector11detect_peakEv>:
Timestamp MaxPeakDetector :: detect_peak() {
 8004cc4:	b570      	push	{r4, r5, r6, lr}
    switch (global_state)
 8004cc6:	4e29      	ldr	r6, [pc, #164]	@ (8004d6c <_ZN15MaxPeakDetector11detect_peakEv+0xa8>)
 8004cc8:	6833      	ldr	r3, [r6, #0]
 8004cca:	2b02      	cmp	r3, #2
Timestamp MaxPeakDetector :: detect_peak() {
 8004ccc:	4605      	mov	r5, r0
 8004cce:	460c      	mov	r4, r1
    switch (global_state)
 8004cd0:	d00d      	beq.n	8004cee <_ZN15MaxPeakDetector11detect_peakEv+0x2a>
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d025      	beq.n	8004d22 <_ZN15MaxPeakDetector11detect_peakEv+0x5e>
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d01a      	beq.n	8004d10 <_ZN15MaxPeakDetector11detect_peakEv+0x4c>
    Timestamp tmsp(last_peak_idx, last_peak_pfx);
 8004cda:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
    last_peak_idx = -1;
 8004cde:	f04f 33ff 	mov.w	r3, #4294967295
    this->idx = idx;
 8004ce2:	e9c5 2100 	strd	r2, r1, [r5]
    last_peak_idx = -1;
 8004ce6:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
}
 8004cea:	4628      	mov	r0, r5
 8004cec:	bd70      	pop	{r4, r5, r6, pc}
            if (cur_idx >= BUF_LEN/2) {
 8004cee:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004cf0:	f242 3327 	movw	r3, #8999	@ 0x2327
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	dc10      	bgt.n	8004d1a <_ZN15MaxPeakDetector11detect_peakEv+0x56>
    Timestamp tmsp(last_peak_idx, last_peak_pfx);
 8004cf8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004cfa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
                global_state = MPDState::IDLE;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6033      	str	r3, [r6, #0]
    last_peak_idx = -1;
 8004d00:	f04f 33ff 	mov.w	r3, #4294967295
    this->idx = idx;
 8004d04:	e9c5 2100 	strd	r2, r1, [r5]
    last_peak_idx = -1;
 8004d08:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
}
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	bd70      	pop	{r4, r5, r6, pc}
            if (cur_idx < BUF_LEN/2) {
 8004d10:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004d12:	f242 3327 	movw	r3, #8999	@ 0x2327
 8004d16:	429a      	cmp	r2, r3
 8004d18:	dcee      	bgt.n	8004cf8 <_ZN15MaxPeakDetector11detect_peakEv+0x34>
                search_loop();
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f7ff ff38 	bl	8004b90 <_ZN15MaxPeakDetector11search_loopEv>
 8004d20:	e7db      	b.n	8004cda <_ZN15MaxPeakDetector11detect_peakEv+0x16>
    (*p_index_info_tx).transmit_err_1(cur_idx, cur_pfx); //send error notification
 8004d22:	4b13      	ldr	r3, [pc, #76]	@ (8004d70 <_ZN15MaxPeakDetector11detect_peakEv+0xac>)
 8004d24:	68a0      	ldr	r0, [r4, #8]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	6d09      	ldr	r1, [r1, #80]	@ 0x50
 8004d2a:	f7ff fee5 	bl	8004af8 <_ZN11IndexInfoTX14transmit_err_1Eii>
    if (cur_idx > BUF_LEN/2) {
 8004d2e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
	global_state = MPDState::IDLE; // then skip this half buffer and try on the next
 8004d30:	2300      	movs	r3, #0
    if (cur_idx > BUF_LEN/2) {
 8004d32:	f242 3228 	movw	r2, #9000	@ 0x2328
        cur_idx = BUF_LEN/2;
 8004d36:	4291      	cmp	r1, r2
 8004d38:	bfd8      	it	le
 8004d3a:	461a      	movle	r2, r3
 8004d3c:	6522      	str	r2, [r4, #80]	@ 0x50
    tentative_min_val = 4096;
 8004d3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
}
 8004d42:	f04f 32ff 	mov.w	r2, #4294967295
    tentative_min_val = 4096;
 8004d46:	e9c4 310e 	strd	r3, r1, [r4, #56]	@ 0x38
    tentative_max_idx = 0;
 8004d4a:	e9c4 330c 	strd	r3, r3, [r4, #48]	@ 0x30
    tentative_min_pfx = 0;
 8004d4e:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
    dead_zone_count = 0;
 8004d52:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
	global_state = MPDState::IDLE; // then skip this half buffer and try on the next
 8004d56:	6033      	str	r3, [r6, #0]
	search_sub_state = MPDSearchState::FIND_SIGNAL;
 8004d58:	60e3      	str	r3, [r4, #12]
}
 8004d5a:	4611      	mov	r1, r2
    last_peak_idx = -1;
 8004d5c:	f04f 33ff 	mov.w	r3, #4294967295
    this->idx = idx;
 8004d60:	e9c5 2100 	strd	r2, r1, [r5]
    last_peak_idx = -1;
 8004d64:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
}
 8004d68:	4628      	mov	r0, r5
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	2000000c 	.word	0x2000000c
 8004d70:	2000041c 	.word	0x2000041c

08004d74 <HAL_ADC_ConvHalfCpltCallback>:
    MaxPeakDetector::cur_pfx = (MaxPeakDetector::cur_pfx + 1)%(0x8000); //roll-over after 0x7FFF to fit packet needs
 8004d74:	490c      	ldr	r1, [pc, #48]	@ (8004da8 <HAL_ADC_ConvHalfCpltCallback+0x34>)
		switch (MaxPeakDetector::global_state)
 8004d76:	480d      	ldr	r0, [pc, #52]	@ (8004dac <HAL_ADC_ConvHalfCpltCallback+0x38>)
    MaxPeakDetector::cur_pfx = (MaxPeakDetector::cur_pfx + 1)%(0x8000); //roll-over after 0x7FFF to fit packet needs
 8004d78:	680b      	ldr	r3, [r1, #0]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	425a      	negs	r2, r3
 8004d7e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004d82:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004d86:	bf58      	it	pl
 8004d88:	4253      	negpl	r3, r2
 8004d8a:	600b      	str	r3, [r1, #0]
		switch (MaxPeakDetector::global_state)
 8004d8c:	6803      	ldr	r3, [r0, #0]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d003      	beq.n	8004d9a <HAL_ADC_ConvHalfCpltCallback+0x26>
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d001      	beq.n	8004d9a <HAL_ADC_ConvHalfCpltCallback+0x26>
 8004d96:	b11b      	cbz	r3, 8004da0 <HAL_ADC_ConvHalfCpltCallback+0x2c>
}
 8004d98:	4770      	bx	lr
				MaxPeakDetector::global_state = MPDState::ERROR_1;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	6003      	str	r3, [r0, #0]
				break;
 8004d9e:	4770      	bx	lr
				MaxPeakDetector::global_state = MPDState::PROC_BUF_1ST_HLF;
 8004da0:	2301      	movs	r3, #1
 8004da2:	6003      	str	r3, [r0, #0]
}
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	2000041c 	.word	0x2000041c
 8004dac:	2000000c 	.word	0x2000000c

08004db0 <HAL_ADC_ConvCpltCallback>:
		switch (MaxPeakDetector::global_state)
 8004db0:	4a06      	ldr	r2, [pc, #24]	@ (8004dcc <HAL_ADC_ConvCpltCallback+0x1c>)
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d003      	beq.n	8004dc0 <HAL_ADC_ConvCpltCallback+0x10>
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d001      	beq.n	8004dc0 <HAL_ADC_ConvCpltCallback+0x10>
 8004dbc:	b11b      	cbz	r3, 8004dc6 <HAL_ADC_ConvCpltCallback+0x16>
}
 8004dbe:	4770      	bx	lr
				MaxPeakDetector::global_state = MPDState::ERROR_1;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	6013      	str	r3, [r2, #0]
				break;
 8004dc4:	4770      	bx	lr
				MaxPeakDetector::global_state = MPDState::PROC_BUF_2ND_HLF;
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	6013      	str	r3, [r2, #0]
}
 8004dca:	4770      	bx	lr
 8004dcc:	2000000c 	.word	0x2000000c

08004dd0 <_ZN13PGA_cascade_2C1EP19OPAMP_HandleTypeDefS1_>:



PGA_cascade_2::PGA_cascade_2(OPAMP_HandleTypeDef* p_opamp_1, OPAMP_HandleTypeDef* p_opamp_2) {
    pga1.p_hopamp = p_opamp_1;
    pga2.p_hopamp = p_opamp_2;
 8004dd0:	e9c0 1200 	strd	r1, r2, [r0]
}
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop

08004dd8 <_ZN13PGA_cascade_27setGainEi>:
   8   |   256

Indexes not in [2,8] will be ignored.
*/
void PGA_cascade_2::setGain(int index) {
    switch (index)
 8004dd8:	3902      	subs	r1, #2
 8004dda:	2906      	cmp	r1, #6
 8004ddc:	d819      	bhi.n	8004e12 <_ZN13PGA_cascade_27setGainEi+0x3a>
 8004dde:	e8df f001 	tbb	[pc, r1]
 8004de2:	2e19      	.short	0x2e19
 8004de4:	705b4f3a 	.word	0x705b4f3a
 8004de8:	04          	.byte	0x04
 8004de9:	00          	.byte	0x00
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004dea:	e9d0 2300 	ldrd	r2, r3, [r0]
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6811      	ldr	r1, [r2, #0]
 8004df4:	f441 3170 	orr.w	r1, r1, #245760	@ 0x3c000
 8004df8:	6011      	str	r1, [r2, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_16;
 8004dfa:	6811      	ldr	r1, [r2, #0]
 8004dfc:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8004e00:	6011      	str	r1, [r2, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	f442 3270 	orr.w	r2, r2, #245760	@ 0x3c000
 8004e08:	601a      	str	r2, [r3, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_16;
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004e10:	601a      	str	r2, [r3, #0]
        break;
    
    default:
        break;
    }
}
 8004e12:	4770      	bx	lr
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e14:	e9d0 2300 	ldrd	r2, r3, [r0]
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6811      	ldr	r1, [r2, #0]
 8004e1e:	f441 3170 	orr.w	r1, r1, #245760	@ 0x3c000
 8004e22:	6011      	str	r1, [r2, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_2;
 8004e24:	6811      	ldr	r1, [r2, #0]
 8004e26:	f421 3170 	bic.w	r1, r1, #245760	@ 0x3c000
	    p_hopamp->Instance->CSR &= MY_GAIN_4;
 8004e2a:	6011      	str	r1, [r2, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	f442 3270 	orr.w	r2, r2, #245760	@ 0x3c000
 8004e32:	601a      	str	r2, [r3, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_2;
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	f422 3270 	bic.w	r2, r2, #245760	@ 0x3c000
 8004e3a:	601a      	str	r2, [r3, #0]
        break;
 8004e3c:	4770      	bx	lr
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e3e:	e9d0 2300 	ldrd	r2, r3, [r0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e42:	6812      	ldr	r2, [r2, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e44:	681b      	ldr	r3, [r3, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e46:	6811      	ldr	r1, [r2, #0]
 8004e48:	f441 3170 	orr.w	r1, r1, #245760	@ 0x3c000
 8004e4c:	6011      	str	r1, [r2, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_4;
 8004e4e:	6811      	ldr	r1, [r2, #0]
 8004e50:	f421 3160 	bic.w	r1, r1, #229376	@ 0x38000
 8004e54:	e7e9      	b.n	8004e2a <_ZN13PGA_cascade_27setGainEi+0x52>
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e56:	e9d0 2300 	ldrd	r2, r3, [r0]
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6811      	ldr	r1, [r2, #0]
 8004e60:	f441 3170 	orr.w	r1, r1, #245760	@ 0x3c000
 8004e64:	6011      	str	r1, [r2, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_4;
 8004e66:	6811      	ldr	r1, [r2, #0]
 8004e68:	f421 3160 	bic.w	r1, r1, #229376	@ 0x38000
	    p_hopamp->Instance->CSR &= MY_GAIN_8;
 8004e6c:	6011      	str	r1, [r2, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	f442 3270 	orr.w	r2, r2, #245760	@ 0x3c000
 8004e74:	601a      	str	r2, [r3, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_4;
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	f422 3260 	bic.w	r2, r2, #229376	@ 0x38000
 8004e7c:	601a      	str	r2, [r3, #0]
        break;
 8004e7e:	4770      	bx	lr
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e80:	e9d0 2300 	ldrd	r2, r3, [r0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e84:	6812      	ldr	r2, [r2, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e86:	681b      	ldr	r3, [r3, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e88:	6811      	ldr	r1, [r2, #0]
 8004e8a:	f441 3170 	orr.w	r1, r1, #245760	@ 0x3c000
 8004e8e:	6011      	str	r1, [r2, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_8;
 8004e90:	6811      	ldr	r1, [r2, #0]
 8004e92:	f421 3150 	bic.w	r1, r1, #212992	@ 0x34000
 8004e96:	e7e9      	b.n	8004e6c <_ZN13PGA_cascade_27setGainEi+0x94>
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e98:	e9d0 2300 	ldrd	r2, r3, [r0]
 8004e9c:	6812      	ldr	r2, [r2, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6811      	ldr	r1, [r2, #0]
 8004ea2:	f441 3170 	orr.w	r1, r1, #245760	@ 0x3c000
 8004ea6:	6011      	str	r1, [r2, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_8;
 8004ea8:	6811      	ldr	r1, [r2, #0]
 8004eaa:	f421 3150 	bic.w	r1, r1, #212992	@ 0x34000
	    p_hopamp->Instance->CSR &= MY_GAIN_16;
 8004eae:	6011      	str	r1, [r2, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	f442 3270 	orr.w	r2, r2, #245760	@ 0x3c000
 8004eb6:	601a      	str	r2, [r3, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_8;
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	f422 3250 	bic.w	r2, r2, #212992	@ 0x34000
 8004ebe:	601a      	str	r2, [r3, #0]
        break;
 8004ec0:	4770      	bx	lr
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004ec2:	e9d0 2300 	ldrd	r2, r3, [r0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004ec6:	6812      	ldr	r2, [r2, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004ec8:	681b      	ldr	r3, [r3, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004eca:	6811      	ldr	r1, [r2, #0]
 8004ecc:	f441 3170 	orr.w	r1, r1, #245760	@ 0x3c000
 8004ed0:	6011      	str	r1, [r2, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_16;
 8004ed2:	6811      	ldr	r1, [r2, #0]
 8004ed4:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8004ed8:	e7e9      	b.n	8004eae <_ZN13PGA_cascade_27setGainEi+0xd6>
 8004eda:	bf00      	nop

08004edc <_Z27first_half_written_callbackP19__DMA_HandleTypeDef>:




void first_half_written_callback(DMA_HandleTypeDef *hdma) {
    if (PingOut::debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);} 
 8004edc:	4b16      	ldr	r3, [pc, #88]	@ (8004f38 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x5c>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
void first_half_written_callback(DMA_HandleTypeDef *hdma) {
 8004ee0:	b510      	push	{r4, lr}
    if (PingOut::debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);} 
 8004ee2:	bb0b      	cbnz	r3, 8004f28 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x4c>
    PingOut::cur_out_pfx = (PingOut::cur_out_pfx + 1)%(0x8000); //roll-over after 0x7FFF to match peak detector
 8004ee4:	4a15      	ldr	r2, [pc, #84]	@ (8004f3c <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x60>)
    PingOut::po_state = POState::FIRST_HLF_FREE;
 8004ee6:	4816      	ldr	r0, [pc, #88]	@ (8004f40 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x64>)
    PingOut::cur_out_pfx = (PingOut::cur_out_pfx + 1)%(0x8000); //roll-over after 0x7FFF to match peak detector
 8004ee8:	6813      	ldr	r3, [r2, #0]
 8004eea:	3301      	adds	r3, #1
 8004eec:	4259      	negs	r1, r3
 8004eee:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8004ef2:	f3c3 030e 	ubfx	r3, r3, #0, #15
    PingOut::po_state = POState::FIRST_HLF_FREE;
 8004ef6:	f04f 0400 	mov.w	r4, #0
    PingOut::cur_out_pfx = (PingOut::cur_out_pfx + 1)%(0x8000); //roll-over after 0x7FFF to match peak detector
 8004efa:	bf58      	it	pl
 8004efc:	424b      	negpl	r3, r1
    if (PingOut::time_to_clear < 2) {
 8004efe:	4911      	ldr	r1, [pc, #68]	@ (8004f44 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x68>)
    PingOut::cur_out_pfx = (PingOut::cur_out_pfx + 1)%(0x8000); //roll-over after 0x7FFF to match peak detector
 8004f00:	6013      	str	r3, [r2, #0]
    PingOut::po_state = POState::FIRST_HLF_FREE;
 8004f02:	6004      	str	r4, [r0, #0]
    if (PingOut::time_to_clear < 2) {
 8004f04:	680b      	ldr	r3, [r1, #0]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	dc02      	bgt.n	8004f10 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x34>
        PingOut::time_to_clear++;
 8004f0a:	680b      	ldr	r3, [r1, #0]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	600b      	str	r3, [r1, #0]
    }
    
    //periodic scheduling
    if ((PingOut::cur_out_pfx%PingOut::schedule_period) == 0)
 8004f10:	490d      	ldr	r1, [pc, #52]	@ (8004f48 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x6c>)
 8004f12:	6813      	ldr	r3, [r2, #0]
 8004f14:	680a      	ldr	r2, [r1, #0]
 8004f16:	fb93 f1f2 	sdiv	r1, r3, r2
 8004f1a:	fb02 3311 	mls	r3, r2, r1, r3
 8004f1e:	b913      	cbnz	r3, 8004f26 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x4a>
    {
        PingOut::time_to_schedule_period = true;
 8004f20:	4b0a      	ldr	r3, [pc, #40]	@ (8004f4c <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x70>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]
    }
    
    
}
 8004f26:	bd10      	pop	{r4, pc}
    if (PingOut::debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);} 
 8004f28:	4809      	ldr	r0, [pc, #36]	@ (8004f50 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x74>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004f30:	f7fc fcd6 	bl	80018e0 <HAL_GPIO_WritePin>
 8004f34:	e7d6      	b.n	8004ee4 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x8>
 8004f36:	bf00      	nop
 8004f38:	200090c0 	.word	0x200090c0
 8004f3c:	200090c8 	.word	0x200090c8
 8004f40:	20000014 	.word	0x20000014
 8004f44:	20000010 	.word	0x20000010
 8004f48:	200090c4 	.word	0x200090c4
 8004f4c:	200090c1 	.word	0x200090c1
 8004f50:	48000800 	.word	0x48000800

08004f54 <_Z27secnd_half_written_callbackP19__DMA_HandleTypeDef>:

void secnd_half_written_callback(DMA_HandleTypeDef *hdma) {
 8004f54:	b508      	push	{r3, lr}
    if (PingOut::debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);} 
 8004f56:	4b0b      	ldr	r3, [pc, #44]	@ (8004f84 <_Z27secnd_half_written_callbackP19__DMA_HandleTypeDef+0x30>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	b95b      	cbnz	r3, 8004f74 <_Z27secnd_half_written_callbackP19__DMA_HandleTypeDef+0x20>
    PingOut::po_state = POState::SECND_HLF_FREE;
 8004f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004f88 <_Z27secnd_half_written_callbackP19__DMA_HandleTypeDef+0x34>)
    if (PingOut::time_to_clear < 2) {
 8004f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f8c <_Z27secnd_half_written_callbackP19__DMA_HandleTypeDef+0x38>)
    PingOut::po_state = POState::SECND_HLF_FREE;
 8004f60:	2101      	movs	r1, #1
 8004f62:	6011      	str	r1, [r2, #0]
    if (PingOut::time_to_clear < 2) {
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	428a      	cmp	r2, r1
 8004f68:	dd00      	ble.n	8004f6c <_Z27secnd_half_written_callbackP19__DMA_HandleTypeDef+0x18>
        PingOut::time_to_clear++;
    }
    
}
 8004f6a:	bd08      	pop	{r3, pc}
        PingOut::time_to_clear++;
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	440a      	add	r2, r1
 8004f70:	601a      	str	r2, [r3, #0]
}
 8004f72:	bd08      	pop	{r3, pc}
    if (PingOut::debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);} 
 8004f74:	4806      	ldr	r0, [pc, #24]	@ (8004f90 <_Z27secnd_half_written_callbackP19__DMA_HandleTypeDef+0x3c>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004f7c:	f7fc fcb0 	bl	80018e0 <HAL_GPIO_WritePin>
 8004f80:	e7ec      	b.n	8004f5c <_Z27secnd_half_written_callbackP19__DMA_HandleTypeDef+0x8>
 8004f82:	bf00      	nop
 8004f84:	200090c0 	.word	0x200090c0
 8004f88:	20000014 	.word	0x20000014
 8004f8c:	20000010 	.word	0x20000010
 8004f90:	48000800 	.word	0x48000800

08004f94 <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef>:
PingOut :: PingOut(DMA_HandleTypeDef* p_hdma_tim2_up, TIM_HandleTypeDef* p_htim2) {
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	4605      	mov	r5, r0
 8004f98:	4608      	mov	r0, r1
 8004f9a:	4616      	mov	r6, r2
    p_hdma_tim2_up->XferCpltCallback =     secnd_half_written_callback;
 8004f9c:	4a14      	ldr	r2, [pc, #80]	@ (8004ff0 <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef+0x5c>)
 8004f9e:	6282      	str	r2, [r0, #40]	@ 0x28
    scheduled_idx = -1;
 8004fa0:	f04f 33ff 	mov.w	r3, #4294967295
    peak_count = 4;
 8004fa4:	2204      	movs	r2, #4
    scheduled_idx = -1;
 8004fa6:	e9c5 3302 	strd	r3, r3, [r5, #8]
    peak_count = 4;
 8004faa:	61aa      	str	r2, [r5, #24]
    clear_idx = -1;
 8004fac:	612b      	str	r3, [r5, #16]
    peak_count = 4;
 8004fae:	2206      	movs	r2, #6
 8004fb0:	4b10      	ldr	r3, [pc, #64]	@ (8004ff4 <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef+0x60>)
    p_hdma_tim2_up->XferHalfCpltCallback = first_half_written_callback;
 8004fb2:	4911      	ldr	r1, [pc, #68]	@ (8004ff8 <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef+0x64>)
    peak_count = 4;
 8004fb4:	61ea      	str	r2, [r5, #28]
    this->p_htim2 = p_htim2;
 8004fb6:	e9c5 0600 	strd	r0, r6, [r5]
    periodic_schedule_enable = false;
 8004fba:	2200      	movs	r2, #0
 8004fbc:	4c0f      	ldr	r4, [pc, #60]	@ (8004ffc <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef+0x68>)
    p_hdma_tim2_up->XferHalfCpltCallback = first_half_written_callback;
 8004fbe:	62c1      	str	r1, [r0, #44]	@ 0x2c
    periodic_schedule_enable = false;
 8004fc0:	752a      	strb	r2, [r5, #20]
	for (int i = 0; i < OUT_BUF_LEN; i++) {
 8004fc2:	1d19      	adds	r1, r3, #4
		out_buf[i] = BSRR_PC6_RESET_MASK;
 8004fc4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004fc8:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int i = 0; i < OUT_BUF_LEN; i++) {
 8004fcc:	42a3      	cmp	r3, r4
 8004fce:	d1fb      	bne.n	8004fc8 <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef+0x34>
	HAL_DMA_Start_IT(p_hdma_tim2_up, 
 8004fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8005000 <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef+0x6c>)
 8004fd2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004fd6:	f7fc f9fb 	bl	80013d0 <HAL_DMA_Start_IT>
    HAL_TIM_Base_Start(p_htim2);
 8004fda:	4630      	mov	r0, r6
 8004fdc:	f7fd fcba 	bl	8002954 <HAL_TIM_Base_Start>
	TIM2->DIER |= (1<<8); //set UDE bit (update dma request enable)
 8004fe0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
}
 8004fe4:	4628      	mov	r0, r5
	TIM2->DIER |= (1<<8); //set UDE bit (update dma request enable)
 8004fe6:	68d3      	ldr	r3, [r2, #12]
 8004fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fec:	60d3      	str	r3, [r2, #12]
}
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	08004f55 	.word	0x08004f55
 8004ff4:	200090c8 	.word	0x200090c8
 8004ff8:	08004edd 	.word	0x08004edd
 8004ffc:	2000bfa8 	.word	0x2000bfa8
 8005000:	48000818 	.word	0x48000818

08005004 <_ZN7PingOut24start_periodic_schedulerEi>:
    PingOut::schedule_period = period;
 8005004:	4a02      	ldr	r2, [pc, #8]	@ (8005010 <_ZN7PingOut24start_periodic_schedulerEi+0xc>)
    periodic_schedule_enable = true;
 8005006:	2301      	movs	r3, #1
    PingOut::schedule_period = period;
 8005008:	6011      	str	r1, [r2, #0]
    periodic_schedule_enable = true;
 800500a:	7503      	strb	r3, [r0, #20]
}
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	200090c4 	.word	0x200090c4

08005014 <_ZN7PingOut3setEi>:
void PingOut::set(int out_idx) {
 8005014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);}
 8005018:	4c27      	ldr	r4, [pc, #156]	@ (80050b8 <_ZN7PingOut3setEi+0xa4>)
 800501a:	f894 8000 	ldrb.w	r8, [r4]
void PingOut::set(int out_idx) {
 800501e:	4607      	mov	r7, r0
 8005020:	460e      	mov	r6, r1
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);}
 8005022:	f1b8 0f00 	cmp.w	r8, #0
 8005026:	d128      	bne.n	800507a <_ZN7PingOut3setEi+0x66>
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 8005028:	6985      	ldr	r5, [r0, #24]
 800502a:	006d      	lsls	r5, r5, #1
 800502c:	2d00      	cmp	r5, #0
 800502e:	dd38      	ble.n	80050a2 <_ZN7PingOut3setEi+0x8e>
 8005030:	f8df a090 	ldr.w	sl, [pc, #144]	@ 80050c4 <_ZN7PingOut3setEi+0xb0>
 8005034:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80050c8 <_ZN7PingOut3setEi+0xb4>
void PingOut::set(int out_idx) {
 8005038:	2300      	movs	r3, #0
        out_buf[out_idx + i] = BSRR_PC6_SET_MASK;
 800503a:	2040      	movs	r0, #64	@ 0x40
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 800503c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8005040:	1c9a      	adds	r2, r3, #2
 8005042:	fb89 c402 	smull	ip, r4, r9, r2
 8005046:	ea4f 7ee2 	mov.w	lr, r2, asr #31
        out_buf[out_idx + i] = BSRR_PC6_SET_MASK;
 800504a:	eb06 0c03 	add.w	ip, r6, r3
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 800504e:	ebce 13a4 	rsb	r3, lr, r4, asr #6
 8005052:	fb01 2313 	mls	r3, r1, r3, r2
 8005056:	42ab      	cmp	r3, r5
        out_buf[out_idx + i] = BSRR_PC6_SET_MASK;
 8005058:	f84a 002c 	str.w	r0, [sl, ip, lsl #2]
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 800505c:	dbf0      	blt.n	8005040 <_ZN7PingOut3setEi+0x2c>
    time_to_clear = 0;
 800505e:	4817      	ldr	r0, [pc, #92]	@ (80050bc <_ZN7PingOut3setEi+0xa8>)
    clear_idx = scheduled_idx;
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	6139      	str	r1, [r7, #16]
    scheduled_idx = -1;
 8005064:	f04f 33ff 	mov.w	r3, #4294967295
    time_to_clear = 0;
 8005068:	2200      	movs	r2, #0
    scheduled_idx = -1;
 800506a:	e9c7 3302 	strd	r3, r3, [r7, #8]
    time_to_clear = 0;
 800506e:	6002      	str	r2, [r0, #0]
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);} 
 8005070:	f1b8 0f00 	cmp.w	r8, #0
 8005074:	d10e      	bne.n	8005094 <_ZN7PingOut3setEi+0x80>
}
 8005076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);}
 800507a:	4811      	ldr	r0, [pc, #68]	@ (80050c0 <_ZN7PingOut3setEi+0xac>)
 800507c:	2201      	movs	r2, #1
 800507e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005082:	f7fc fc2d 	bl	80018e0 <HAL_GPIO_WritePin>
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 8005086:	69bd      	ldr	r5, [r7, #24]
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);} 
 8005088:	f894 8000 	ldrb.w	r8, [r4]
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 800508c:	006d      	lsls	r5, r5, #1
 800508e:	2d00      	cmp	r5, #0
 8005090:	dcce      	bgt.n	8005030 <_ZN7PingOut3setEi+0x1c>
 8005092:	e7e4      	b.n	800505e <_ZN7PingOut3setEi+0x4a>
}
 8005094:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);} 
 8005098:	4809      	ldr	r0, [pc, #36]	@ (80050c0 <_ZN7PingOut3setEi+0xac>)
 800509a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800509e:	f7fc bc1f 	b.w	80018e0 <HAL_GPIO_WritePin>
    time_to_clear = 0;
 80050a2:	4a06      	ldr	r2, [pc, #24]	@ (80050bc <_ZN7PingOut3setEi+0xa8>)
    clear_idx = scheduled_idx;
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	6139      	str	r1, [r7, #16]
    scheduled_idx = -1;
 80050a8:	f04f 33ff 	mov.w	r3, #4294967295
 80050ac:	e9c7 3302 	strd	r3, r3, [r7, #8]
    time_to_clear = 0;
 80050b0:	f8c2 8000 	str.w	r8, [r2]
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);} 
 80050b4:	e7df      	b.n	8005076 <_ZN7PingOut3setEi+0x62>
 80050b6:	bf00      	nop
 80050b8:	200090c0 	.word	0x200090c0
 80050bc:	20000010 	.word	0x20000010
 80050c0:	48000800 	.word	0x48000800
 80050c4:	200090cc 	.word	0x200090cc
 80050c8:	057619f1 	.word	0x057619f1

080050cc <_ZN7PingOut5clearEi>:
void PingOut::clear(int out_idx) {
 80050cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);} 
 80050d0:	4c22      	ldr	r4, [pc, #136]	@ (800515c <_ZN7PingOut5clearEi+0x90>)
 80050d2:	f894 8000 	ldrb.w	r8, [r4]
void PingOut::clear(int out_idx) {
 80050d6:	4607      	mov	r7, r0
 80050d8:	460e      	mov	r6, r1
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);} 
 80050da:	f1b8 0f00 	cmp.w	r8, #0
 80050de:	d123      	bne.n	8005128 <_ZN7PingOut5clearEi+0x5c>
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 80050e0:	6985      	ldr	r5, [r0, #24]
 80050e2:	006d      	lsls	r5, r5, #1
 80050e4:	2d00      	cmp	r5, #0
 80050e6:	dd34      	ble.n	8005152 <_ZN7PingOut5clearEi+0x86>
 80050e8:	f8df a078 	ldr.w	sl, [pc, #120]	@ 8005164 <_ZN7PingOut5clearEi+0x98>
 80050ec:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8005168 <_ZN7PingOut5clearEi+0x9c>
void PingOut::clear(int out_idx) {
 80050f0:	2300      	movs	r3, #0
        out_buf[out_idx + i] = BSRR_PC6_RESET_MASK;
 80050f2:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 80050f6:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80050fa:	1c9a      	adds	r2, r3, #2
 80050fc:	fb89 c402 	smull	ip, r4, r9, r2
 8005100:	ea4f 7ee2 	mov.w	lr, r2, asr #31
        out_buf[out_idx + i] = BSRR_PC6_RESET_MASK;
 8005104:	eb06 0c03 	add.w	ip, r6, r3
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 8005108:	ebce 13a4 	rsb	r3, lr, r4, asr #6
 800510c:	fb01 2313 	mls	r3, r1, r3, r2
 8005110:	42ab      	cmp	r3, r5
        out_buf[out_idx + i] = BSRR_PC6_RESET_MASK;
 8005112:	f84a 002c 	str.w	r0, [sl, ip, lsl #2]
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 8005116:	dbf0      	blt.n	80050fa <_ZN7PingOut5clearEi+0x2e>
    clear_idx = -1;
 8005118:	f04f 33ff 	mov.w	r3, #4294967295
 800511c:	613b      	str	r3, [r7, #16]
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);}
 800511e:	f1b8 0f00 	cmp.w	r8, #0
 8005122:	d10e      	bne.n	8005142 <_ZN7PingOut5clearEi+0x76>
}
 8005124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);} 
 8005128:	480d      	ldr	r0, [pc, #52]	@ (8005160 <_ZN7PingOut5clearEi+0x94>)
 800512a:	2201      	movs	r2, #1
 800512c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005130:	f7fc fbd6 	bl	80018e0 <HAL_GPIO_WritePin>
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 8005134:	69bd      	ldr	r5, [r7, #24]
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);}
 8005136:	f894 8000 	ldrb.w	r8, [r4]
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 800513a:	006d      	lsls	r5, r5, #1
 800513c:	2d00      	cmp	r5, #0
 800513e:	dcd3      	bgt.n	80050e8 <_ZN7PingOut5clearEi+0x1c>
 8005140:	e7ea      	b.n	8005118 <_ZN7PingOut5clearEi+0x4c>
}
 8005142:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);}
 8005146:	4806      	ldr	r0, [pc, #24]	@ (8005160 <_ZN7PingOut5clearEi+0x94>)
 8005148:	2200      	movs	r2, #0
 800514a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800514e:	f7fc bbc7 	b.w	80018e0 <HAL_GPIO_WritePin>
    clear_idx = -1;
 8005152:	f04f 33ff 	mov.w	r3, #4294967295
 8005156:	6103      	str	r3, [r0, #16]
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);}
 8005158:	e7e4      	b.n	8005124 <_ZN7PingOut5clearEi+0x58>
 800515a:	bf00      	nop
 800515c:	200090c0 	.word	0x200090c0
 8005160:	48000800 	.word	0x48000800
 8005164:	200090cc 	.word	0x200090cc
 8005168:	057619f1 	.word	0x057619f1

0800516c <_ZN7PingOut6updateEv>:
void PingOut::update() {
 800516c:	b520      	push	{r5, lr}
    if (periodic_schedule_enable && PingOut::time_to_schedule_period) { 
 800516e:	7d03      	ldrb	r3, [r0, #20]
void PingOut::update() {
 8005170:	b082      	sub	sp, #8
    if (periodic_schedule_enable && PingOut::time_to_schedule_period) { 
 8005172:	b96b      	cbnz	r3, 8005190 <_ZN7PingOut6updateEv+0x24>
 8005174:	4d19      	ldr	r5, [pc, #100]	@ (80051dc <_ZN7PingOut6updateEv+0x70>)
    if (clear_idx >= 0 && time_to_clear == 2) {
 8005176:	6901      	ldr	r1, [r0, #16]
 8005178:	2900      	cmp	r1, #0
 800517a:	db03      	blt.n	8005184 <_ZN7PingOut6updateEv+0x18>
 800517c:	4b18      	ldr	r3, [pc, #96]	@ (80051e0 <_ZN7PingOut6updateEv+0x74>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d01f      	beq.n	80051c4 <_ZN7PingOut6updateEv+0x58>
    if (PingOut::cur_out_pfx == scheduled_pfx) {
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	68c2      	ldr	r2, [r0, #12]
 8005188:	429a      	cmp	r2, r3
 800518a:	d00c      	beq.n	80051a6 <_ZN7PingOut6updateEv+0x3a>
}
 800518c:	b002      	add	sp, #8
 800518e:	bd20      	pop	{r5, pc}
    if (periodic_schedule_enable && PingOut::time_to_schedule_period) { 
 8005190:	4b14      	ldr	r3, [pc, #80]	@ (80051e4 <_ZN7PingOut6updateEv+0x78>)
        scheduled_pfx = PingOut::cur_out_pfx;
 8005192:	4d12      	ldr	r5, [pc, #72]	@ (80051dc <_ZN7PingOut6updateEv+0x70>)
    if (periodic_schedule_enable && PingOut::time_to_schedule_period) { 
 8005194:	781a      	ldrb	r2, [r3, #0]
 8005196:	2a00      	cmp	r2, #0
 8005198:	d0ed      	beq.n	8005176 <_ZN7PingOut6updateEv+0xa>
        scheduled_pfx = PingOut::cur_out_pfx;
 800519a:	6829      	ldr	r1, [r5, #0]
        scheduled_idx = 0;
 800519c:	2200      	movs	r2, #0
        scheduled_pfx = PingOut::cur_out_pfx;
 800519e:	e9c0 2102 	strd	r2, r1, [r0, #8]
        PingOut::time_to_schedule_period = false;
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	e7e7      	b.n	8005176 <_ZN7PingOut6updateEv+0xa>
        switch (PingOut::po_state)
 80051a6:	4b10      	ldr	r3, [pc, #64]	@ (80051e8 <_ZN7PingOut6updateEv+0x7c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	b183      	cbz	r3, 80051ce <_ZN7PingOut6updateEv+0x62>
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d1ed      	bne.n	800518c <_ZN7PingOut6updateEv+0x20>
            if (scheduled_idx >= (OUT_BUF_LEN/2)) {
 80051b0:	6881      	ldr	r1, [r0, #8]
 80051b2:	f240 53db 	movw	r3, #1499	@ 0x5db
 80051b6:	4299      	cmp	r1, r3
 80051b8:	dde8      	ble.n	800518c <_ZN7PingOut6updateEv+0x20>
}
 80051ba:	b002      	add	sp, #8
 80051bc:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
                set(scheduled_idx);
 80051c0:	f7ff bf28 	b.w	8005014 <_ZN7PingOut3setEi>
        clear(clear_idx);
 80051c4:	9001      	str	r0, [sp, #4]
 80051c6:	f7ff ff81 	bl	80050cc <_ZN7PingOut5clearEi>
 80051ca:	9801      	ldr	r0, [sp, #4]
 80051cc:	e7da      	b.n	8005184 <_ZN7PingOut6updateEv+0x18>
            if (scheduled_idx < (OUT_BUF_LEN/2)) {
 80051ce:	6881      	ldr	r1, [r0, #8]
 80051d0:	f240 53db 	movw	r3, #1499	@ 0x5db
 80051d4:	4299      	cmp	r1, r3
 80051d6:	dcd9      	bgt.n	800518c <_ZN7PingOut6updateEv+0x20>
 80051d8:	e7ef      	b.n	80051ba <_ZN7PingOut6updateEv+0x4e>
 80051da:	bf00      	nop
 80051dc:	200090c8 	.word	0x200090c8
 80051e0:	20000010 	.word	0x20000010
 80051e4:	200090c1 	.word	0x200090c1
 80051e8:	20000014 	.word	0x20000014

080051ec <tof_master_main>:
                                TIM_HandleTypeDef* p_htim3,
                                UART_HandleTypeDef* p_huart,
                                OPAMP_HandleTypeDef* p_opamp_1,
                                OPAMP_HandleTypeDef* p_opamp_2,
                                DMA_HandleTypeDef* p_hdma_tim2_up,
                                TIM_HandleTypeDef* p_htim2) {
 80051ec:	b500      	push	{lr}
 80051ee:	b0a5      	sub	sp, #148	@ 0x94
 80051f0:	461e      	mov	r6, r3
 80051f2:	460d      	mov	r5, r1
 80051f4:	4604      	mov	r4, r0

    /******************* SETUP RX ************************/
    //CMD_RX cmd_rx(p_huart);
	IndexInfoTX idx_info_tx(p_huart);
 80051f6:	4611      	mov	r1, r2
 80051f8:	a804      	add	r0, sp, #16
 80051fa:	f7ff fc67 	bl	8004acc <_ZN11IndexInfoTXC1EP20__UART_HandleTypeDef>
	PGA_cascade_2 pgas(p_opamp_1, p_opamp_2);
 80051fe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005200:	4631      	mov	r1, r6
 8005202:	a802      	add	r0, sp, #8
 8005204:	f7ff fde4 	bl	8004dd0 <_ZN13PGA_cascade_2C1EP19OPAMP_HandleTypeDefS1_>
    pgas.setGain(8);
 8005208:	2108      	movs	r1, #8
 800520a:	eb0d 0001 	add.w	r0, sp, r1
 800520e:	f7ff fde3 	bl	8004dd8 <_ZN13PGA_cascade_27setGainEi>


	//cmd_rx.start_receive();

	MaxPeakDetector max_peak_detector(p_hadc, p_htim3,  &idx_info_tx);
 8005212:	ab04      	add	r3, sp, #16
 8005214:	462a      	mov	r2, r5
 8005216:	4621      	mov	r1, r4
 8005218:	a80f      	add	r0, sp, #60	@ 0x3c
 800521a:	f7ff fc7f 	bl	8004b1c <_ZN15MaxPeakDetectorC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDefP11IndexInfoTX>




    /******************* SETUP TX ************************/
    PingOut ping_out(p_hdma_tim2_up, p_htim2);
 800521e:	e9dd 1227 	ldrd	r1, r2, [sp, #156]	@ 0x9c
	max_peak_detector.min_aid = true;
 8005222:	2301      	movs	r3, #1
    PingOut ping_out(p_hdma_tim2_up, p_htim2);
 8005224:	a807      	add	r0, sp, #28
	max_peak_detector.min_aid = true;
 8005226:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
    PingOut ping_out(p_hdma_tim2_up, p_htim2);
 800522a:	f7ff feb3 	bl	8004f94 <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef>
    ping_out.start_periodic_scheduler(10);
 800522e:	210a      	movs	r1, #10
 8005230:	a807      	add	r0, sp, #28
 8005232:	f7ff fee7 	bl	8005004 <_ZN7PingOut24start_periodic_schedulerEi>
    //PingOut::debug = true;


    while (1) {

        max_peak_detector.detect_peak();
 8005236:	4668      	mov	r0, sp
 8005238:	a90f      	add	r1, sp, #60	@ 0x3c
 800523a:	f7ff fd43 	bl	8004cc4 <_ZN15MaxPeakDetector11detect_peakEv>
        ping_out.update();
 800523e:	a807      	add	r0, sp, #28
 8005240:	f7ff ff94 	bl	800516c <_ZN7PingOut6updateEv>
    while (1) {
 8005244:	e7f7      	b.n	8005236 <tof_master_main+0x4a>
 8005246:	bf00      	nop

08005248 <memset>:
 8005248:	4402      	add	r2, r0
 800524a:	4603      	mov	r3, r0
 800524c:	4293      	cmp	r3, r2
 800524e:	d100      	bne.n	8005252 <memset+0xa>
 8005250:	4770      	bx	lr
 8005252:	f803 1b01 	strb.w	r1, [r3], #1
 8005256:	e7f9      	b.n	800524c <memset+0x4>

08005258 <__libc_init_array>:
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	4d0d      	ldr	r5, [pc, #52]	@ (8005290 <__libc_init_array+0x38>)
 800525c:	4c0d      	ldr	r4, [pc, #52]	@ (8005294 <__libc_init_array+0x3c>)
 800525e:	1b64      	subs	r4, r4, r5
 8005260:	10a4      	asrs	r4, r4, #2
 8005262:	2600      	movs	r6, #0
 8005264:	42a6      	cmp	r6, r4
 8005266:	d109      	bne.n	800527c <__libc_init_array+0x24>
 8005268:	4d0b      	ldr	r5, [pc, #44]	@ (8005298 <__libc_init_array+0x40>)
 800526a:	4c0c      	ldr	r4, [pc, #48]	@ (800529c <__libc_init_array+0x44>)
 800526c:	f000 f818 	bl	80052a0 <_init>
 8005270:	1b64      	subs	r4, r4, r5
 8005272:	10a4      	asrs	r4, r4, #2
 8005274:	2600      	movs	r6, #0
 8005276:	42a6      	cmp	r6, r4
 8005278:	d105      	bne.n	8005286 <__libc_init_array+0x2e>
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005280:	4798      	blx	r3
 8005282:	3601      	adds	r6, #1
 8005284:	e7ee      	b.n	8005264 <__libc_init_array+0xc>
 8005286:	f855 3b04 	ldr.w	r3, [r5], #4
 800528a:	4798      	blx	r3
 800528c:	3601      	adds	r6, #1
 800528e:	e7f2      	b.n	8005276 <__libc_init_array+0x1e>
 8005290:	080055b0 	.word	0x080055b0
 8005294:	080055b0 	.word	0x080055b0
 8005298:	080055b0 	.word	0x080055b0
 800529c:	080055b4 	.word	0x080055b4

080052a0 <_init>:
 80052a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a2:	bf00      	nop
 80052a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a6:	bc08      	pop	{r3}
 80052a8:	469e      	mov	lr, r3
 80052aa:	4770      	bx	lr

080052ac <_fini>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	bf00      	nop
 80052b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b2:	bc08      	pop	{r3}
 80052b4:	469e      	mov	lr, r3
 80052b6:	4770      	bx	lr
