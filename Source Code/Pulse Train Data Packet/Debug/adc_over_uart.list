
adc_over_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005184  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800531c  0800531c  0000631c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005614  08005614  0000701c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005614  08005614  0000701c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005614  08005614  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005614  08005614  00006614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005618  08005618  00006618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0800561c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000701c  2**0
                  CONTENTS
 10 .bss          0000bfa4  2000001c  2000001c  0000701c  2**2
                  ALLOC
 11 ._user_heap_stack 00002a00  2000bfc0  2000bfc0  0000701c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0002596b  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000af  00000000  00000000  0002c9b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0002345a  00000000  00000000  0002ca66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000482e  00000000  00000000  0004fec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001158  00000000  00000000  000546f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4015  00000000  00000000  00055848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001659  00000000  00000000  0012985d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0000eb29  00000000  00000000  0012aeb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002295c  00000000  00000000  001399df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0015c33b  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000030ec  00000000  00000000  0015c380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005304 	.word	0x08005304

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08005304 	.word	0x08005304

080001d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000210 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80001dc:	f004 fc46 	bl	8004a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001e0:	480c      	ldr	r0, [pc, #48]	@ (8000214 <LoopForever+0x6>)
  ldr r1, =_edata
 80001e2:	490d      	ldr	r1, [pc, #52]	@ (8000218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001e4:	4a0d      	ldr	r2, [pc, #52]	@ (800021c <LoopForever+0xe>)
  movs r3, #0
 80001e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001e8:	e002      	b.n	80001f0 <LoopCopyDataInit>

080001ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ee:	3304      	adds	r3, #4

080001f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001f4:	d3f9      	bcc.n	80001ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000224 <LoopForever+0x16>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001fc:	e001      	b.n	8000202 <LoopFillZerobss>

080001fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000200:	3204      	adds	r2, #4

08000202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000204:	d3fb      	bcc.n	80001fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000206:	f005 f859 	bl	80052bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800020a:	f003 ff0f 	bl	800402c <main>

0800020e <LoopForever>:

LoopForever:
    b LoopForever
 800020e:	e7fe      	b.n	800020e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000210:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000218:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800021c:	0800561c 	.word	0x0800561c
  ldr r2, =_sbss
 8000220:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000224:	2000bfc0 	.word	0x2000bfc0

08000228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000228:	e7fe      	b.n	8000228 <ADC1_2_IRQHandler>
	...

0800022c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800022c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800022e:	4a0e      	ldr	r2, [pc, #56]	@ (8000268 <HAL_InitTick+0x3c>)
 8000230:	4b0e      	ldr	r3, [pc, #56]	@ (800026c <HAL_InitTick+0x40>)
 8000232:	7812      	ldrb	r2, [r2, #0]
{
 8000234:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000236:	6818      	ldr	r0, [r3, #0]
 8000238:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800023c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000240:	fbb0 f0f3 	udiv	r0, r0, r3
 8000244:	f000 ff94 	bl	8001170 <HAL_SYSTICK_Config>
 8000248:	b908      	cbnz	r0, 800024e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800024a:	2d0f      	cmp	r5, #15
 800024c:	d901      	bls.n	8000252 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800024e:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000250:	bd38      	pop	{r3, r4, r5, pc}
 8000252:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000254:	4602      	mov	r2, r0
 8000256:	4629      	mov	r1, r5
 8000258:	f04f 30ff 	mov.w	r0, #4294967295
 800025c:	f000 ff2e 	bl	80010bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000260:	4b03      	ldr	r3, [pc, #12]	@ (8000270 <HAL_InitTick+0x44>)
 8000262:	4620      	mov	r0, r4
 8000264:	601d      	str	r5, [r3, #0]
}
 8000266:	bd38      	pop	{r3, r4, r5, pc}
 8000268:	20000000 	.word	0x20000000
 800026c:	20000008 	.word	0x20000008
 8000270:	20000004 	.word	0x20000004

08000274 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	4a07      	ldr	r2, [pc, #28]	@ (8000294 <HAL_Init+0x20>)
{
 8000276:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000278:	6813      	ldr	r3, [r2, #0]
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000280:	2003      	movs	r0, #3
 8000282:	f000 fefd 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000286:	2000      	movs	r0, #0
 8000288:	f7ff ffd0 	bl	800022c <HAL_InitTick>
  HAL_MspInit();
 800028c:	f004 f9b8 	bl	8004600 <HAL_MspInit>
}
 8000290:	2000      	movs	r0, #0
 8000292:	bd08      	pop	{r3, pc}
 8000294:	40022000 	.word	0x40022000

08000298 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000298:	4a03      	ldr	r2, [pc, #12]	@ (80002a8 <HAL_IncTick+0x10>)
 800029a:	4b04      	ldr	r3, [pc, #16]	@ (80002ac <HAL_IncTick+0x14>)
 800029c:	6811      	ldr	r1, [r2, #0]
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	440b      	add	r3, r1
 80002a2:	6013      	str	r3, [r2, #0]
}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20000038 	.word	0x20000038
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80002b0:	4b01      	ldr	r3, [pc, #4]	@ (80002b8 <HAL_GetTick+0x8>)
 80002b2:	6818      	ldr	r0, [r3, #0]
}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	20000038 	.word	0x20000038

080002bc <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80002c0:	6802      	ldr	r2, [r0, #0]
{
 80002c2:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80002c4:	6893      	ldr	r3, [r2, #8]
 80002c6:	f003 0303 	and.w	r3, r3, #3
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d001      	beq.n	80002d2 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80002ce:	2000      	movs	r0, #0
}
 80002d0:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80002d2:	6813      	ldr	r3, [r2, #0]
 80002d4:	07dc      	lsls	r4, r3, #31
 80002d6:	d5fa      	bpl.n	80002ce <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80002d8:	6893      	ldr	r3, [r2, #8]
 80002da:	f003 030d 	and.w	r3, r3, #13
 80002de:	2b01      	cmp	r3, #1
 80002e0:	4604      	mov	r4, r0
 80002e2:	d009      	beq.n	80002f8 <ADC_Disable+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80002e6:	f043 0310 	orr.w	r3, r3, #16
 80002ea:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002ec:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 80002f4:	2001      	movs	r0, #1
}
 80002f6:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 80002f8:	6893      	ldr	r3, [r2, #8]
 80002fa:	2103      	movs	r1, #3
 80002fc:	f043 0302 	orr.w	r3, r3, #2
 8000300:	6093      	str	r3, [r2, #8]
 8000302:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8000304:	f7ff ffd4 	bl	80002b0 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000308:	6823      	ldr	r3, [r4, #0]
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 800030e:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000310:	d5dd      	bpl.n	80002ce <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000312:	f7ff ffcd 	bl	80002b0 <HAL_GetTick>
 8000316:	1b40      	subs	r0, r0, r5
 8000318:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800031a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800031c:	d902      	bls.n	8000324 <ADC_Disable+0x64>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800031e:	689a      	ldr	r2, [r3, #8]
 8000320:	07d2      	lsls	r2, r2, #31
 8000322:	d4df      	bmi.n	80002e4 <ADC_Disable+0x24>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	07db      	lsls	r3, r3, #31
 8000328:	d4f3      	bmi.n	8000312 <ADC_Disable+0x52>
 800032a:	e7d0      	b.n	80002ce <ADC_Disable+0xe>

0800032c <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 800032c:	6802      	ldr	r2, [r0, #0]
{
 800032e:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000330:	6893      	ldr	r3, [r2, #8]
 8000332:	f003 0303 	and.w	r3, r3, #3
 8000336:	2b01      	cmp	r3, #1
{
 8000338:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800033a:	d026      	beq.n	800038a <ADC_Enable+0x5e>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800033c:	6891      	ldr	r1, [r2, #8]
 800033e:	4b15      	ldr	r3, [pc, #84]	@ (8000394 <ADC_Enable+0x68>)
 8000340:	4219      	tst	r1, r3
 8000342:	d009      	beq.n	8000358 <ADC_Enable+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000344:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800034c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 8000354:	2001      	movs	r0, #1
}
 8000356:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000358:	6893      	ldr	r3, [r2, #8]
 800035a:	f043 0301 	orr.w	r3, r3, #1
 800035e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8000360:	f7ff ffa6 	bl	80002b0 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000364:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8000366:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	07d9      	lsls	r1, r3, #31
 800036c:	d40b      	bmi.n	8000386 <ADC_Enable+0x5a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800036e:	f7ff ff9f 	bl	80002b0 <HAL_GetTick>
 8000372:	1b43      	subs	r3, r0, r5
 8000374:	2b02      	cmp	r3, #2
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000376:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000378:	d9f6      	bls.n	8000368 <ADC_Enable+0x3c>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	07d2      	lsls	r2, r2, #31
 800037e:	d5e1      	bpl.n	8000344 <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	07d9      	lsls	r1, r3, #31
 8000384:	d5f3      	bpl.n	800036e <ADC_Enable+0x42>
  return HAL_OK;
 8000386:	2000      	movs	r0, #0
}
 8000388:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800038a:	6813      	ldr	r3, [r2, #0]
 800038c:	07d8      	lsls	r0, r3, #31
 800038e:	d5d5      	bpl.n	800033c <ADC_Enable+0x10>
  return HAL_OK;
 8000390:	2000      	movs	r0, #0
 8000392:	e7f9      	b.n	8000388 <ADC_Enable+0x5c>
 8000394:	8000003f 	.word	0x8000003f

08000398 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000398:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800039a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800039c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003a0:	6403      	str	r3, [r0, #64]	@ 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80003a2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80003a4:	f043 0304 	orr.w	r3, r3, #4
 80003a8:	6443      	str	r3, [r0, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 80003aa:	f7ff bf87 	b.w	80002bc <HAL_ADC_ErrorCallback>
 80003ae:	bf00      	nop

080003b0 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80003b0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80003b2:	f004 bccb 	b.w	8004d4c <HAL_ADC_ConvHalfCpltCallback>
 80003b6:	bf00      	nop

080003b8 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80003b8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80003ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003bc:	f012 0f50 	tst.w	r2, #80	@ 0x50
 80003c0:	d118      	bne.n	80003f4 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80003c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80003c4:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80003c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80003ca:	641a      	str	r2, [r3, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80003cc:	68ca      	ldr	r2, [r1, #12]
 80003ce:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80003d2:	d10c      	bne.n	80003ee <ADC_DMAConvCplt+0x36>
 80003d4:	7e5a      	ldrb	r2, [r3, #25]
 80003d6:	b952      	cbnz	r2, 80003ee <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80003d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80003de:	641a      	str	r2, [r3, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80003e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003e2:	04d2      	lsls	r2, r2, #19
 80003e4:	d403      	bmi.n	80003ee <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80003e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003e8:	f042 0201 	orr.w	r2, r2, #1
 80003ec:	641a      	str	r2, [r3, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 80003ee:	4618      	mov	r0, r3
 80003f0:	f004 bcca 	b.w	8004d88 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80003f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f8:	4718      	bx	r3
 80003fa:	bf00      	nop

080003fc <HAL_ADC_Init>:
{
 80003fc:	b530      	push	{r4, r5, lr}
 80003fe:	b097      	sub	sp, #92	@ 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000400:	2300      	movs	r3, #0
 8000402:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8000404:	2800      	cmp	r0, #0
 8000406:	f000 80a8 	beq.w	800055a <HAL_ADC_Init+0x15e>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800040a:	6803      	ldr	r3, [r0, #0]
 800040c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000410:	4604      	mov	r4, r0
 8000412:	d00e      	beq.n	8000432 <HAL_ADC_Init+0x36>
 8000414:	4aa7      	ldr	r2, [pc, #668]	@ (80006b4 <HAL_ADC_Init+0x2b8>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d00b      	beq.n	8000432 <HAL_ADC_Init+0x36>
 800041a:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 800041e:	4293      	cmp	r3, r2
 8000420:	d007      	beq.n	8000432 <HAL_ADC_Init+0x36>
 8000422:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8000426:	4293      	cmp	r3, r2
 8000428:	d003      	beq.n	8000432 <HAL_ADC_Init+0x36>
 800042a:	48a3      	ldr	r0, [pc, #652]	@ (80006b8 <HAL_ADC_Init+0x2bc>)
 800042c:	21f2      	movs	r1, #242	@ 0xf2
 800042e:	f004 f8e5 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8000432:	6863      	ldr	r3, [r4, #4]
 8000434:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
 8000438:	d003      	beq.n	8000442 <HAL_ADC_Init+0x46>
 800043a:	489f      	ldr	r0, [pc, #636]	@ (80006b8 <HAL_ADC_Init+0x2bc>)
 800043c:	21f3      	movs	r1, #243	@ 0xf3
 800043e:	f004 f8dd 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8000442:	68a3      	ldr	r3, [r4, #8]
 8000444:	b143      	cbz	r3, 8000458 <HAL_ADC_Init+0x5c>
 8000446:	2b18      	cmp	r3, #24
 8000448:	f200 815c 	bhi.w	8000704 <HAL_ADC_Init+0x308>
 800044c:	4a9b      	ldr	r2, [pc, #620]	@ (80006bc <HAL_ADC_Init+0x2c0>)
 800044e:	fa22 f303 	lsr.w	r3, r2, r3
 8000452:	07dd      	lsls	r5, r3, #31
 8000454:	f140 8156 	bpl.w	8000704 <HAL_ADC_Init+0x308>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8000458:	68e3      	ldr	r3, [r4, #12]
 800045a:	f033 0320 	bics.w	r3, r3, #32
 800045e:	d003      	beq.n	8000468 <HAL_ADC_Init+0x6c>
 8000460:	4895      	ldr	r0, [pc, #596]	@ (80006b8 <HAL_ADC_Init+0x2bc>)
 8000462:	21f5      	movs	r1, #245	@ 0xf5
 8000464:	f004 f8ca 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000468:	6923      	ldr	r3, [r4, #16]
 800046a:	2b01      	cmp	r3, #1
 800046c:	f200 80f8 	bhi.w	8000660 <HAL_ADC_Init+0x264>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000470:	7e63      	ldrb	r3, [r4, #25]
 8000472:	2b01      	cmp	r3, #1
 8000474:	f200 80ea 	bhi.w	800064c <HAL_ADC_Init+0x250>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000478:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800047a:	f433 6340 	bics.w	r3, r3, #3072	@ 0xc00
 800047e:	d003      	beq.n	8000488 <HAL_ADC_Init+0x8c>
 8000480:	488d      	ldr	r0, [pc, #564]	@ (80006b8 <HAL_ADC_Init+0x2bc>)
 8000482:	21f8      	movs	r1, #248	@ 0xf8
 8000484:	f004 f8ba 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000488:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800048a:	2b01      	cmp	r3, #1
 800048c:	d925      	bls.n	80004da <HAL_ADC_Init+0xde>
 800048e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000492:	2a40      	cmp	r2, #64	@ 0x40
 8000494:	d021      	beq.n	80004da <HAL_ADC_Init+0xde>
 8000496:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800049a:	f5b2 7fe0 	cmp.w	r2, #448	@ 0x1c0
 800049e:	d01c      	beq.n	80004da <HAL_ADC_Init+0xde>
 80004a0:	f423 7210 	bic.w	r2, r3, #576	@ 0x240
 80004a4:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80004a8:	d017      	beq.n	80004da <HAL_ADC_Init+0xde>
 80004aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80004ae:	2a80      	cmp	r2, #128	@ 0x80
 80004b0:	d013      	beq.n	80004da <HAL_ADC_Init+0xde>
 80004b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80004b6:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80004ba:	d00e      	beq.n	80004da <HAL_ADC_Init+0xde>
 80004bc:	f5b3 7f60 	cmp.w	r3, #896	@ 0x380
 80004c0:	d00b      	beq.n	80004da <HAL_ADC_Init+0xde>
 80004c2:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 80004c6:	d008      	beq.n	80004da <HAL_ADC_Init+0xde>
 80004c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004cc:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 80004d0:	d003      	beq.n	80004da <HAL_ADC_Init+0xde>
 80004d2:	4879      	ldr	r0, [pc, #484]	@ (80006b8 <HAL_ADC_Init+0x2bc>)
 80004d4:	21f9      	movs	r1, #249	@ 0xf9
 80004d6:	f004 f891 	bl	80045fc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80004da:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80004de:	2b01      	cmp	r3, #1
 80004e0:	f200 80d9 	bhi.w	8000696 <HAL_ADC_Init+0x29a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80004e4:	6963      	ldr	r3, [r4, #20]
 80004e6:	2b04      	cmp	r3, #4
 80004e8:	d002      	beq.n	80004f0 <HAL_ADC_Init+0xf4>
 80004ea:	2b08      	cmp	r3, #8
 80004ec:	f040 80d8 	bne.w	80006a0 <HAL_ADC_Init+0x2a4>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 80004f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	f200 80c6 	bhi.w	8000684 <HAL_ADC_Init+0x288>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 80004f8:	7e23      	ldrb	r3, [r4, #24]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	f200 80b9 	bhi.w	8000672 <HAL_ADC_Init+0x276>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000500:	6923      	ldr	r3, [r4, #16]
 8000502:	b17b      	cbz	r3, 8000524 <HAL_ADC_Init+0x128>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000504:	69e3      	ldr	r3, [r4, #28]
 8000506:	3b01      	subs	r3, #1
 8000508:	2b0f      	cmp	r3, #15
 800050a:	f200 810b 	bhi.w	8000724 <HAL_ADC_Init+0x328>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800050e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000512:	2b01      	cmp	r3, #1
 8000514:	f200 80ee 	bhi.w	80006f4 <HAL_ADC_Init+0x2f8>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000518:	b123      	cbz	r3, 8000524 <HAL_ADC_Init+0x128>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800051a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800051c:	3b01      	subs	r3, #1
 800051e:	2b07      	cmp	r3, #7
 8000520:	f200 80fa 	bhi.w	8000718 <HAL_ADC_Init+0x31c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000524:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8000526:	f010 0010 	ands.w	r0, r0, #16
 800052a:	d119      	bne.n	8000560 <HAL_ADC_Init+0x164>
    if (hadc->State == HAL_ADC_STATE_RESET)
 800052c:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800052e:	2d00      	cmp	r5, #0
 8000530:	f000 80fe 	beq.w	8000730 <HAL_ADC_Init+0x334>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000534:	6823      	ldr	r3, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000536:	689a      	ldr	r2, [r3, #8]
 8000538:	00d2      	lsls	r2, r2, #3
 800053a:	f140 80c9 	bpl.w	80006d0 <HAL_ADC_Init+0x2d4>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800053e:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000540:	0095      	lsls	r5, r2, #2
 8000542:	f100 80c5 	bmi.w	80006d0 <HAL_ADC_Init+0x2d4>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000546:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8000548:	06d1      	lsls	r1, r2, #27
 800054a:	d400      	bmi.n	800054e <HAL_ADC_Init+0x152>
 800054c:	b160      	cbz	r0, 8000568 <HAL_ADC_Init+0x16c>
    ADC_STATE_CLR_SET(hadc->State,
 800054e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000550:	f023 0312 	bic.w	r3, r3, #18
 8000554:	f043 0310 	orr.w	r3, r3, #16
 8000558:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 800055a:	2001      	movs	r0, #1
}
 800055c:	b017      	add	sp, #92	@ 0x5c
 800055e:	bd30      	pop	{r4, r5, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000560:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000562:	06d8      	lsls	r0, r3, #27
 8000564:	d4f3      	bmi.n	800054e <HAL_ADC_Init+0x152>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000566:	6823      	ldr	r3, [r4, #0]
 8000568:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800056a:	0752      	lsls	r2, r2, #29
 800056c:	d4ef      	bmi.n	800054e <HAL_ADC_Init+0x152>
    ADC_STATE_CLR_SET(hadc->State,
 800056e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8000570:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8000574:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000578:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800057c:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800057e:	4a4d      	ldr	r2, [pc, #308]	@ (80006b4 <HAL_ADC_Init+0x2b8>)
 8000580:	f000 814d 	beq.w	800081e <HAL_ADC_Init+0x422>
 8000584:	4293      	cmp	r3, r2
 8000586:	f000 8151 	beq.w	800082c <HAL_ADC_Init+0x430>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800058a:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 800058e:	4293      	cmp	r3, r2
 8000590:	f000 80dc 	beq.w	800074c <HAL_ADC_Init+0x350>
 8000594:	494a      	ldr	r1, [pc, #296]	@ (80006c0 <HAL_ADC_Init+0x2c4>)
 8000596:	428b      	cmp	r3, r1
 8000598:	f000 815a 	beq.w	8000850 <HAL_ADC_Init+0x454>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800059c:	689a      	ldr	r2, [r3, #8]
 800059e:	f002 0203 	and.w	r2, r2, #3
 80005a2:	2a01      	cmp	r2, #1
 80005a4:	f000 8156 	beq.w	8000854 <HAL_ADC_Init+0x458>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80005a8:	4846      	ldr	r0, [pc, #280]	@ (80006c4 <HAL_ADC_Init+0x2c8>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 80005aa:	6882      	ldr	r2, [r0, #8]
 80005ac:	6861      	ldr	r1, [r4, #4]
 80005ae:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80005b2:	430a      	orrs	r2, r1
 80005b4:	6082      	str	r2, [r0, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80005b6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80005ba:	430a      	orrs	r2, r1
 80005bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80005be:	7e60      	ldrb	r0, [r4, #25]
 80005c0:	3901      	subs	r1, #1
 80005c2:	bf18      	it	ne
 80005c4:	2101      	movne	r1, #1
 80005c6:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 80005ca:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005ce:	f894 1020 	ldrb.w	r1, [r4, #32]
 80005d2:	2901      	cmp	r1, #1
 80005d4:	f000 80fe 	beq.w	80007d4 <HAL_ADC_Init+0x3d8>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005d8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80005da:	2901      	cmp	r1, #1
 80005dc:	d00e      	beq.n	80005fc <HAL_ADC_Init+0x200>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80005de:	483a      	ldr	r0, [pc, #232]	@ (80006c8 <HAL_ADC_Init+0x2cc>)
 80005e0:	4283      	cmp	r3, r0
 80005e2:	f000 8107 	beq.w	80007f4 <HAL_ADC_Init+0x3f8>
 80005e6:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 80005ea:	4283      	cmp	r3, r0
 80005ec:	f000 8102 	beq.w	80007f4 <HAL_ADC_Init+0x3f8>
 80005f0:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 80005f4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80005f6:	4310      	orrs	r0, r2
 80005f8:	ea40 0201 	orr.w	r2, r0, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80005fc:	6899      	ldr	r1, [r3, #8]
 80005fe:	f011 0f0c 	tst.w	r1, #12
 8000602:	d10c      	bne.n	800061e <HAL_ADC_Init+0x222>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000604:	68d9      	ldr	r1, [r3, #12]
 8000606:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800060a:	f021 0102 	bic.w	r1, r1, #2
 800060e:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000610:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8000614:	7e20      	ldrb	r0, [r4, #24]
 8000616:	0049      	lsls	r1, r1, #1
 8000618:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 800061c:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 800061e:	68d8      	ldr	r0, [r3, #12]
 8000620:	492a      	ldr	r1, [pc, #168]	@ (80006cc <HAL_ADC_Init+0x2d0>)
 8000622:	4001      	ands	r1, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000624:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8000626:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000628:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 800062a:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800062c:	f000 80da 	beq.w	80007e4 <HAL_ADC_Init+0x3e8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000632:	f022 020f 	bic.w	r2, r2, #15
 8000636:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000638:	2000      	movs	r0, #0
 800063a:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800063c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800063e:	f023 0303 	bic.w	r3, r3, #3
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8000648:	b017      	add	sp, #92	@ 0x5c
 800064a:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800064c:	481a      	ldr	r0, [pc, #104]	@ (80006b8 <HAL_ADC_Init+0x2bc>)
 800064e:	21f7      	movs	r1, #247	@ 0xf7
 8000650:	f003 ffd4 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000654:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000656:	f433 6340 	bics.w	r3, r3, #3072	@ 0xc00
 800065a:	f43f af15 	beq.w	8000488 <HAL_ADC_Init+0x8c>
 800065e:	e70f      	b.n	8000480 <HAL_ADC_Init+0x84>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000660:	4815      	ldr	r0, [pc, #84]	@ (80006b8 <HAL_ADC_Init+0x2bc>)
 8000662:	21f6      	movs	r1, #246	@ 0xf6
 8000664:	f003 ffca 	bl	80045fc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000668:	7e63      	ldrb	r3, [r4, #25]
 800066a:	2b01      	cmp	r3, #1
 800066c:	f67f af04 	bls.w	8000478 <HAL_ADC_Init+0x7c>
 8000670:	e7ec      	b.n	800064c <HAL_ADC_Init+0x250>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8000672:	4811      	ldr	r0, [pc, #68]	@ (80006b8 <HAL_ADC_Init+0x2bc>)
 8000674:	21fd      	movs	r1, #253	@ 0xfd
 8000676:	f003 ffc1 	bl	80045fc <assert_failed>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800067a:	6923      	ldr	r3, [r4, #16]
 800067c:	2b00      	cmp	r3, #0
 800067e:	f43f af51 	beq.w	8000524 <HAL_ADC_Init+0x128>
 8000682:	e73f      	b.n	8000504 <HAL_ADC_Init+0x108>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8000684:	480c      	ldr	r0, [pc, #48]	@ (80006b8 <HAL_ADC_Init+0x2bc>)
 8000686:	21fc      	movs	r1, #252	@ 0xfc
 8000688:	f003 ffb8 	bl	80045fc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 800068c:	7e23      	ldrb	r3, [r4, #24]
 800068e:	2b01      	cmp	r3, #1
 8000690:	f67f af36 	bls.w	8000500 <HAL_ADC_Init+0x104>
 8000694:	e7ed      	b.n	8000672 <HAL_ADC_Init+0x276>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000696:	4808      	ldr	r0, [pc, #32]	@ (80006b8 <HAL_ADC_Init+0x2bc>)
 8000698:	21fa      	movs	r1, #250	@ 0xfa
 800069a:	f003 ffaf 	bl	80045fc <assert_failed>
 800069e:	e721      	b.n	80004e4 <HAL_ADC_Init+0xe8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80006a0:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <HAL_ADC_Init+0x2bc>)
 80006a2:	21fb      	movs	r1, #251	@ 0xfb
 80006a4:	f003 ffaa 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 80006a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	f67f af24 	bls.w	80004f8 <HAL_ADC_Init+0xfc>
 80006b0:	e7e8      	b.n	8000684 <HAL_ADC_Init+0x288>
 80006b2:	bf00      	nop
 80006b4:	50000100 	.word	0x50000100
 80006b8:	0800531c 	.word	0x0800531c
 80006bc:	01010100 	.word	0x01010100
 80006c0:	50000500 	.word	0x50000500
 80006c4:	50000700 	.word	0x50000700
 80006c8:	50000400 	.word	0x50000400
 80006cc:	fff0c007 	.word	0xfff0c007
      ADC_STATE_CLR_SET(hadc->State,
 80006d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80006d2:	f023 0312 	bic.w	r3, r3, #18
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006dc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6463      	str	r3, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80006e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    ADC_STATE_CLR_SET(hadc->State,
 80006e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80006e8:	f023 0312 	bic.w	r3, r3, #18
 80006ec:	f043 0310 	orr.w	r3, r3, #16
 80006f0:	6423      	str	r3, [r4, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR; 
 80006f2:	e732      	b.n	800055a <HAL_ADC_Init+0x15e>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80006f4:	4860      	ldr	r0, [pc, #384]	@ (8000878 <HAL_ADC_Init+0x47c>)
 80006f6:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80006fa:	f003 ff7f 	bl	80045fc <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80006fe:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000702:	e709      	b.n	8000518 <HAL_ADC_Init+0x11c>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8000704:	485c      	ldr	r0, [pc, #368]	@ (8000878 <HAL_ADC_Init+0x47c>)
 8000706:	21f4      	movs	r1, #244	@ 0xf4
 8000708:	f003 ff78 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 800070c:	68e3      	ldr	r3, [r4, #12]
 800070e:	f033 0320 	bics.w	r3, r3, #32
 8000712:	f43f aea9 	beq.w	8000468 <HAL_ADC_Init+0x6c>
 8000716:	e6a3      	b.n	8000460 <HAL_ADC_Init+0x64>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000718:	4857      	ldr	r0, [pc, #348]	@ (8000878 <HAL_ADC_Init+0x47c>)
 800071a:	f240 1105 	movw	r1, #261	@ 0x105
 800071e:	f003 ff6d 	bl	80045fc <assert_failed>
 8000722:	e6ff      	b.n	8000524 <HAL_ADC_Init+0x128>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000724:	4854      	ldr	r0, [pc, #336]	@ (8000878 <HAL_ADC_Init+0x47c>)
 8000726:	f240 1101 	movw	r1, #257	@ 0x101
 800072a:	f003 ff67 	bl	80045fc <assert_failed>
 800072e:	e6ee      	b.n	800050e <HAL_ADC_Init+0x112>
      hadc->InjectionConfig.ContextQueue = 0U;
 8000730:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8000734:	6465      	str	r5, [r4, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 8000736:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 800073a:	4620      	mov	r0, r4
 800073c:	f003 ff7a 	bl	8004634 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000740:	6823      	ldr	r3, [r4, #0]
 8000742:	689a      	ldr	r2, [r3, #8]
 8000744:	00d1      	lsls	r1, r2, #3
 8000746:	d514      	bpl.n	8000772 <HAL_ADC_Init+0x376>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000748:	4628      	mov	r0, r5
 800074a:	e6f4      	b.n	8000536 <HAL_ADC_Init+0x13a>
 800074c:	4a4b      	ldr	r2, [pc, #300]	@ (800087c <HAL_ADC_Init+0x480>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800074e:	484c      	ldr	r0, [pc, #304]	@ (8000880 <HAL_ADC_Init+0x484>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000750:	6899      	ldr	r1, [r3, #8]
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000752:	9202      	str	r2, [sp, #8]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000754:	f001 0103 	and.w	r1, r1, #3
 8000758:	2901      	cmp	r1, #1
 800075a:	d062      	beq.n	8000822 <HAL_ADC_Init+0x426>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800075c:	6891      	ldr	r1, [r2, #8]
 800075e:	f001 0103 	and.w	r1, r1, #3
 8000762:	2901      	cmp	r1, #1
 8000764:	f47f af21 	bne.w	80005aa <HAL_ADC_Init+0x1ae>
 8000768:	6812      	ldr	r2, [r2, #0]
 800076a:	07d5      	lsls	r5, r2, #31
 800076c:	f53f af23 	bmi.w	80005b6 <HAL_ADC_Init+0x1ba>
 8000770:	e71b      	b.n	80005aa <HAL_ADC_Init+0x1ae>
        tmp_hal_status = ADC_Disable(hadc);
 8000772:	4620      	mov	r0, r4
 8000774:	f7ff fda4 	bl	80002c0 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000778:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800077a:	f013 0f10 	tst.w	r3, #16
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800077e:	6823      	ldr	r3, [r4, #0]
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000780:	f47f aed9 	bne.w	8000536 <HAL_ADC_Init+0x13a>
 8000784:	2800      	cmp	r0, #0
 8000786:	f47f aed6 	bne.w	8000536 <HAL_ADC_Init+0x13a>
          ADC_STATE_CLR_SET(hadc->State,
 800078a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800078c:	4d3d      	ldr	r5, [pc, #244]	@ (8000884 <HAL_ADC_Init+0x488>)
          ADC_STATE_CLR_SET(hadc->State,
 800078e:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8000792:	f022 0202 	bic.w	r2, r2, #2
 8000796:	f042 0202 	orr.w	r2, r2, #2
 800079a:	6422      	str	r2, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800079c:	6899      	ldr	r1, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800079e:	682a      	ldr	r2, [r5, #0]
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80007a0:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80007a4:	6099      	str	r1, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80007a6:	6899      	ldr	r1, [r3, #8]
 80007a8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80007ac:	6099      	str	r1, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007ae:	4936      	ldr	r1, [pc, #216]	@ (8000888 <HAL_ADC_Init+0x48c>)
 80007b0:	fba1 1202 	umull	r1, r2, r1, r2
 80007b4:	0c92      	lsrs	r2, r2, #18
 80007b6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80007ba:	0052      	lsls	r2, r2, #1
 80007bc:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80007be:	9a01      	ldr	r2, [sp, #4]
 80007c0:	2a00      	cmp	r2, #0
 80007c2:	f43f aeb8 	beq.w	8000536 <HAL_ADC_Init+0x13a>
            wait_loop_index--;
 80007c6:	9a01      	ldr	r2, [sp, #4]
 80007c8:	3a01      	subs	r2, #1
 80007ca:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80007cc:	9a01      	ldr	r2, [sp, #4]
 80007ce:	2a00      	cmp	r2, #0
 80007d0:	d1f9      	bne.n	80007c6 <HAL_ADC_Init+0x3ca>
 80007d2:	e6b0      	b.n	8000536 <HAL_ADC_Init+0x13a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007d4:	bb70      	cbnz	r0, 8000834 <HAL_ADC_Init+0x438>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80007d6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80007d8:	3901      	subs	r1, #1
 80007da:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 80007de:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
 80007e2:	e6f9      	b.n	80005d8 <HAL_ADC_Init+0x1dc>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80007e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80007e6:	69e2      	ldr	r2, [r4, #28]
 80007e8:	f021 010f 	bic.w	r1, r1, #15
 80007ec:	3a01      	subs	r2, #1
 80007ee:	430a      	orrs	r2, r1
 80007f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80007f2:	e721      	b.n	8000638 <HAL_ADC_Init+0x23c>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80007f4:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 80007f8:	d027      	beq.n	800084a <HAL_ADC_Init+0x44e>
 80007fa:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80007fe:	d02e      	beq.n	800085e <HAL_ADC_Init+0x462>
 8000800:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 8000804:	d02e      	beq.n	8000864 <HAL_ADC_Init+0x468>
 8000806:	f5b1 5f8a 	cmp.w	r1, #4416	@ 0x1140
 800080a:	d02e      	beq.n	800086a <HAL_ADC_Init+0x46e>
 800080c:	f5b1 5f84 	cmp.w	r1, #4224	@ 0x1080
 8000810:	d02e      	beq.n	8000870 <HAL_ADC_Init+0x474>
 8000812:	f5b1 5f86 	cmp.w	r1, #4288	@ 0x10c0
 8000816:	bf08      	it	eq
 8000818:	f44f 71c0 	moveq.w	r1, #384	@ 0x180
 800081c:	e6ea      	b.n	80005f4 <HAL_ADC_Init+0x1f8>
 800081e:	481b      	ldr	r0, [pc, #108]	@ (800088c <HAL_ADC_Init+0x490>)
 8000820:	e796      	b.n	8000750 <HAL_ADC_Init+0x354>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000822:	6819      	ldr	r1, [r3, #0]
 8000824:	07c9      	lsls	r1, r1, #31
 8000826:	f53f aec6 	bmi.w	80005b6 <HAL_ADC_Init+0x1ba>
 800082a:	e797      	b.n	800075c <HAL_ADC_Init+0x360>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800082c:	4817      	ldr	r0, [pc, #92]	@ (800088c <HAL_ADC_Init+0x490>)
 800082e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000832:	e78d      	b.n	8000750 <HAL_ADC_Init+0x354>
        ADC_STATE_CLR_SET(hadc->State,
 8000834:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8000836:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 800083a:	f041 0120 	orr.w	r1, r1, #32
 800083e:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000840:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8000842:	f041 0101 	orr.w	r1, r1, #1
 8000846:	6461      	str	r1, [r4, #68]	@ 0x44
 8000848:	e6c6      	b.n	80005d8 <HAL_ADC_Init+0x1dc>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800084a:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 800084e:	e6d1      	b.n	80005f4 <HAL_ADC_Init+0x1f8>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000850:	480b      	ldr	r0, [pc, #44]	@ (8000880 <HAL_ADC_Init+0x484>)
 8000852:	e77d      	b.n	8000750 <HAL_ADC_Init+0x354>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	07d0      	lsls	r0, r2, #31
 8000858:	f53f aead 	bmi.w	80005b6 <HAL_ADC_Init+0x1ba>
 800085c:	e6a4      	b.n	80005a8 <HAL_ADC_Init+0x1ac>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800085e:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8000862:	e6c7      	b.n	80005f4 <HAL_ADC_Init+0x1f8>
 8000864:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000868:	e6c4      	b.n	80005f4 <HAL_ADC_Init+0x1f8>
 800086a:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 800086e:	e6c1      	b.n	80005f4 <HAL_ADC_Init+0x1f8>
 8000870:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000874:	e6be      	b.n	80005f4 <HAL_ADC_Init+0x1f8>
 8000876:	bf00      	nop
 8000878:	0800531c 	.word	0x0800531c
 800087c:	50000500 	.word	0x50000500
 8000880:	50000700 	.word	0x50000700
 8000884:	20000008 	.word	0x20000008
 8000888:	431bde83 	.word	0x431bde83
 800088c:	50000300 	.word	0x50000300

08000890 <HAL_ADC_Start_DMA>:
{
 8000890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000892:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000894:	6800      	ldr	r0, [r0, #0]
 8000896:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
{
 800089a:	460f      	mov	r7, r1
 800089c:	4616      	mov	r6, r2
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800089e:	d010      	beq.n	80008c2 <HAL_ADC_Start_DMA+0x32>
 80008a0:	4b54      	ldr	r3, [pc, #336]	@ (80009f4 <HAL_ADC_Start_DMA+0x164>)
 80008a2:	4298      	cmp	r0, r3
 80008a4:	d00d      	beq.n	80008c2 <HAL_ADC_Start_DMA+0x32>
 80008a6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80008aa:	4298      	cmp	r0, r3
 80008ac:	d009      	beq.n	80008c2 <HAL_ADC_Start_DMA+0x32>
 80008ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80008b2:	4298      	cmp	r0, r3
 80008b4:	d005      	beq.n	80008c2 <HAL_ADC_Start_DMA+0x32>
 80008b6:	4850      	ldr	r0, [pc, #320]	@ (80009f8 <HAL_ADC_Start_DMA+0x168>)
 80008b8:	f640 115b 	movw	r1, #2395	@ 0x95b
 80008bc:	f003 fe9e 	bl	80045fc <assert_failed>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008c0:	6820      	ldr	r0, [r4, #0]
 80008c2:	6885      	ldr	r5, [r0, #8]
 80008c4:	076d      	lsls	r5, r5, #29
 80008c6:	d421      	bmi.n	800090c <HAL_ADC_Start_DMA+0x7c>
    __HAL_LOCK(hadc);
 80008c8:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d01d      	beq.n	800090c <HAL_ADC_Start_DMA+0x7c>
 80008d0:	2301      	movs	r3, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80008d2:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
    __HAL_LOCK(hadc);
 80008d6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80008da:	d00f      	beq.n	80008fc <HAL_ADC_Start_DMA+0x6c>
 80008dc:	4b45      	ldr	r3, [pc, #276]	@ (80009f4 <HAL_ADC_Start_DMA+0x164>)
 80008de:	4298      	cmp	r0, r3
 80008e0:	d00c      	beq.n	80008fc <HAL_ADC_Start_DMA+0x6c>
 80008e2:	4b46      	ldr	r3, [pc, #280]	@ (80009fc <HAL_ADC_Start_DMA+0x16c>)
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	f013 0f1f 	tst.w	r3, #31
 80008ea:	bf0c      	ite	eq
 80008ec:	2301      	moveq	r3, #1
 80008ee:	2300      	movne	r3, #0
 80008f0:	b97b      	cbnz	r3, 8000912 <HAL_ADC_Start_DMA+0x82>
      __HAL_UNLOCK(hadc);
 80008f2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      tmp_hal_status = HAL_ERROR;
 80008f6:	2501      	movs	r5, #1
}
 80008f8:	4628      	mov	r0, r5
 80008fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80008fc:	4b40      	ldr	r3, [pc, #256]	@ (8000a00 <HAL_ADC_Start_DMA+0x170>)
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	f013 0f1f 	tst.w	r3, #31
 8000904:	bf0c      	ite	eq
 8000906:	2301      	moveq	r3, #1
 8000908:	2300      	movne	r3, #0
 800090a:	e7f1      	b.n	80008f0 <HAL_ADC_Start_DMA+0x60>
    __HAL_LOCK(hadc);
 800090c:	2502      	movs	r5, #2
}
 800090e:	4628      	mov	r0, r5
 8000910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8000912:	4620      	mov	r0, r4
 8000914:	f7ff fd0a 	bl	800032c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8000918:	4605      	mov	r5, r0
 800091a:	2800      	cmp	r0, #0
 800091c:	d14c      	bne.n	80009b8 <HAL_ADC_Start_DMA+0x128>
        ADC_STATE_CLR_SET(hadc->State,
 800091e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000920:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8000922:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000926:	f023 0301 	bic.w	r3, r3, #1
 800092a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800092e:	f1b1 4fa0 	cmp.w	r1, #1342177280	@ 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 8000932:	6423      	str	r3, [r4, #64]	@ 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000934:	d053      	beq.n	80009de <HAL_ADC_Start_DMA+0x14e>
 8000936:	4b2f      	ldr	r3, [pc, #188]	@ (80009f4 <HAL_ADC_Start_DMA+0x164>)
 8000938:	4299      	cmp	r1, r3
 800093a:	d041      	beq.n	80009c0 <HAL_ADC_Start_DMA+0x130>
 800093c:	4b2f      	ldr	r3, [pc, #188]	@ (80009fc <HAL_ADC_Start_DMA+0x16c>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	06da      	lsls	r2, r3, #27
 8000942:	d04e      	beq.n	80009e2 <HAL_ADC_Start_DMA+0x152>
 8000944:	4a2f      	ldr	r2, [pc, #188]	@ (8000a04 <HAL_ADC_Start_DMA+0x174>)
 8000946:	4291      	cmp	r1, r2
 8000948:	d04b      	beq.n	80009e2 <HAL_ADC_Start_DMA+0x152>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800094a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800094c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000950:	6423      	str	r3, [r4, #64]	@ 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000952:	68d3      	ldr	r3, [r2, #12]
 8000954:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8000958:	b12b      	cbz	r3, 8000966 <HAL_ADC_Start_DMA+0xd6>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800095a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800095c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000960:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000964:	6423      	str	r3, [r4, #64]	@ 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000966:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000968:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800096a:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 8000a10 <HAL_ADC_Start_DMA+0x180>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800096e:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000972:	bf1c      	itt	ne
 8000974:	6c63      	ldrne	r3, [r4, #68]	@ 0x44
 8000976:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800097a:	6463      	str	r3, [r4, #68]	@ 0x44
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800097c:	463a      	mov	r2, r7
 800097e:	4633      	mov	r3, r6
        __HAL_UNLOCK(hadc);
 8000980:	f04f 0e00 	mov.w	lr, #0
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000984:	4e20      	ldr	r6, [pc, #128]	@ (8000a08 <HAL_ADC_Start_DMA+0x178>)
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000986:	4f21      	ldr	r7, [pc, #132]	@ (8000a0c <HAL_ADC_Start_DMA+0x17c>)
        __HAL_UNLOCK(hadc);
 8000988:	f884 e03c 	strb.w	lr, [r4, #60]	@ 0x3c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800098c:	6306      	str	r6, [r0, #48]	@ 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800098e:	261c      	movs	r6, #28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000990:	e9c0 c70a 	strd	ip, r7, [r0, #40]	@ 0x28
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000994:	600e      	str	r6, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000996:	684e      	ldr	r6, [r1, #4]
 8000998:	f046 0610 	orr.w	r6, r6, #16
 800099c:	604e      	str	r6, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800099e:	68ce      	ldr	r6, [r1, #12]
 80009a0:	f046 0601 	orr.w	r6, r6, #1
 80009a4:	60ce      	str	r6, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80009a6:	3140      	adds	r1, #64	@ 0x40
 80009a8:	f000 fd2e 	bl	8001408 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80009ac:	6822      	ldr	r2, [r4, #0]
 80009ae:	6893      	ldr	r3, [r2, #8]
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6093      	str	r3, [r2, #8]
 80009b6:	e79f      	b.n	80008f8 <HAL_ADC_Start_DMA+0x68>
        __HAL_UNLOCK(hadc);
 80009b8:	2300      	movs	r3, #0
 80009ba:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 80009be:	e79b      	b.n	80008f8 <HAL_ADC_Start_DMA+0x68>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80009c0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	06d8      	lsls	r0, r3, #27
 80009c8:	d00b      	beq.n	80009e2 <HAL_ADC_Start_DMA+0x152>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80009cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80009d0:	6423      	str	r3, [r4, #64]	@ 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	f3c3 6340 	ubfx	r3, r3, #25, #1
 80009dc:	e7bc      	b.n	8000958 <HAL_ADC_Start_DMA+0xc8>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80009de:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <HAL_ADC_Start_DMA+0x170>)
 80009e0:	689b      	ldr	r3, [r3, #8]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80009e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80009e8:	6423      	str	r3, [r4, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80009ea:	68cb      	ldr	r3, [r1, #12]
 80009ec:	019b      	lsls	r3, r3, #6
 80009ee:	d5ba      	bpl.n	8000966 <HAL_ADC_Start_DMA+0xd6>
 80009f0:	e7b3      	b.n	800095a <HAL_ADC_Start_DMA+0xca>
 80009f2:	bf00      	nop
 80009f4:	50000100 	.word	0x50000100
 80009f8:	0800531c 	.word	0x0800531c
 80009fc:	50000700 	.word	0x50000700
 8000a00:	50000300 	.word	0x50000300
 8000a04:	50000400 	.word	0x50000400
 8000a08:	08000399 	.word	0x08000399
 8000a0c:	080003b1 	.word	0x080003b1
 8000a10:	080003b9 	.word	0x080003b9

08000a14 <HAL_ADC_ConfigChannel>:
{
 8000a14:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000a16:	6803      	ldr	r3, [r0, #0]
{
 8000a18:	b096      	sub	sp, #88	@ 0x58
  __IO uint32_t wait_loop_index = 0U;
 8000a1a:	2200      	movs	r2, #0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
{
 8000a20:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8000a22:	9201      	str	r2, [sp, #4]
{
 8000a24:	460c      	mov	r4, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000a26:	d00f      	beq.n	8000a48 <HAL_ADC_ConfigChannel+0x34>
 8000a28:	4aa9      	ldr	r2, [pc, #676]	@ (8000cd0 <HAL_ADC_ConfigChannel+0x2bc>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d00c      	beq.n	8000a48 <HAL_ADC_ConfigChannel+0x34>
 8000a2e:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d008      	beq.n	8000a48 <HAL_ADC_ConfigChannel+0x34>
 8000a36:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d004      	beq.n	8000a48 <HAL_ADC_ConfigChannel+0x34>
 8000a3e:	48a5      	ldr	r0, [pc, #660]	@ (8000cd4 <HAL_ADC_ConfigChannel+0x2c0>)
 8000a40:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 8000a44:	f003 fdda 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8000a48:	6863      	ldr	r3, [r4, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	f200 8109 	bhi.w	8000c64 <HAL_ADC_ConfigChannel+0x250>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000a52:	68a3      	ldr	r3, [r4, #8]
 8000a54:	2b07      	cmp	r3, #7
 8000a56:	f200 810e 	bhi.w	8000c76 <HAL_ADC_ConfigChannel+0x262>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8000a5a:	68e3      	ldr	r3, [r4, #12]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d904      	bls.n	8000a6a <HAL_ADC_ConfigChannel+0x56>
 8000a60:	489c      	ldr	r0, [pc, #624]	@ (8000cd4 <HAL_ADC_ConfigChannel+0x2c0>)
 8000a62:	f241 51bb 	movw	r1, #5563	@ 0x15bb
 8000a66:	f003 fdc9 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8000a6a:	6923      	ldr	r3, [r4, #16]
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	f200 80f3 	bhi.w	8000c58 <HAL_ADC_ConfigChannel+0x244>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8000a72:	682b      	ldr	r3, [r5, #0]
 8000a74:	68da      	ldr	r2, [r3, #12]
 8000a76:	f012 0f18 	tst.w	r2, #24
 8000a7a:	d153      	bne.n	8000b24 <HAL_ADC_ConfigChannel+0x110>
 8000a7c:	6962      	ldr	r2, [r4, #20]
 8000a7e:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8000a82:	d24f      	bcs.n	8000b24 <HAL_ADC_ConfigChannel+0x110>
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000a84:	68e2      	ldr	r2, [r4, #12]
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000a86:	6823      	ldr	r3, [r4, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000a88:	2a01      	cmp	r2, #1
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000a8a:	f103 33ff 	add.w	r3, r3, #4294967295
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000a8e:	d067      	beq.n	8000b60 <HAL_ADC_ConfigChannel+0x14c>
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000a90:	2b11      	cmp	r3, #17
 8000a92:	f200 8091 	bhi.w	8000bb8 <HAL_ADC_ConfigChannel+0x1a4>
  __HAL_LOCK(hadc);
 8000a96:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d06b      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0x162>
 8000a9e:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000aa0:	682b      	ldr	r3, [r5, #0]
  __HAL_LOCK(hadc);
 8000aa2:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000aa6:	689a      	ldr	r2, [r3, #8]
 8000aa8:	0752      	lsls	r2, r2, #29
 8000aaa:	d46a      	bmi.n	8000b82 <HAL_ADC_ConfigChannel+0x16e>
    if (sConfig->Rank < 5U)
 8000aac:	6860      	ldr	r0, [r4, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 8000aae:	6821      	ldr	r1, [r4, #0]
 8000ab0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    if (sConfig->Rank < 5U)
 8000ab4:	2804      	cmp	r0, #4
      MODIFY_REG(hadc->Instance->SQR1,
 8000ab6:	ea4f 0242 	mov.w	r2, r2, lsl #1
    if (sConfig->Rank < 5U)
 8000aba:	f200 80e2 	bhi.w	8000c82 <HAL_ADC_ConfigChannel+0x26e>
      MODIFY_REG(hadc->Instance->SQR1,
 8000abe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000ac0:	f04f 0c1f 	mov.w	ip, #31
 8000ac4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac8:	ea20 000c 	bic.w	r0, r0, ip
 8000acc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad0:	4302      	orrs	r2, r0
 8000ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	f012 0f0c 	tst.w	r2, #12
 8000ada:	d17b      	bne.n	8000bd4 <HAL_ADC_ConfigChannel+0x1c0>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000adc:	2909      	cmp	r1, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ade:	68a2      	ldr	r2, [r4, #8]
 8000ae0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ae4:	f200 80e8 	bhi.w	8000cb8 <HAL_ADC_ConfigChannel+0x2a4>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ae8:	695e      	ldr	r6, [r3, #20]
 8000aea:	f04f 0c07 	mov.w	ip, #7
 8000aee:	4082      	lsls	r2, r0
 8000af0:	fa0c f000 	lsl.w	r0, ip, r0
 8000af4:	ea26 0000 	bic.w	r0, r6, r0
 8000af8:	4302      	orrs	r2, r0
 8000afa:	615a      	str	r2, [r3, #20]
    switch (sConfig->OffsetNumber)
 8000afc:	6920      	ldr	r0, [r4, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000afe:	68da      	ldr	r2, [r3, #12]
    switch (sConfig->OffsetNumber)
 8000b00:	f100 3cff 	add.w	ip, r0, #4294967295
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000b04:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8000b08:	6960      	ldr	r0, [r4, #20]
 8000b0a:	0052      	lsls	r2, r2, #1
 8000b0c:	4090      	lsls	r0, r2
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000b0e:	068a      	lsls	r2, r1, #26
    switch (sConfig->OffsetNumber)
 8000b10:	f1bc 0f03 	cmp.w	ip, #3
 8000b14:	f200 81b2 	bhi.w	8000e7c <HAL_ADC_ConfigChannel+0x468>
 8000b18:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8000b1c:	015c0054 	.word	0x015c0054
 8000b20:	014a0153 	.word	0x014a0153
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	f002 0218 	and.w	r2, r2, #24
 8000b2a:	2a08      	cmp	r2, #8
 8000b2c:	d033      	beq.n	8000b96 <HAL_ADC_ConfigChannel+0x182>
 8000b2e:	68da      	ldr	r2, [r3, #12]
 8000b30:	f002 0218 	and.w	r2, r2, #24
 8000b34:	2a10      	cmp	r2, #16
 8000b36:	f000 80dd 	beq.w	8000cf4 <HAL_ADC_ConfigChannel+0x2e0>
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	f003 0318 	and.w	r3, r3, #24
 8000b40:	2b18      	cmp	r3, #24
 8000b42:	d102      	bne.n	8000b4a <HAL_ADC_ConfigChannel+0x136>
 8000b44:	6963      	ldr	r3, [r4, #20]
 8000b46:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b48:	d99c      	bls.n	8000a84 <HAL_ADC_ConfigChannel+0x70>
 8000b4a:	4862      	ldr	r0, [pc, #392]	@ (8000cd4 <HAL_ADC_ConfigChannel+0x2c0>)
 8000b4c:	f241 51bd 	movw	r1, #5565	@ 0x15bd
 8000b50:	f003 fd54 	bl	80045fc <assert_failed>
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000b54:	68e2      	ldr	r2, [r4, #12]
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000b56:	6823      	ldr	r3, [r4, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000b58:	2a01      	cmp	r2, #1
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000b5a:	f103 33ff 	add.w	r3, r3, #4294967295
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000b5e:	d197      	bne.n	8000a90 <HAL_ADC_ConfigChannel+0x7c>
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
 8000b60:	2b0d      	cmp	r3, #13
 8000b62:	d998      	bls.n	8000a96 <HAL_ADC_ConfigChannel+0x82>
 8000b64:	485b      	ldr	r0, [pc, #364]	@ (8000cd4 <HAL_ADC_ConfigChannel+0x2c0>)
 8000b66:	f241 51c9 	movw	r1, #5577	@ 0x15c9
 8000b6a:	f003 fd47 	bl	80045fc <assert_failed>
  __HAL_LOCK(hadc);
 8000b6e:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d193      	bne.n	8000a9e <HAL_ADC_ConfigChannel+0x8a>
 8000b76:	2002      	movs	r0, #2
}
 8000b78:	b016      	add	sp, #88	@ 0x58
 8000b7a:	bd70      	pop	{r4, r5, r6, pc}
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000b7c:	681c      	ldr	r4, [r3, #0]
 8000b7e:	07e4      	lsls	r4, r4, #31
 8000b80:	d559      	bpl.n	8000c36 <HAL_ADC_ConfigChannel+0x222>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b82:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8000b84:	f043 0320 	orr.w	r3, r3, #32
 8000b88:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8000b8a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 8000b92:	b016      	add	sp, #88	@ 0x58
 8000b94:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8000b96:	6962      	ldr	r2, [r4, #20]
 8000b98:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8000b9c:	f4ff af72 	bcc.w	8000a84 <HAL_ADC_ConfigChannel+0x70>
 8000ba0:	68da      	ldr	r2, [r3, #12]
 8000ba2:	f002 0218 	and.w	r2, r2, #24
 8000ba6:	2a10      	cmp	r2, #16
 8000ba8:	d1c7      	bne.n	8000b3a <HAL_ADC_ConfigChannel+0x126>
 8000baa:	484a      	ldr	r0, [pc, #296]	@ (8000cd4 <HAL_ADC_ConfigChannel+0x2c0>)
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	f241 51bd 	movw	r1, #5565	@ 0x15bd
 8000bb2:	f003 fd23 	bl	80045fc <assert_failed>
 8000bb6:	e7cd      	b.n	8000b54 <HAL_ADC_ConfigChannel+0x140>
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000bb8:	4846      	ldr	r0, [pc, #280]	@ (8000cd4 <HAL_ADC_ConfigChannel+0x2c0>)
 8000bba:	f241 51c5 	movw	r1, #5573	@ 0x15c5
 8000bbe:	f003 fd1d 	bl	80045fc <assert_failed>
 8000bc2:	e768      	b.n	8000a96 <HAL_ADC_ConfigChannel+0x82>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000bc4:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 8000bc6:	4310      	orrs	r0, r2
 8000bc8:	4a43      	ldr	r2, [pc, #268]	@ (8000cd8 <HAL_ADC_ConfigChannel+0x2c4>)
 8000bca:	4032      	ands	r2, r6
 8000bcc:	4302      	orrs	r2, r0
 8000bce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000bd2:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	f002 0203 	and.w	r2, r2, #3
 8000bda:	2a01      	cmp	r2, #1
 8000bdc:	f000 808f 	beq.w	8000cfe <HAL_ADC_ConfigChannel+0x2ea>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000be0:	68e0      	ldr	r0, [r4, #12]
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000be2:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000be4:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000be6:	fa02 f201 	lsl.w	r2, r2, r1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000bea:	f000 808e 	beq.w	8000d0a <HAL_ADC_ConfigChannel+0x2f6>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000bee:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8000bf2:	ea20 0202 	bic.w	r2, r0, r2
 8000bf6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bfe:	f000 8099 	beq.w	8000d34 <HAL_ADC_ConfigChannel+0x320>
 8000c02:	4a33      	ldr	r2, [pc, #204]	@ (8000cd0 <HAL_ADC_ConfigChannel+0x2bc>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d06b      	beq.n	8000ce0 <HAL_ADC_ConfigChannel+0x2cc>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000c08:	2910      	cmp	r1, #16
 8000c0a:	f000 80b2 	beq.w	8000d72 <HAL_ADC_ConfigChannel+0x35e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000c0e:	2911      	cmp	r1, #17
 8000c10:	f000 80e9 	beq.w	8000de6 <HAL_ADC_ConfigChannel+0x3d2>
{
 8000c14:	4a31      	ldr	r2, [pc, #196]	@ (8000cdc <HAL_ADC_ConfigChannel+0x2c8>)
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000c16:	2912      	cmp	r1, #18
 8000c18:	d175      	bne.n	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000c1a:	6890      	ldr	r0, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000c1c:	0244      	lsls	r4, r0, #9
 8000c1e:	d472      	bmi.n	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c24:	f040 80e3 	bne.w	8000dee <HAL_ADC_ConfigChannel+0x3da>
 8000c28:	4829      	ldr	r0, [pc, #164]	@ (8000cd0 <HAL_ADC_ConfigChannel+0x2bc>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000c2a:	689c      	ldr	r4, [r3, #8]
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c2c:	9002      	str	r0, [sp, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000c2e:	f004 0403 	and.w	r4, r4, #3
 8000c32:	2c01      	cmp	r4, #1
 8000c34:	d0a2      	beq.n	8000b7c <HAL_ADC_ConfigChannel+0x168>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c36:	6884      	ldr	r4, [r0, #8]
 8000c38:	f004 0403 	and.w	r4, r4, #3
 8000c3c:	2c01      	cmp	r4, #1
 8000c3e:	f000 80ee 	beq.w	8000e1e <HAL_ADC_ConfigChannel+0x40a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000c42:	2910      	cmp	r1, #16
 8000c44:	f000 80f0 	beq.w	8000e28 <HAL_ADC_ConfigChannel+0x414>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000c48:	2911      	cmp	r1, #17
 8000c4a:	f000 80da 	beq.w	8000e02 <HAL_ADC_ConfigChannel+0x3ee>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000c4e:	6893      	ldr	r3, [r2, #8]
 8000c50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c54:	6093      	str	r3, [r2, #8]
 8000c56:	e056      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8000c58:	481e      	ldr	r0, [pc, #120]	@ (8000cd4 <HAL_ADC_ConfigChannel+0x2c0>)
 8000c5a:	f241 51bc 	movw	r1, #5564	@ 0x15bc
 8000c5e:	f003 fccd 	bl	80045fc <assert_failed>
 8000c62:	e706      	b.n	8000a72 <HAL_ADC_ConfigChannel+0x5e>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8000c64:	481b      	ldr	r0, [pc, #108]	@ (8000cd4 <HAL_ADC_ConfigChannel+0x2c0>)
 8000c66:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 8000c6a:	f003 fcc7 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000c6e:	68a3      	ldr	r3, [r4, #8]
 8000c70:	2b07      	cmp	r3, #7
 8000c72:	f67f aef2 	bls.w	8000a5a <HAL_ADC_ConfigChannel+0x46>
 8000c76:	4817      	ldr	r0, [pc, #92]	@ (8000cd4 <HAL_ADC_ConfigChannel+0x2c0>)
 8000c78:	f241 51ba 	movw	r1, #5562	@ 0x15ba
 8000c7c:	f003 fcbe 	bl	80045fc <assert_failed>
 8000c80:	e6eb      	b.n	8000a5a <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 10U)
 8000c82:	2809      	cmp	r0, #9
 8000c84:	d90d      	bls.n	8000ca2 <HAL_ADC_ConfigChannel+0x28e>
    else if (sConfig->Rank < 15U)
 8000c86:	280e      	cmp	r0, #14
 8000c88:	f200 8087 	bhi.w	8000d9a <HAL_ADC_ConfigChannel+0x386>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c8c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000c8e:	3a3c      	subs	r2, #60	@ 0x3c
 8000c90:	261f      	movs	r6, #31
 8000c92:	4096      	lsls	r6, r2
 8000c94:	ea20 0006 	bic.w	r0, r0, r6
 8000c98:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9c:	4302      	orrs	r2, r0
 8000c9e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ca0:	e718      	b.n	8000ad4 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->SQR2,
 8000ca2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000ca4:	3a1e      	subs	r2, #30
 8000ca6:	261f      	movs	r6, #31
 8000ca8:	4096      	lsls	r6, r2
 8000caa:	ea20 0006 	bic.w	r0, r0, r6
 8000cae:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb2:	4302      	orrs	r2, r0
 8000cb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cb6:	e70d      	b.n	8000ad4 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000cb8:	699e      	ldr	r6, [r3, #24]
 8000cba:	381e      	subs	r0, #30
 8000cbc:	f04f 0c07 	mov.w	ip, #7
 8000cc0:	4082      	lsls	r2, r0
 8000cc2:	fa0c f000 	lsl.w	r0, ip, r0
 8000cc6:	ea26 0000 	bic.w	r0, r6, r0
 8000cca:	4302      	orrs	r2, r0
 8000ccc:	619a      	str	r2, [r3, #24]
 8000cce:	e715      	b.n	8000afc <HAL_ADC_ConfigChannel+0xe8>
 8000cd0:	50000100 	.word	0x50000100
 8000cd4:	0800531c 	.word	0x0800531c
 8000cd8:	83fff000 	.word	0x83fff000
 8000cdc:	50000700 	.word	0x50000700
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000ce0:	2910      	cmp	r1, #16
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000ce2:	4a7b      	ldr	r2, [pc, #492]	@ (8000ed0 <HAL_ADC_ConfigChannel+0x4bc>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000ce4:	f000 8089 	beq.w	8000dfa <HAL_ADC_ConfigChannel+0x3e6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000ce8:	2911      	cmp	r1, #17
 8000cea:	d194      	bne.n	8000c16 <HAL_ADC_ConfigChannel+0x202>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000cec:	6890      	ldr	r0, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000cee:	01c6      	lsls	r6, r0, #7
 8000cf0:	d57d      	bpl.n	8000dee <HAL_ADC_ConfigChannel+0x3da>
 8000cf2:	e008      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8000cf4:	6962      	ldr	r2, [r4, #20]
 8000cf6:	2aff      	cmp	r2, #255	@ 0xff
 8000cf8:	f67f aec4 	bls.w	8000a84 <HAL_ADC_ConfigChannel+0x70>
 8000cfc:	e755      	b.n	8000baa <HAL_ADC_ConfigChannel+0x196>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	07d6      	lsls	r6, r2, #31
 8000d02:	f57f af6d 	bpl.w	8000be0 <HAL_ADC_ConfigChannel+0x1cc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d06:	2000      	movs	r0, #0
 8000d08:	e740      	b.n	8000b8c <HAL_ADC_ConfigChannel+0x178>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000d0a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d0e:	68a4      	ldr	r4, [r4, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000d10:	4302      	orrs	r2, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d12:	2909      	cmp	r1, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000d14:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d18:	d917      	bls.n	8000d4a <HAL_ADC_ConfigChannel+0x336>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000d1a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8000d1e:	699a      	ldr	r2, [r3, #24]
 8000d20:	381b      	subs	r0, #27
 8000d22:	2607      	movs	r6, #7
 8000d24:	4084      	lsls	r4, r0
 8000d26:	fa06 f000 	lsl.w	r0, r6, r0
 8000d2a:	ea22 0200 	bic.w	r2, r2, r0
 8000d2e:	4322      	orrs	r2, r4
 8000d30:	619a      	str	r2, [r3, #24]
 8000d32:	e762      	b.n	8000bfa <HAL_ADC_ConfigChannel+0x1e6>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000d34:	2910      	cmp	r1, #16
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000d36:	4a66      	ldr	r2, [pc, #408]	@ (8000ed0 <HAL_ADC_ConfigChannel+0x4bc>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000d38:	d06c      	beq.n	8000e14 <HAL_ADC_ConfigChannel+0x400>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000d3a:	2911      	cmp	r1, #17
 8000d3c:	f47f af6b 	bne.w	8000c16 <HAL_ADC_ConfigChannel+0x202>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000d40:	6890      	ldr	r0, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000d42:	01c0      	lsls	r0, r0, #7
 8000d44:	f57f af70 	bpl.w	8000c28 <HAL_ADC_ConfigChannel+0x214>
 8000d48:	e7dd      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000d4a:	1c48      	adds	r0, r1, #1
 8000d4c:	695a      	ldr	r2, [r3, #20]
 8000d4e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000d52:	2607      	movs	r6, #7
 8000d54:	4084      	lsls	r4, r0
 8000d56:	fa06 f000 	lsl.w	r0, r6, r0
 8000d5a:	ea22 0200 	bic.w	r2, r2, r0
 8000d5e:	4322      	orrs	r2, r4
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8000d64:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d66:	d0ce      	beq.n	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
 8000d68:	4a5a      	ldr	r2, [pc, #360]	@ (8000ed4 <HAL_ADC_ConfigChannel+0x4c0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	f47f af52 	bne.w	8000c14 <HAL_ADC_ConfigChannel+0x200>
 8000d70:	e7c9      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000d72:	4a59      	ldr	r2, [pc, #356]	@ (8000ed8 <HAL_ADC_ConfigChannel+0x4c4>)
 8000d74:	6890      	ldr	r0, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000d76:	0200      	lsls	r0, r0, #8
 8000d78:	d4c5      	bmi.n	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d7a:	4858      	ldr	r0, [pc, #352]	@ (8000edc <HAL_ADC_ConfigChannel+0x4c8>)
 8000d7c:	4283      	cmp	r3, r0
 8000d7e:	d070      	beq.n	8000e62 <HAL_ADC_ConfigChannel+0x44e>
 8000d80:	4c57      	ldr	r4, [pc, #348]	@ (8000ee0 <HAL_ADC_ConfigChannel+0x4cc>)
 8000d82:	42a3      	cmp	r3, r4
 8000d84:	f43f af51 	beq.w	8000c2a <HAL_ADC_ConfigChannel+0x216>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000d88:	6898      	ldr	r0, [r3, #8]
 8000d8a:	f000 0003 	and.w	r0, r0, #3
 8000d8e:	2801      	cmp	r0, #1
 8000d90:	d069      	beq.n	8000e66 <HAL_ADC_ConfigChannel+0x452>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000d92:	2910      	cmp	r1, #16
 8000d94:	f47f af58 	bne.w	8000c48 <HAL_ADC_ConfigChannel+0x234>
 8000d98:	e7b5      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000d9a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000d9c:	3a5a      	subs	r2, #90	@ 0x5a
 8000d9e:	261f      	movs	r6, #31
 8000da0:	4096      	lsls	r6, r2
 8000da2:	ea20 0006 	bic.w	r0, r0, r6
 8000da6:	fa01 f202 	lsl.w	r2, r1, r2
 8000daa:	4302      	orrs	r2, r0
 8000dac:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dae:	e691      	b.n	8000ad4 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000db0:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8000db2:	4310      	orrs	r0, r2
 8000db4:	4a4b      	ldr	r2, [pc, #300]	@ (8000ee4 <HAL_ADC_ConfigChannel+0x4d0>)
 8000db6:	4032      	ands	r2, r6
 8000db8:	4302      	orrs	r2, r0
 8000dba:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000dbe:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8000dc0:	e708      	b.n	8000bd4 <HAL_ADC_ConfigChannel+0x1c0>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000dc2:	6e9e      	ldr	r6, [r3, #104]	@ 0x68
 8000dc4:	4310      	orrs	r0, r2
 8000dc6:	4a47      	ldr	r2, [pc, #284]	@ (8000ee4 <HAL_ADC_ConfigChannel+0x4d0>)
 8000dc8:	4032      	ands	r2, r6
 8000dca:	4302      	orrs	r2, r0
 8000dcc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000dd0:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8000dd2:	e6ff      	b.n	8000bd4 <HAL_ADC_ConfigChannel+0x1c0>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000dd4:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8000dd6:	4310      	orrs	r0, r2
 8000dd8:	4a42      	ldr	r2, [pc, #264]	@ (8000ee4 <HAL_ADC_ConfigChannel+0x4d0>)
 8000dda:	4032      	ands	r2, r6
 8000ddc:	4302      	orrs	r2, r0
 8000dde:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000de2:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8000de4:	e6f6      	b.n	8000bd4 <HAL_ADC_ConfigChannel+0x1c0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000de6:	4a3c      	ldr	r2, [pc, #240]	@ (8000ed8 <HAL_ADC_ConfigChannel+0x4c4>)
 8000de8:	6890      	ldr	r0, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000dea:	01c4      	lsls	r4, r0, #7
 8000dec:	d48b      	bmi.n	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000dee:	4839      	ldr	r0, [pc, #228]	@ (8000ed4 <HAL_ADC_ConfigChannel+0x4c0>)
 8000df0:	4283      	cmp	r3, r0
 8000df2:	d1c2      	bne.n	8000d7a <HAL_ADC_ConfigChannel+0x366>
 8000df4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8000df8:	e717      	b.n	8000c2a <HAL_ADC_ConfigChannel+0x216>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000dfa:	6890      	ldr	r0, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000dfc:	0204      	lsls	r4, r0, #8
 8000dfe:	d5f9      	bpl.n	8000df4 <HAL_ADC_ConfigChannel+0x3e0>
 8000e00:	e781      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e06:	f47f af7e 	bne.w	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000e0a:	6893      	ldr	r3, [r2, #8]
 8000e0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e10:	6093      	str	r3, [r2, #8]
 8000e12:	e778      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000e14:	6890      	ldr	r0, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000e16:	0206      	lsls	r6, r0, #8
 8000e18:	f57f af06 	bpl.w	8000c28 <HAL_ADC_ConfigChannel+0x214>
 8000e1c:	e773      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e1e:	6800      	ldr	r0, [r0, #0]
 8000e20:	07c0      	lsls	r0, r0, #31
 8000e22:	f53f aeae 	bmi.w	8000b82 <HAL_ADC_ConfigChannel+0x16e>
 8000e26:	e70c      	b.n	8000c42 <HAL_ADC_ConfigChannel+0x22e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e2c:	f47f af6b 	bne.w	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee8 <HAL_ADC_ConfigChannel+0x4d4>)
 8000e32:	482e      	ldr	r0, [pc, #184]	@ (8000eec <HAL_ADC_ConfigChannel+0x4d8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000e36:	6891      	ldr	r1, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e38:	fba0 0303 	umull	r0, r3, r0, r3
 8000e3c:	0c9b      	lsrs	r3, r3, #18
 8000e3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e42:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000e44:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000e48:	6091      	str	r1, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e4a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000e4c:	9b01      	ldr	r3, [sp, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f43f af59 	beq.w	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
            wait_loop_index--;
 8000e54:	9b01      	ldr	r3, [sp, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000e5a:	9b01      	ldr	r3, [sp, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1f9      	bne.n	8000e54 <HAL_ADC_ConfigChannel+0x440>
 8000e60:	e751      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
 8000e62:	481f      	ldr	r0, [pc, #124]	@ (8000ee0 <HAL_ADC_ConfigChannel+0x4cc>)
 8000e64:	e6e1      	b.n	8000c2a <HAL_ADC_ConfigChannel+0x216>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	07de      	lsls	r6, r3, #31
 8000e6a:	f53f ae8a 	bmi.w	8000b82 <HAL_ADC_ConfigChannel+0x16e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000e6e:	2910      	cmp	r1, #16
 8000e70:	f43f af49 	beq.w	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000e74:	2911      	cmp	r1, #17
 8000e76:	f47f aeea 	bne.w	8000c4e <HAL_ADC_ConfigChannel+0x23a>
 8000e7a:	e744      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x2f2>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e7c:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8000e7e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d014      	beq.n	8000eb0 <HAL_ADC_ConfigChannel+0x49c>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e86:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8000e88:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8000e8c:	4290      	cmp	r0, r2
 8000e8e:	d014      	beq.n	8000eba <HAL_ADC_ConfigChannel+0x4a6>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e90:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8000e92:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8000e96:	4290      	cmp	r0, r2
 8000e98:	d014      	beq.n	8000ec4 <HAL_ADC_ConfigChannel+0x4b0>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e9a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8000e9c:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8000ea0:	4290      	cmp	r0, r2
 8000ea2:	f47f ae97 	bne.w	8000bd4 <HAL_ADC_ConfigChannel+0x1c0>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000ea6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000ea8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000eac:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000eae:	e691      	b.n	8000bd4 <HAL_ADC_ConfigChannel+0x1c0>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000eb0:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8000eb2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8000eb6:	6618      	str	r0, [r3, #96]	@ 0x60
 8000eb8:	e7e5      	b.n	8000e86 <HAL_ADC_ConfigChannel+0x472>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000eba:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8000ebc:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8000ec0:	6658      	str	r0, [r3, #100]	@ 0x64
 8000ec2:	e7e5      	b.n	8000e90 <HAL_ADC_ConfigChannel+0x47c>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000ec4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8000ec6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8000eca:	6698      	str	r0, [r3, #104]	@ 0x68
 8000ecc:	e7e5      	b.n	8000e9a <HAL_ADC_ConfigChannel+0x486>
 8000ece:	bf00      	nop
 8000ed0:	50000300 	.word	0x50000300
 8000ed4:	50000100 	.word	0x50000100
 8000ed8:	50000700 	.word	0x50000700
 8000edc:	50000400 	.word	0x50000400
 8000ee0:	50000500 	.word	0x50000500
 8000ee4:	83fff000 	.word	0x83fff000
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	431bde83 	.word	0x431bde83

08000ef0 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8000ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8000ef2:	6803      	ldr	r3, [r0, #0]
 8000ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
{
 8000ef8:	4604      	mov	r4, r0
 8000efa:	460d      	mov	r5, r1
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8000efc:	d007      	beq.n	8000f0e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8000efe:	4a5a      	ldr	r2, [pc, #360]	@ (8001068 <HAL_ADCEx_MultiModeConfigChannel+0x178>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d004      	beq.n	8000f0e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8000f04:	4859      	ldr	r0, [pc, #356]	@ (800106c <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8000f06:	f641 3195 	movw	r1, #7061	@ 0x1b95
 8000f0a:	f003 fb77 	bl	80045fc <assert_failed>
  assert_param(IS_ADC_MODE(multimode->Mode));
 8000f0e:	682b      	ldr	r3, [r5, #0]
 8000f10:	2b09      	cmp	r3, #9
 8000f12:	d873      	bhi.n	8000ffc <HAL_ADCEx_MultiModeConfigChannel+0x10c>
 8000f14:	f240 22ef 	movw	r2, #751	@ 0x2ef
 8000f18:	40da      	lsrs	r2, r3
 8000f1a:	07d6      	lsls	r6, r2, #31
 8000f1c:	d56e      	bpl.n	8000ffc <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000f1e:	b1d3      	cbz	r3, 8000f56 <HAL_ADCEx_MultiModeConfigChannel+0x66>
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8000f20:	686b      	ldr	r3, [r5, #4]
 8000f22:	f433 4200 	bics.w	r2, r3, #32768	@ 0x8000
 8000f26:	d007      	beq.n	8000f38 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8000f28:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8000f2c:	d004      	beq.n	8000f38 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8000f2e:	484f      	ldr	r0, [pc, #316]	@ (800106c <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8000f30:	f641 3199 	movw	r1, #7065	@ 0x1b99
 8000f34:	f003 fb62 	bl	80045fc <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8000f38:	68ab      	ldr	r3, [r5, #8]
 8000f3a:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
 8000f3e:	d00a      	beq.n	8000f56 <HAL_ADCEx_MultiModeConfigChannel+0x66>
 8000f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f44:	d007      	beq.n	8000f56 <HAL_ADCEx_MultiModeConfigChannel+0x66>
 8000f46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f4a:	d004      	beq.n	8000f56 <HAL_ADCEx_MultiModeConfigChannel+0x66>
 8000f4c:	4847      	ldr	r0, [pc, #284]	@ (800106c <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8000f4e:	f641 319a 	movw	r1, #7066	@ 0x1b9a
 8000f52:	f003 fb53 	bl	80045fc <assert_failed>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	4a45      	ldr	r2, [pc, #276]	@ (8001070 <HAL_ADCEx_MultiModeConfigChannel+0x180>)
 8000f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f5e:	d00c      	beq.n	8000f7a <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d008      	beq.n	8000f76 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8000f64:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d04e      	beq.n	800100a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8000f6c:	4941      	ldr	r1, [pc, #260]	@ (8001074 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d003      	beq.n	8000f7a <HAL_ADCEx_MultiModeConfigChannel+0x8a>
    return HAL_ERROR;
 8000f72:	2001      	movs	r0, #1
} 
 8000f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f76:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  __HAL_LOCK(hadc);
 8000f7a:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 8000f7e:	2901      	cmp	r1, #1
 8000f80:	d048      	beq.n	8001014 <HAL_ADCEx_MultiModeConfigChannel+0x124>
 8000f82:	2101      	movs	r1, #1
 8000f84:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000f88:	6899      	ldr	r1, [r3, #8]
 8000f8a:	0748      	lsls	r0, r1, #29
 8000f8c:	d508      	bpl.n	8000fa0 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f90:	f043 0320 	orr.w	r3, r3, #32
    tmp_hal_status = HAL_ERROR;
 8000f94:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f96:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
} 
 8000f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000fa0:	6891      	ldr	r1, [r2, #8]
 8000fa2:	0749      	lsls	r1, r1, #29
 8000fa4:	d4f3      	bmi.n	8000f8e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000faa:	d04a      	beq.n	8001042 <HAL_ADCEx_MultiModeConfigChannel+0x152>
 8000fac:	4e30      	ldr	r6, [pc, #192]	@ (8001070 <HAL_ADCEx_MultiModeConfigChannel+0x180>)
 8000fae:	4932      	ldr	r1, [pc, #200]	@ (8001078 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8000fb0:	4832      	ldr	r0, [pc, #200]	@ (800107c <HAL_ADCEx_MultiModeConfigChannel+0x18c>)
 8000fb2:	42b3      	cmp	r3, r6
 8000fb4:	bf18      	it	ne
 8000fb6:	4601      	movne	r1, r0
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000fb8:	6828      	ldr	r0, [r5, #0]
 8000fba:	b368      	cbz	r0, 8001018 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000fbc:	688e      	ldr	r6, [r1, #8]
 8000fbe:	686f      	ldr	r7, [r5, #4]
 8000fc0:	f426 4c60 	bic.w	ip, r6, #57344	@ 0xe000
 8000fc4:	f894 6030 	ldrb.w	r6, [r4, #48]	@ 0x30
 8000fc8:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 8000fcc:	ea46 060c 	orr.w	r6, r6, ip
 8000fd0:	608e      	str	r6, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000fd2:	689e      	ldr	r6, [r3, #8]
 8000fd4:	f006 0603 	and.w	r6, r6, #3
 8000fd8:	2e01      	cmp	r6, #1
 8000fda:	d03c      	beq.n	8001056 <HAL_ADCEx_MultiModeConfigChannel+0x166>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000fdc:	6893      	ldr	r3, [r2, #8]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d02f      	beq.n	8001046 <HAL_ADCEx_MultiModeConfigChannel+0x156>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000fe6:	688b      	ldr	r3, [r1, #8]
 8000fe8:	68aa      	ldr	r2, [r5, #8]
 8000fea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8000fee:	4310      	orrs	r0, r2
 8000ff0:	f023 030f 	bic.w	r3, r3, #15
 8000ff4:	4318      	orrs	r0, r3
 8000ff6:	6088      	str	r0, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	e7cd      	b.n	8000f98 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
  assert_param(IS_ADC_MODE(multimode->Mode));
 8000ffc:	481b      	ldr	r0, [pc, #108]	@ (800106c <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8000ffe:	f641 3196 	movw	r1, #7062	@ 0x1b96
 8001002:	f003 fafb 	bl	80045fc <assert_failed>
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001006:	682b      	ldr	r3, [r5, #0]
 8001008:	e789      	b.n	8000f1e <HAL_ADCEx_MultiModeConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 800100a:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 800100e:	4a19      	ldr	r2, [pc, #100]	@ (8001074 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001010:	2901      	cmp	r1, #1
 8001012:	d1b6      	bne.n	8000f82 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8001014:	2002      	movs	r0, #2
} 
 8001016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001018:	6888      	ldr	r0, [r1, #8]
 800101a:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 800101e:	6088      	str	r0, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001020:	6898      	ldr	r0, [r3, #8]
 8001022:	f000 0003 	and.w	r0, r0, #3
 8001026:	2801      	cmp	r0, #1
 8001028:	d019      	beq.n	800105e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800102a:	6893      	ldr	r3, [r2, #8]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b01      	cmp	r3, #1
 8001032:	d00c      	beq.n	800104e <HAL_ADCEx_MultiModeConfigChannel+0x15e>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001034:	688b      	ldr	r3, [r1, #8]
 8001036:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800103a:	f023 030f 	bic.w	r3, r3, #15
 800103e:	608b      	str	r3, [r1, #8]
 8001040:	e7da      	b.n	8000ff8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001042:	490d      	ldr	r1, [pc, #52]	@ (8001078 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001044:	e7b8      	b.n	8000fb8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001046:	6813      	ldr	r3, [r2, #0]
 8001048:	07de      	lsls	r6, r3, #31
 800104a:	d4d5      	bmi.n	8000ff8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800104c:	e7cb      	b.n	8000fe6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800104e:	6813      	ldr	r3, [r2, #0]
 8001050:	07db      	lsls	r3, r3, #31
 8001052:	d4d1      	bmi.n	8000ff8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8001054:	e7ee      	b.n	8001034 <HAL_ADCEx_MultiModeConfigChannel+0x144>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	07df      	lsls	r7, r3, #31
 800105a:	d4cd      	bmi.n	8000ff8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800105c:	e7be      	b.n	8000fdc <HAL_ADCEx_MultiModeConfigChannel+0xec>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	07d8      	lsls	r0, r3, #31
 8001062:	d4c9      	bmi.n	8000ff8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8001064:	e7e1      	b.n	800102a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
 8001066:	bf00      	nop
 8001068:	50000400 	.word	0x50000400
 800106c:	0800531c 	.word	0x0800531c
 8001070:	50000100 	.word	0x50000100
 8001074:	50000500 	.word	0x50000500
 8001078:	50000300 	.word	0x50000300
 800107c:	50000700 	.word	0x50000700

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001080:	1ec3      	subs	r3, r0, #3
 8001082:	2b04      	cmp	r3, #4
{
 8001084:	b510      	push	{r4, lr}
 8001086:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001088:	d80e      	bhi.n	80010a8 <HAL_NVIC_SetPriorityGrouping+0x28>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108a:	490a      	ldr	r1, [pc, #40]	@ (80010b4 <HAL_NVIC_SetPriorityGrouping+0x34>)
 800108c:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108e:	0223      	lsls	r3, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001090:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001094:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001098:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80010a4:	60cb      	str	r3, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010a6:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80010a8:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <HAL_NVIC_SetPriorityGrouping+0x38>)
 80010aa:	21ab      	movs	r1, #171	@ 0xab
 80010ac:	f003 faa6 	bl	80045fc <assert_failed>
 80010b0:	e7eb      	b.n	800108a <HAL_NVIC_SetPriorityGrouping+0xa>
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	08005358 	.word	0x08005358

080010bc <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80010bc:	2a0f      	cmp	r2, #15
{
 80010be:	b570      	push	{r4, r5, r6, lr}
 80010c0:	4616      	mov	r6, r2
 80010c2:	4605      	mov	r5, r0
 80010c4:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80010c6:	d834      	bhi.n	8001132 <HAL_NVIC_SetPriority+0x76>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80010c8:	2c0f      	cmp	r4, #15
 80010ca:	d82d      	bhi.n	8001128 <HAL_NVIC_SetPriority+0x6c>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <HAL_NVIC_SetPriority+0x80>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	f1c3 0207 	rsb	r2, r3, #7
 80010d8:	2a04      	cmp	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	f103 0104 	add.w	r1, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010de:	bf28      	it	cs
 80010e0:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	2906      	cmp	r1, #6
 80010e4:	d917      	bls.n	8001116 <HAL_NVIC_SetPriority+0x5a>
 80010e6:	1ed9      	subs	r1, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	408b      	lsls	r3, r1
 80010ee:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	4093      	lsls	r3, r2
 80010f8:	ea24 0303 	bic.w	r3, r4, r3
 80010fc:	408b      	lsls	r3, r1
 80010fe:	4333      	orrs	r3, r6
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8001102:	2d00      	cmp	r5, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001106:	db09      	blt.n	800111c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	f105 4560 	add.w	r5, r5, #3758096384	@ 0xe0000000
 800110c:	f505 4561 	add.w	r5, r5, #57600	@ 0xe100
 8001110:	f885 3300 	strb.w	r3, [r5, #768]	@ 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001114:	bd70      	pop	{r4, r5, r6, pc}
 8001116:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001118:	4631      	mov	r1, r6
 800111a:	e7ea      	b.n	80010f2 <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	4a08      	ldr	r2, [pc, #32]	@ (8001140 <HAL_NVIC_SetPriority+0x84>)
 800111e:	f005 050f 	and.w	r5, r5, #15
 8001122:	442a      	add	r2, r5
 8001124:	7613      	strb	r3, [r2, #24]
 8001126:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001128:	4806      	ldr	r0, [pc, #24]	@ (8001144 <HAL_NVIC_SetPriority+0x88>)
 800112a:	21c4      	movs	r1, #196	@ 0xc4
 800112c:	f003 fa66 	bl	80045fc <assert_failed>
 8001130:	e7cc      	b.n	80010cc <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001132:	4804      	ldr	r0, [pc, #16]	@ (8001144 <HAL_NVIC_SetPriority+0x88>)
 8001134:	21c3      	movs	r1, #195	@ 0xc3
 8001136:	f003 fa61 	bl	80045fc <assert_failed>
 800113a:	e7c5      	b.n	80010c8 <HAL_NVIC_SetPriority+0xc>
 800113c:	e000ed00 	.word	0xe000ed00
 8001140:	e000ecfc 	.word	0xe000ecfc
 8001144:	08005358 	.word	0x08005358

08001148 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001148:	2800      	cmp	r0, #0
 800114a:	db08      	blt.n	800115e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114c:	0941      	lsrs	r1, r0, #5
 800114e:	4a06      	ldr	r2, [pc, #24]	@ (8001168 <HAL_NVIC_EnableIRQ+0x20>)
 8001150:	f000 001f 	and.w	r0, r0, #31
 8001154:	2301      	movs	r3, #1
 8001156:	4083      	lsls	r3, r0
 8001158:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800115c:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800115e:	4803      	ldr	r0, [pc, #12]	@ (800116c <HAL_NVIC_EnableIRQ+0x24>)
 8001160:	21d7      	movs	r1, #215	@ 0xd7
 8001162:	f003 ba4b 	b.w	80045fc <assert_failed>
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100
 800116c:	08005358 	.word	0x08005358

08001170 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	3801      	subs	r0, #1
 8001172:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001176:	d301      	bcc.n	800117c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001178:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800117a:	4770      	bx	lr
{
 800117c:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	4c07      	ldr	r4, [pc, #28]	@ (80011a0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001184:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 800118a:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001190:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001192:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	619a      	str	r2, [r3, #24]
}
 8001196:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	6119      	str	r1, [r3, #16]
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
  /* Check DAC handle */
  if(hdac == NULL)
 80011a4:	b1d8      	cbz	r0, 80011de <HAL_DAC_Init+0x3a>
  {
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <HAL_DAC_Init+0x40>)
 80011a8:	6802      	ldr	r2, [r0, #0]
 80011aa:	429a      	cmp	r2, r3
{
 80011ac:	b510      	push	{r4, lr}
 80011ae:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80011b0:	d004      	beq.n	80011bc <HAL_DAC_Init+0x18>
 80011b2:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <HAL_DAC_Init+0x44>)
 80011b4:	f240 1147 	movw	r1, #327	@ 0x147
 80011b8:	f003 fa20 	bl	80045fc <assert_failed>

  if(hdac->State == HAL_DAC_STATE_RESET)
 80011bc:	7923      	ldrb	r3, [r4, #4]
 80011be:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80011c2:	b13b      	cbz	r3, 80011d4 <HAL_DAC_Init+0x30>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80011c4:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80011c6:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80011c8:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80011ca:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80011cc:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80011ce:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80011d0:	4618      	mov	r0, r3
}
 80011d2:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80011d4:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 80011d6:	4620      	mov	r0, r4
 80011d8:	f003 fad6 	bl	8004788 <HAL_DAC_MspInit>
 80011dc:	e7f2      	b.n	80011c4 <HAL_DAC_Init+0x20>
     return HAL_ERROR;
 80011de:	2001      	movs	r0, #1
}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40007400 	.word	0x40007400
 80011e8:	08005394 	.word	0x08005394

080011ec <HAL_DAC_ConfigChannel>:
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80011ec:	680b      	ldr	r3, [r1, #0]
{
 80011ee:	b570      	push	{r4, r5, r6, lr}
 80011f0:	460d      	mov	r5, r1
 80011f2:	4604      	mov	r4, r0
 80011f4:	4616      	mov	r6, r2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80011f6:	b14b      	cbz	r3, 800120c <HAL_DAC_ConfigChannel+0x20>
 80011f8:	2b1c      	cmp	r3, #28
 80011fa:	d836      	bhi.n	800126a <HAL_DAC_ConfigChannel+0x7e>
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d93d      	bls.n	800127c <HAL_DAC_ConfigChannel+0x90>
 8001200:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8001204:	fa22 f303 	lsr.w	r3, r2, r3
 8001208:	07db      	lsls	r3, r3, #31
 800120a:	d537      	bpl.n	800127c <HAL_DAC_ConfigChannel+0x90>
  {
    /* Output Switch (OUTEN) control */
    assert_param(IS_DAC_OUTPUT_SWITCH_STATE(sConfig->DAC_OutputSwitch));    
  }    
#else
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
 800120c:	686b      	ldr	r3, [r5, #4]
 800120e:	f033 0302 	bics.w	r3, r3, #2
 8001212:	d004      	beq.n	800121e <HAL_DAC_ConfigChannel+0x32>
 8001214:	481d      	ldr	r0, [pc, #116]	@ (800128c <HAL_DAC_ConfigChannel+0xa0>)
 8001216:	f240 3116 	movw	r1, #790	@ 0x316
 800121a:	f003 f9ef 	bl	80045fc <assert_failed>
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 800121e:	f036 0310 	bics.w	r3, r6, #16
 8001222:	d004      	beq.n	800122e <HAL_DAC_ConfigChannel+0x42>
 8001224:	4819      	ldr	r0, [pc, #100]	@ (800128c <HAL_DAC_ConfigChannel+0xa0>)
 8001226:	f44f 7146 	mov.w	r1, #792	@ 0x318
 800122a:	f003 f9e7 	bl	80045fc <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800122e:	7963      	ldrb	r3, [r4, #5]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d029      	beq.n	8001288 <HAL_DAC_ConfigChannel+0x9c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001234:	2302      	movs	r3, #2
 8001236:	7123      	strb	r3, [r4, #4]
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001238:	e9d5 3000 	ldrd	r3, r0, [r5]
  tmpreg1 = hdac->Instance->CR;
 800123c:	6822      	ldr	r2, [r4, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800123e:	4303      	orrs	r3, r0
  tmpreg1 = hdac->Instance->CR;
 8001240:	6811      	ldr	r1, [r2, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001242:	f640 70fe 	movw	r0, #4094	@ 0xffe
 8001246:	40b0      	lsls	r0, r6
 8001248:	ea21 0100 	bic.w	r1, r1, r0
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800124c:	40b3      	lsls	r3, r6
 800124e:	430b      	orrs	r3, r1
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001250:	6013      	str	r3, [r2, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001252:	6813      	ldr	r3, [r2, #0]
 8001254:	21c0      	movs	r1, #192	@ 0xc0
 8001256:	40b1      	lsls	r1, r6

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001258:	2500      	movs	r5, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800125a:	ea23 0301 	bic.w	r3, r3, r1
  hdac->State = HAL_DAC_STATE_READY;
 800125e:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001260:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8001262:	7121      	strb	r1, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001264:	7165      	strb	r5, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
 8001266:	4628      	mov	r0, r5
}
 8001268:	bd70      	pop	{r4, r5, r6, pc}
 800126a:	3b24      	subs	r3, #36	@ 0x24
 800126c:	2b18      	cmp	r3, #24
 800126e:	d805      	bhi.n	800127c <HAL_DAC_ConfigChannel+0x90>
 8001270:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	07da      	lsls	r2, r3, #31
 800127a:	d4c7      	bmi.n	800120c <HAL_DAC_ConfigChannel+0x20>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800127c:	4803      	ldr	r0, [pc, #12]	@ (800128c <HAL_DAC_ConfigChannel+0xa0>)
 800127e:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8001282:	f003 f9bb 	bl	80045fc <assert_failed>
 8001286:	e7c1      	b.n	800120c <HAL_DAC_ConfigChannel+0x20>
  __HAL_LOCK(hdac);
 8001288:	2002      	movs	r0, #2
}
 800128a:	bd70      	pop	{r4, r5, r6, pc}
 800128c:	080053cc 	.word	0x080053cc

08001290 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001290:	2800      	cmp	r0, #0
 8001292:	f000 80a7 	beq.w	80013e4 <HAL_DMA_Init+0x154>
{
 8001296:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8001298:	4a53      	ldr	r2, [pc, #332]	@ (80013e8 <HAL_DMA_Init+0x158>)
 800129a:	6803      	ldr	r3, [r0, #0]
 800129c:	4293      	cmp	r3, r2
 800129e:	4604      	mov	r4, r0
 80012a0:	d025      	beq.n	80012ee <HAL_DMA_Init+0x5e>
 80012a2:	3214      	adds	r2, #20
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d022      	beq.n	80012ee <HAL_DMA_Init+0x5e>
 80012a8:	3214      	adds	r2, #20
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d01f      	beq.n	80012ee <HAL_DMA_Init+0x5e>
 80012ae:	3214      	adds	r2, #20
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d01c      	beq.n	80012ee <HAL_DMA_Init+0x5e>
 80012b4:	3214      	adds	r2, #20
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d019      	beq.n	80012ee <HAL_DMA_Init+0x5e>
 80012ba:	3214      	adds	r2, #20
 80012bc:	4293      	cmp	r3, r2
 80012be:	d016      	beq.n	80012ee <HAL_DMA_Init+0x5e>
 80012c0:	3214      	adds	r2, #20
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d013      	beq.n	80012ee <HAL_DMA_Init+0x5e>
 80012c6:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00f      	beq.n	80012ee <HAL_DMA_Init+0x5e>
 80012ce:	3214      	adds	r2, #20
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d00c      	beq.n	80012ee <HAL_DMA_Init+0x5e>
 80012d4:	3214      	adds	r2, #20
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d009      	beq.n	80012ee <HAL_DMA_Init+0x5e>
 80012da:	3214      	adds	r2, #20
 80012dc:	4293      	cmp	r3, r2
 80012de:	d006      	beq.n	80012ee <HAL_DMA_Init+0x5e>
 80012e0:	3214      	adds	r2, #20
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d003      	beq.n	80012ee <HAL_DMA_Init+0x5e>
 80012e6:	4841      	ldr	r0, [pc, #260]	@ (80013ec <HAL_DMA_Init+0x15c>)
 80012e8:	2193      	movs	r1, #147	@ 0x93
 80012ea:	f003 f987 	bl	80045fc <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80012ee:	6863      	ldr	r3, [r4, #4]
 80012f0:	f033 0210 	bics.w	r2, r3, #16
 80012f4:	d15c      	bne.n	80013b0 <HAL_DMA_Init+0x120>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80012f6:	68a3      	ldr	r3, [r4, #8]
 80012f8:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
 80012fc:	d003      	beq.n	8001306 <HAL_DMA_Init+0x76>
 80012fe:	483b      	ldr	r0, [pc, #236]	@ (80013ec <HAL_DMA_Init+0x15c>)
 8001300:	2195      	movs	r1, #149	@ 0x95
 8001302:	f003 f97b 	bl	80045fc <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001306:	68e3      	ldr	r3, [r4, #12]
 8001308:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 800130c:	d003      	beq.n	8001316 <HAL_DMA_Init+0x86>
 800130e:	4837      	ldr	r0, [pc, #220]	@ (80013ec <HAL_DMA_Init+0x15c>)
 8001310:	2196      	movs	r1, #150	@ 0x96
 8001312:	f003 f973 	bl	80045fc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001316:	6923      	ldr	r3, [r4, #16]
 8001318:	f433 7280 	bics.w	r2, r3, #256	@ 0x100
 800131c:	d002      	beq.n	8001324 <HAL_DMA_Init+0x94>
 800131e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001322:	d14d      	bne.n	80013c0 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001324:	6963      	ldr	r3, [r4, #20]
 8001326:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
 800132a:	d002      	beq.n	8001332 <HAL_DMA_Init+0xa2>
 800132c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001330:	d14f      	bne.n	80013d2 <HAL_DMA_Init+0x142>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001332:	69a3      	ldr	r3, [r4, #24]
 8001334:	f033 0320 	bics.w	r3, r3, #32
 8001338:	d003      	beq.n	8001342 <HAL_DMA_Init+0xb2>
 800133a:	482c      	ldr	r0, [pc, #176]	@ (80013ec <HAL_DMA_Init+0x15c>)
 800133c:	2199      	movs	r1, #153	@ 0x99
 800133e:	f003 f95d 	bl	80045fc <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001342:	69e0      	ldr	r0, [r4, #28]
 8001344:	f430 5340 	bics.w	r3, r0, #12288	@ 0x3000
 8001348:	d004      	beq.n	8001354 <HAL_DMA_Init+0xc4>
 800134a:	4828      	ldr	r0, [pc, #160]	@ (80013ec <HAL_DMA_Init+0x15c>)
 800134c:	219a      	movs	r1, #154	@ 0x9a
 800134e:	f003 f955 	bl	80045fc <assert_failed>

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8001352:	69e0      	ldr	r0, [r4, #28]
  tmp = hdma->Instance->CCR;
 8001354:	6863      	ldr	r3, [r4, #4]
 8001356:	68a5      	ldr	r5, [r4, #8]
 8001358:	68e1      	ldr	r1, [r4, #12]
 800135a:	6822      	ldr	r2, [r4, #0]
 800135c:	432b      	orrs	r3, r5
 800135e:	430b      	orrs	r3, r1
 8001360:	6921      	ldr	r1, [r4, #16]
 8001362:	430b      	orrs	r3, r1
 8001364:	6961      	ldr	r1, [r4, #20]
 8001366:	430b      	orrs	r3, r1
 8001368:	69a1      	ldr	r1, [r4, #24]
 800136a:	430b      	orrs	r3, r1
 800136c:	6811      	ldr	r1, [r2, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800136e:	f36f 110d 	bfc	r1, #4, #10
 8001372:	430b      	orrs	r3, r1
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001374:	491e      	ldr	r1, [pc, #120]	@ (80013f0 <HAL_DMA_Init+0x160>)
  tmp |=  hdma->Init.Direction        |
 8001376:	4303      	orrs	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001378:	428a      	cmp	r2, r1
  hdma->Instance->CCR = tmp;
 800137a:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800137c:	d90f      	bls.n	800139e <HAL_DMA_Init+0x10e>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800137e:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <HAL_DMA_Init+0x164>)
 8001380:	491d      	ldr	r1, [pc, #116]	@ (80013f8 <HAL_DMA_Init+0x168>)
 8001382:	4413      	add	r3, r2
 8001384:	fba1 1303 	umull	r1, r3, r1, r3
 8001388:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA2;
 800138a:	491c      	ldr	r1, [pc, #112]	@ (80013fc <HAL_DMA_Init+0x16c>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800138c:	009b      	lsls	r3, r3, #2
  hdma->Lock = HAL_UNLOCKED;
 800138e:	f44f 7280 	mov.w	r2, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001392:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 8001394:	8422      	strh	r2, [r4, #32]
 8001396:	e9c4 130f 	strd	r1, r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800139a:	63a0      	str	r0, [r4, #56]	@ 0x38
}
 800139c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800139e:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <HAL_DMA_Init+0x170>)
 80013a0:	4915      	ldr	r1, [pc, #84]	@ (80013f8 <HAL_DMA_Init+0x168>)
 80013a2:	4413      	add	r3, r2
 80013a4:	fba1 1303 	umull	r1, r3, r1, r3
 80013a8:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA1;
 80013aa:	4916      	ldr	r1, [pc, #88]	@ (8001404 <HAL_DMA_Init+0x174>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013ac:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 80013ae:	e7ee      	b.n	800138e <HAL_DMA_Init+0xfe>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80013b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80013b4:	d09f      	beq.n	80012f6 <HAL_DMA_Init+0x66>
 80013b6:	480d      	ldr	r0, [pc, #52]	@ (80013ec <HAL_DMA_Init+0x15c>)
 80013b8:	2194      	movs	r1, #148	@ 0x94
 80013ba:	f003 f91f 	bl	80045fc <assert_failed>
 80013be:	e79a      	b.n	80012f6 <HAL_DMA_Init+0x66>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80013c0:	480a      	ldr	r0, [pc, #40]	@ (80013ec <HAL_DMA_Init+0x15c>)
 80013c2:	2197      	movs	r1, #151	@ 0x97
 80013c4:	f003 f91a 	bl	80045fc <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80013c8:	6963      	ldr	r3, [r4, #20]
 80013ca:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
 80013ce:	d0b0      	beq.n	8001332 <HAL_DMA_Init+0xa2>
 80013d0:	e7ac      	b.n	800132c <HAL_DMA_Init+0x9c>
 80013d2:	4806      	ldr	r0, [pc, #24]	@ (80013ec <HAL_DMA_Init+0x15c>)
 80013d4:	2198      	movs	r1, #152	@ 0x98
 80013d6:	f003 f911 	bl	80045fc <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80013da:	69a3      	ldr	r3, [r4, #24]
 80013dc:	f033 0320 	bics.w	r3, r3, #32
 80013e0:	d0af      	beq.n	8001342 <HAL_DMA_Init+0xb2>
 80013e2:	e7aa      	b.n	800133a <HAL_DMA_Init+0xaa>
    return HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
}
 80013e6:	4770      	bx	lr
 80013e8:	40020008 	.word	0x40020008
 80013ec:	08005408 	.word	0x08005408
 80013f0:	40020407 	.word	0x40020407
 80013f4:	bffdfbf8 	.word	0xbffdfbf8
 80013f8:	cccccccd 	.word	0xcccccccd
 80013fc:	40020400 	.word	0x40020400
 8001400:	bffdfff8 	.word	0xbffdfff8
 8001404:	40020000 	.word	0x40020000

08001408 <HAL_DMA_Start_IT>:
{
 8001408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800140c:	1e5d      	subs	r5, r3, #1
{
 800140e:	461e      	mov	r6, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001410:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8001414:	429d      	cmp	r5, r3
{
 8001416:	4604      	mov	r4, r0
 8001418:	460f      	mov	r7, r1
 800141a:	4690      	mov	r8, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800141c:	d835      	bhi.n	800148a <HAL_DMA_Start_IT+0x82>
  __HAL_LOCK(hdma);
 800141e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d009      	beq.n	800143a <HAL_DMA_Start_IT+0x32>
 8001426:	2301      	movs	r3, #1
 8001428:	f884 3020 	strb.w	r3, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800142c:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8001430:	2b01      	cmp	r3, #1
 8001432:	d005      	beq.n	8001440 <HAL_DMA_Start_IT+0x38>
    __HAL_UNLOCK(hdma);
 8001434:	2300      	movs	r3, #0
 8001436:	f884 3020 	strb.w	r3, [r4, #32]
  __HAL_LOCK(hdma);
 800143a:	2002      	movs	r0, #2
}
 800143c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001440:	2202      	movs	r2, #2
 8001442:	f884 2021 	strb.w	r2, [r4, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001446:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001448:	2200      	movs	r2, #0
 800144a:	63a2      	str	r2, [r4, #56]	@ 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800144c:	682a      	ldr	r2, [r5, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	602a      	str	r2, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001454:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001456:	4093      	lsls	r3, r2
 8001458:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800145a:	6053      	str	r3, [r2, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800145c:	6863      	ldr	r3, [r4, #4]
  hdma->Instance->CNDTR = DataLength;
 800145e:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001460:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8001462:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 8001464:	bf0b      	itete	eq
 8001466:	f8c5 8008 	streq.w	r8, [r5, #8]
    hdma->Instance->CPAR = SrcAddress;
 800146a:	60af      	strne	r7, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 800146c:	60ef      	streq	r7, [r5, #12]
    hdma->Instance->CMAR = DstAddress;
 800146e:	f8c5 800c 	strne.w	r8, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001472:	b183      	cbz	r3, 8001496 <HAL_DMA_Start_IT+0x8e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001474:	682b      	ldr	r3, [r5, #0]
 8001476:	f043 030e 	orr.w	r3, r3, #14
 800147a:	602b      	str	r3, [r5, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 800147c:	682b      	ldr	r3, [r5, #0]
 800147e:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001482:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001484:	602b      	str	r3, [r5, #0]
}
 8001486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800148a:	4807      	ldr	r0, [pc, #28]	@ (80014a8 <HAL_DMA_Start_IT+0xa0>)
 800148c:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8001490:	f003 f8b4 	bl	80045fc <assert_failed>
 8001494:	e7c3      	b.n	800141e <HAL_DMA_Start_IT+0x16>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001496:	682b      	ldr	r3, [r5, #0]
 8001498:	f043 030a 	orr.w	r3, r3, #10
 800149c:	602b      	str	r3, [r5, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800149e:	682b      	ldr	r3, [r5, #0]
 80014a0:	f023 0304 	bic.w	r3, r3, #4
 80014a4:	602b      	str	r3, [r5, #0]
 80014a6:	e7e9      	b.n	800147c <HAL_DMA_Start_IT+0x74>
 80014a8:	08005408 	.word	0x08005408

080014ac <HAL_DMA_Abort>:
  if(NULL == hdma)
 80014ac:	b148      	cbz	r0, 80014c2 <HAL_DMA_Abort+0x16>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ae:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 80014b2:	2a02      	cmp	r2, #2
 80014b4:	4603      	mov	r3, r0
 80014b6:	d006      	beq.n	80014c6 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b8:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 80014ba:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014bc:	6381      	str	r1, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 80014be:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 80014c2:	2001      	movs	r0, #1
}
 80014c4:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014c6:	6802      	ldr	r2, [r0, #0]
 80014c8:	6811      	ldr	r1, [r2, #0]
 80014ca:	f021 010e 	bic.w	r1, r1, #14
{
 80014ce:	b410      	push	{r4}
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80014d0:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80014d2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014d4:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014d6:	6811      	ldr	r1, [r2, #0]
 80014d8:	f021 0101 	bic.w	r1, r1, #1
 80014dc:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80014de:	2201      	movs	r2, #1
 80014e0:	40a2      	lsls	r2, r4
  __HAL_UNLOCK(hdma);
 80014e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80014e6:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdma);
 80014e8:	8419      	strh	r1, [r3, #32]
  return HAL_OK;
 80014ea:	2000      	movs	r0, #0
}
 80014ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop

080014f4 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014f4:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 80014f8:	2a02      	cmp	r2, #2
 80014fa:	d003      	beq.n	8001504 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fc:	2204      	movs	r2, #4
 80014fe:	6382      	str	r2, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8001500:	2001      	movs	r0, #1
}
 8001502:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001504:	6802      	ldr	r2, [r0, #0]
 8001506:	6811      	ldr	r1, [r2, #0]
 8001508:	f021 010e 	bic.w	r1, r1, #14
{
 800150c:	b510      	push	{r4, lr}
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800150e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001510:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001512:	6811      	ldr	r1, [r2, #0]
 8001514:	f021 0101 	bic.w	r1, r1, #1
 8001518:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800151a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800151c:	2201      	movs	r2, #1
 800151e:	408a      	lsls	r2, r1
    if(hdma->XferAbortCallback != NULL)
 8001520:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001522:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001524:	f44f 7c80 	mov.w	ip, #256	@ 0x100
 8001528:	f8a0 c020 	strh.w	ip, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800152c:	b101      	cbz	r1, 8001530 <HAL_DMA_Abort_IT+0x3c>
      hdma->XferAbortCallback(hdma);
 800152e:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8001530:	2000      	movs	r0, #0
}
 8001532:	bd10      	pop	{r4, pc}

08001534 <HAL_DMA_IRQHandler>:
{
 8001534:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001536:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001538:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800153a:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800153c:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800153e:	2304      	movs	r3, #4
 8001540:	4093      	lsls	r3, r2
 8001542:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8001544:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001546:	d00e      	beq.n	8001566 <HAL_DMA_IRQHandler+0x32>
 8001548:	f015 0f04 	tst.w	r5, #4
 800154c:	d00b      	beq.n	8001566 <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800154e:	6822      	ldr	r2, [r4, #0]
 8001550:	0692      	lsls	r2, r2, #26
 8001552:	d403      	bmi.n	800155c <HAL_DMA_IRQHandler+0x28>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001554:	6822      	ldr	r2, [r4, #0]
 8001556:	f022 0204 	bic.w	r2, r2, #4
 800155a:	6022      	str	r2, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800155c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800155e:	6073      	str	r3, [r6, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001560:	b1ca      	cbz	r2, 8001596 <HAL_DMA_IRQHandler+0x62>
}
 8001562:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8001564:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001566:	2302      	movs	r3, #2
 8001568:	4093      	lsls	r3, r2
 800156a:	420b      	tst	r3, r1
 800156c:	d015      	beq.n	800159a <HAL_DMA_IRQHandler+0x66>
 800156e:	f015 0f02 	tst.w	r5, #2
 8001572:	d012      	beq.n	800159a <HAL_DMA_IRQHandler+0x66>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001574:	6822      	ldr	r2, [r4, #0]
 8001576:	0692      	lsls	r2, r2, #26
 8001578:	d406      	bmi.n	8001588 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800157a:	6822      	ldr	r2, [r4, #0]
 800157c:	f022 020a 	bic.w	r2, r2, #10
 8001580:	6022      	str	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001582:	2201      	movs	r2, #1
 8001584:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
    if(hdma->XferCpltCallback != NULL)
 8001588:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800158a:	6073      	str	r3, [r6, #4]
    __HAL_UNLOCK(hdma);
 800158c:	2100      	movs	r1, #0
 800158e:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001592:	2a00      	cmp	r2, #0
 8001594:	d1e5      	bne.n	8001562 <HAL_DMA_IRQHandler+0x2e>
}
 8001596:	bc70      	pop	{r4, r5, r6}
 8001598:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800159a:	2308      	movs	r3, #8
 800159c:	4093      	lsls	r3, r2
 800159e:	420b      	tst	r3, r1
 80015a0:	d0f9      	beq.n	8001596 <HAL_DMA_IRQHandler+0x62>
 80015a2:	072b      	lsls	r3, r5, #28
 80015a4:	d5f7      	bpl.n	8001596 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015a6:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 80015a8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015aa:	f023 030e 	bic.w	r3, r3, #14
 80015ae:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015b0:	2301      	movs	r3, #1
 80015b2:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma);
 80015b6:	f44f 7480 	mov.w	r4, #256	@ 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015ba:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 80015bc:	8404      	strh	r4, [r0, #32]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015be:	6383      	str	r3, [r0, #56]	@ 0x38
    if(hdma->XferErrorCallback != NULL)
 80015c0:	2900      	cmp	r1, #0
 80015c2:	d0e8      	beq.n	8001596 <HAL_DMA_IRQHandler+0x62>
}
 80015c4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80015c6:	4708      	bx	r1

080015c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80015cc:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
{
 80015d0:	b085      	sub	sp, #20
 80015d2:	4606      	mov	r6, r0
 80015d4:	4688      	mov	r8, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80015d6:	d01e      	beq.n	8001616 <HAL_GPIO_Init+0x4e>
 80015d8:	4bb8      	ldr	r3, [pc, #736]	@ (80018bc <HAL_GPIO_Init+0x2f4>)
 80015da:	4298      	cmp	r0, r3
 80015dc:	d01b      	beq.n	8001616 <HAL_GPIO_Init+0x4e>
 80015de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015e2:	4298      	cmp	r0, r3
 80015e4:	d017      	beq.n	8001616 <HAL_GPIO_Init+0x4e>
 80015e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015ea:	4298      	cmp	r0, r3
 80015ec:	d013      	beq.n	8001616 <HAL_GPIO_Init+0x4e>
 80015ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015f2:	4298      	cmp	r0, r3
 80015f4:	d00f      	beq.n	8001616 <HAL_GPIO_Init+0x4e>
 80015f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015fa:	4298      	cmp	r0, r3
 80015fc:	d00b      	beq.n	8001616 <HAL_GPIO_Init+0x4e>
 80015fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001602:	4298      	cmp	r0, r3
 8001604:	d007      	beq.n	8001616 <HAL_GPIO_Init+0x4e>
 8001606:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800160a:	4298      	cmp	r0, r3
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x4e>
 800160e:	48ac      	ldr	r0, [pc, #688]	@ (80018c0 <HAL_GPIO_Init+0x2f8>)
 8001610:	21b2      	movs	r1, #178	@ 0xb2
 8001612:	f002 fff3 	bl	80045fc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001616:	f8d8 1000 	ldr.w	r1, [r8]
 800161a:	b28b      	uxth	r3, r1
 800161c:	b11b      	cbz	r3, 8001626 <HAL_GPIO_Init+0x5e>
 800161e:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8001622:	f0c0 8129 	bcc.w	8001878 <HAL_GPIO_Init+0x2b0>
 8001626:	48a6      	ldr	r0, [pc, #664]	@ (80018c0 <HAL_GPIO_Init+0x2f8>)
 8001628:	21b3      	movs	r1, #179	@ 0xb3
 800162a:	f002 ffe7 	bl	80045fc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800162e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001632:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001636:	d00e      	beq.n	8001656 <HAL_GPIO_Init+0x8e>
 8001638:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800163c:	f200 8126 	bhi.w	800188c <HAL_GPIO_Init+0x2c4>
 8001640:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001644:	d007      	beq.n	8001656 <HAL_GPIO_Init+0x8e>
 8001646:	f200 815a 	bhi.w	80018fe <HAL_GPIO_Init+0x336>
 800164a:	2b03      	cmp	r3, #3
 800164c:	d903      	bls.n	8001656 <HAL_GPIO_Init+0x8e>
 800164e:	3b11      	subs	r3, #17
 8001650:	2b01      	cmp	r3, #1
 8001652:	f200 8125 	bhi.w	80018a0 <HAL_GPIO_Init+0x2d8>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001656:	f8d8 1000 	ldr.w	r1, [r8]
 800165a:	2900      	cmp	r1, #0
 800165c:	f000 80da 	beq.w	8001814 <HAL_GPIO_Init+0x24c>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001660:	f8df b274 	ldr.w	fp, [pc, #628]	@ 80018d8 <HAL_GPIO_Init+0x310>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001664:	f8df 9274 	ldr.w	r9, [pc, #628]	@ 80018dc <HAL_GPIO_Init+0x314>
{
 8001668:	2400      	movs	r4, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800166a:	2501      	movs	r5, #1
 800166c:	40a5      	lsls	r5, r4
    if (iocurrent != 0x00u)
 800166e:	ea15 0301 	ands.w	r3, r5, r1
 8001672:	f000 80ca 	beq.w	800180a <HAL_GPIO_Init+0x242>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001676:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800167a:	f000 0103 	and.w	r1, r0, #3
 800167e:	ea4f 0a44 	mov.w	sl, r4, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001682:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001684:	f101 3cff 	add.w	ip, r1, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001688:	fa07 f70a 	lsl.w	r7, r7, sl
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800168c:	f1bc 0f01 	cmp.w	ip, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001690:	ea6f 0707 	mvn.w	r7, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001694:	f240 80c1 	bls.w	800181a <HAL_GPIO_Init+0x252>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001698:	2903      	cmp	r1, #3
 800169a:	d04e      	beq.n	800173a <HAL_GPIO_Init+0x172>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800169c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80016a0:	2d02      	cmp	r5, #2
 80016a2:	f200 80de 	bhi.w	8001862 <HAL_GPIO_Init+0x29a>
        temp = GPIOx->PUPDR;
 80016a6:	68f2      	ldr	r2, [r6, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016a8:	fa05 f50a 	lsl.w	r5, r5, sl
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016ac:	ea02 0c07 	and.w	ip, r2, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016b0:	ea45 050c 	orr.w	r5, r5, ip
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b4:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 80016b6:	60f5      	str	r5, [r6, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b8:	d13f      	bne.n	800173a <HAL_GPIO_Init+0x172>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80016ba:	f1b6 4f90 	cmp.w	r6, #1207959552	@ 0x48000000
 80016be:	d01f      	beq.n	8001700 <HAL_GPIO_Init+0x138>
 80016c0:	4a7e      	ldr	r2, [pc, #504]	@ (80018bc <HAL_GPIO_Init+0x2f4>)
 80016c2:	4296      	cmp	r6, r2
 80016c4:	d01c      	beq.n	8001700 <HAL_GPIO_Init+0x138>
 80016c6:	497f      	ldr	r1, [pc, #508]	@ (80018c4 <HAL_GPIO_Init+0x2fc>)
 80016c8:	428e      	cmp	r6, r1
 80016ca:	d019      	beq.n	8001700 <HAL_GPIO_Init+0x138>
 80016cc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80016d0:	428e      	cmp	r6, r1
 80016d2:	d015      	beq.n	8001700 <HAL_GPIO_Init+0x138>
 80016d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80016d8:	428e      	cmp	r6, r1
 80016da:	d011      	beq.n	8001700 <HAL_GPIO_Init+0x138>
 80016dc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80016e0:	428e      	cmp	r6, r1
 80016e2:	d00d      	beq.n	8001700 <HAL_GPIO_Init+0x138>
 80016e4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80016e8:	428e      	cmp	r6, r1
 80016ea:	d009      	beq.n	8001700 <HAL_GPIO_Init+0x138>
 80016ec:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80016f0:	428e      	cmp	r6, r1
 80016f2:	d005      	beq.n	8001700 <HAL_GPIO_Init+0x138>
 80016f4:	4872      	ldr	r0, [pc, #456]	@ (80018c0 <HAL_GPIO_Init+0x2f8>)
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	21e2      	movs	r1, #226	@ 0xe2
 80016fa:	f002 ff7f 	bl	80045fc <assert_failed>
 80016fe:	9b01      	ldr	r3, [sp, #4]
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001700:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8001704:	280c      	cmp	r0, #12
 8001706:	d904      	bls.n	8001712 <HAL_GPIO_Init+0x14a>
 8001708:	f1a0 010e 	sub.w	r1, r0, #14
 800170c:	2901      	cmp	r1, #1
 800170e:	f200 80cc 	bhi.w	80018aa <HAL_GPIO_Init+0x2e2>
        temp = GPIOx->AFR[position >> 3u];
 8001712:	08e5      	lsrs	r5, r4, #3
 8001714:	eb06 0585 	add.w	r5, r6, r5, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001718:	f004 0107 	and.w	r1, r4, #7
        temp = GPIOx->AFR[position >> 3u];
 800171c:	6a2a      	ldr	r2, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800171e:	0089      	lsls	r1, r1, #2
 8001720:	f04f 0e0f 	mov.w	lr, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001724:	4088      	lsls	r0, r1
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001726:	fa0e f101 	lsl.w	r1, lr, r1
 800172a:	ea22 0101 	bic.w	r1, r2, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800172e:	4301      	orrs	r1, r0
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001730:	f8d8 0004 	ldr.w	r0, [r8, #4]
        GPIOx->AFR[position >> 3u] = temp;
 8001734:	6229      	str	r1, [r5, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001736:	f000 0103 	and.w	r1, r0, #3
      temp = GPIOx->MODER;
 800173a:	6835      	ldr	r5, [r6, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800173c:	fa01 f10a 	lsl.w	r1, r1, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001740:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001742:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001744:	f410 3f40 	tst.w	r0, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001748:	6031      	str	r1, [r6, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800174a:	d05c      	beq.n	8001806 <HAL_GPIO_Init+0x23e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174c:	f8db 5018 	ldr.w	r5, [fp, #24]
 8001750:	f045 0501 	orr.w	r5, r5, #1
 8001754:	f8cb 5018 	str.w	r5, [fp, #24]
 8001758:	f8db 5018 	ldr.w	r5, [fp, #24]
 800175c:	f024 0103 	bic.w	r1, r4, #3
 8001760:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8001764:	f005 0501 	and.w	r5, r5, #1
 8001768:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800176c:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800176e:	f004 0c03 	and.w	ip, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001774:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001776:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800177a:	270f      	movs	r7, #15
 800177c:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001780:	f1b6 4f90 	cmp.w	r6, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001784:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001788:	d01b      	beq.n	80017c2 <HAL_GPIO_Init+0x1fa>
 800178a:	4a4c      	ldr	r2, [pc, #304]	@ (80018bc <HAL_GPIO_Init+0x2f4>)
 800178c:	4296      	cmp	r6, r2
 800178e:	f000 80ac 	beq.w	80018ea <HAL_GPIO_Init+0x322>
 8001792:	4f4c      	ldr	r7, [pc, #304]	@ (80018c4 <HAL_GPIO_Init+0x2fc>)
 8001794:	42be      	cmp	r6, r7
 8001796:	f000 80ad 	beq.w	80018f4 <HAL_GPIO_Init+0x32c>
 800179a:	4f4b      	ldr	r7, [pc, #300]	@ (80018c8 <HAL_GPIO_Init+0x300>)
 800179c:	42be      	cmp	r6, r7
 800179e:	f000 809f 	beq.w	80018e0 <HAL_GPIO_Init+0x318>
 80017a2:	4f4a      	ldr	r7, [pc, #296]	@ (80018cc <HAL_GPIO_Init+0x304>)
 80017a4:	42be      	cmp	r6, r7
 80017a6:	f000 80af 	beq.w	8001908 <HAL_GPIO_Init+0x340>
 80017aa:	4f49      	ldr	r7, [pc, #292]	@ (80018d0 <HAL_GPIO_Init+0x308>)
 80017ac:	42be      	cmp	r6, r7
 80017ae:	f000 80b0 	beq.w	8001912 <HAL_GPIO_Init+0x34a>
 80017b2:	4f48      	ldr	r7, [pc, #288]	@ (80018d4 <HAL_GPIO_Init+0x30c>)
 80017b4:	42be      	cmp	r6, r7
 80017b6:	bf0c      	ite	eq
 80017b8:	2706      	moveq	r7, #6
 80017ba:	2707      	movne	r7, #7
 80017bc:	fa07 f70c 	lsl.w	r7, r7, ip
 80017c0:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017c2:	608d      	str	r5, [r1, #8]
        temp = EXTI->RTSR;
 80017c4:	f8d9 1008 	ldr.w	r1, [r9, #8]
        temp &= ~(iocurrent);
 80017c8:	43dd      	mvns	r5, r3
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ca:	02c7      	lsls	r7, r0, #11
        temp &= ~(iocurrent);
 80017cc:	bf54      	ite	pl
 80017ce:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 80017d0:	4319      	orrmi	r1, r3
        }
        EXTI->RTSR = temp;
 80017d2:	f8c9 1008 	str.w	r1, [r9, #8]

        temp = EXTI->FTSR;
 80017d6:	f8d9 100c 	ldr.w	r1, [r9, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017da:	0282      	lsls	r2, r0, #10
        temp &= ~(iocurrent);
 80017dc:	bf54      	ite	pl
 80017de:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 80017e0:	4319      	orrmi	r1, r3
        }
        EXTI->FTSR = temp;
 80017e2:	f8c9 100c 	str.w	r1, [r9, #12]

        temp = EXTI->EMR;
 80017e6:	f8d9 1004 	ldr.w	r1, [r9, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017ea:	0387      	lsls	r7, r0, #14
        temp &= ~(iocurrent);
 80017ec:	bf54      	ite	pl
 80017ee:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 80017f0:	4319      	orrmi	r1, r3
        }
        EXTI->EMR = temp;
 80017f2:	f8c9 1004 	str.w	r1, [r9, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f6:	f8d9 1000 	ldr.w	r1, [r9]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017fa:	03c2      	lsls	r2, r0, #15
        temp &= ~(iocurrent);
 80017fc:	bf54      	ite	pl
 80017fe:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 8001800:	4319      	orrmi	r1, r3
        }
        EXTI->IMR = temp;
 8001802:	f8c9 1000 	str.w	r1, [r9]
 8001806:	f8d8 1000 	ldr.w	r1, [r8]
      }
    }

    position++;
 800180a:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180c:	fa31 f304 	lsrs.w	r3, r1, r4
 8001810:	f47f af2b 	bne.w	800166a <HAL_GPIO_Init+0xa2>
  }
}
 8001814:	b005      	add	sp, #20
 8001816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800181a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800181e:	2a01      	cmp	r2, #1
 8001820:	d90d      	bls.n	800183e <HAL_GPIO_Init+0x276>
 8001822:	2a03      	cmp	r2, #3
 8001824:	d00b      	beq.n	800183e <HAL_GPIO_Init+0x276>
 8001826:	4826      	ldr	r0, [pc, #152]	@ (80018c0 <HAL_GPIO_Init+0x2f8>)
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	21c3      	movs	r1, #195	@ 0xc3
 800182c:	f002 fee6 	bl	80045fc <assert_failed>
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001830:	f8d8 0004 	ldr.w	r0, [r8, #4]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001834:	f8d8 200c 	ldr.w	r2, [r8, #12]
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001838:	9b01      	ldr	r3, [sp, #4]
 800183a:	f000 0103 	and.w	r1, r0, #3
        temp |= (GPIO_Init->Speed << (position * 2u));
 800183e:	fa02 fc0a 	lsl.w	ip, r2, sl
        temp = GPIOx->OSPEEDR;
 8001842:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001844:	ea02 0e07 	and.w	lr, r2, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001848:	ea4c 020e 	orr.w	r2, ip, lr
        GPIOx->OSPEEDR = temp;
 800184c:	60b2      	str	r2, [r6, #8]
        temp = GPIOx->OTYPER;
 800184e:	6872      	ldr	r2, [r6, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001850:	ea22 0c05 	bic.w	ip, r2, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001854:	f3c0 1500 	ubfx	r5, r0, #4, #1
 8001858:	40a5      	lsls	r5, r4
 800185a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->OTYPER = temp;
 800185e:	6075      	str	r5, [r6, #4]
 8001860:	e71a      	b.n	8001698 <HAL_GPIO_Init+0xd0>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001862:	4817      	ldr	r0, [pc, #92]	@ (80018c0 <HAL_GPIO_Init+0x2f8>)
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	21d4      	movs	r1, #212	@ 0xd4
 8001868:	f002 fec8 	bl	80045fc <assert_failed>
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800186c:	e9d8 0501 	ldrd	r0, r5, [r8, #4]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001870:	9b01      	ldr	r3, [sp, #4]
 8001872:	f000 0103 	and.w	r1, r0, #3
 8001876:	e716      	b.n	80016a6 <HAL_GPIO_Init+0xde>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001878:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800187c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001880:	f43f aeee 	beq.w	8001660 <HAL_GPIO_Init+0x98>
 8001884:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001888:	f67f aeda 	bls.w	8001640 <HAL_GPIO_Init+0x78>
 800188c:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8001890:	f43f aee1 	beq.w	8001656 <HAL_GPIO_Init+0x8e>
 8001894:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001898:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 800189c:	f43f aedb 	beq.w	8001656 <HAL_GPIO_Init+0x8e>
 80018a0:	4807      	ldr	r0, [pc, #28]	@ (80018c0 <HAL_GPIO_Init+0x2f8>)
 80018a2:	21b4      	movs	r1, #180	@ 0xb4
 80018a4:	f002 feaa 	bl	80045fc <assert_failed>
 80018a8:	e6d5      	b.n	8001656 <HAL_GPIO_Init+0x8e>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80018aa:	4805      	ldr	r0, [pc, #20]	@ (80018c0 <HAL_GPIO_Init+0x2f8>)
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	21e3      	movs	r1, #227	@ 0xe3
 80018b0:	f002 fea4 	bl	80045fc <assert_failed>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018b4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80018b8:	9b01      	ldr	r3, [sp, #4]
 80018ba:	e72a      	b.n	8001712 <HAL_GPIO_Init+0x14a>
 80018bc:	48000400 	.word	0x48000400
 80018c0:	08005440 	.word	0x08005440
 80018c4:	48000800 	.word	0x48000800
 80018c8:	48000c00 	.word	0x48000c00
 80018cc:	48001000 	.word	0x48001000
 80018d0:	48001400 	.word	0x48001400
 80018d4:	48001800 	.word	0x48001800
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010400 	.word	0x40010400
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e0:	2703      	movs	r7, #3
 80018e2:	fa07 f70c 	lsl.w	r7, r7, ip
 80018e6:	433d      	orrs	r5, r7
 80018e8:	e76b      	b.n	80017c2 <HAL_GPIO_Init+0x1fa>
 80018ea:	2701      	movs	r7, #1
 80018ec:	fa07 f70c 	lsl.w	r7, r7, ip
 80018f0:	433d      	orrs	r5, r7
 80018f2:	e766      	b.n	80017c2 <HAL_GPIO_Init+0x1fa>
 80018f4:	2702      	movs	r7, #2
 80018f6:	fa07 f70c 	lsl.w	r7, r7, ip
 80018fa:	433d      	orrs	r5, r7
 80018fc:	e761      	b.n	80017c2 <HAL_GPIO_Init+0x1fa>
 80018fe:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8001902:	f43f aea8 	beq.w	8001656 <HAL_GPIO_Init+0x8e>
 8001906:	e7cb      	b.n	80018a0 <HAL_GPIO_Init+0x2d8>
 8001908:	2704      	movs	r7, #4
 800190a:	fa07 f70c 	lsl.w	r7, r7, ip
 800190e:	433d      	orrs	r5, r7
 8001910:	e757      	b.n	80017c2 <HAL_GPIO_Init+0x1fa>
 8001912:	2705      	movs	r7, #5
 8001914:	fa07 f70c 	lsl.w	r7, r7, ip
 8001918:	433d      	orrs	r5, r7
 800191a:	e752      	b.n	80017c2 <HAL_GPIO_Init+0x1fa>

0800191c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800191c:	b570      	push	{r4, r5, r6, lr}
 800191e:	4606      	mov	r6, r0
 8001920:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001922:	460c      	mov	r4, r1
 8001924:	b159      	cbz	r1, 800193e <HAL_GPIO_WritePin+0x22>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001926:	2d01      	cmp	r5, #1
 8001928:	d802      	bhi.n	8001930 <HAL_GPIO_WritePin+0x14>

  if(PinState != GPIO_PIN_RESET)
 800192a:	b935      	cbnz	r5, 800193a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800192c:	62b4      	str	r4, [r6, #40]	@ 0x28
  }
}
 800192e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001930:	4806      	ldr	r0, [pc, #24]	@ (800194c <HAL_GPIO_WritePin+0x30>)
 8001932:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001936:	f002 fe61 	bl	80045fc <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800193a:	61b4      	str	r4, [r6, #24]
}
 800193c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800193e:	4803      	ldr	r0, [pc, #12]	@ (800194c <HAL_GPIO_WritePin+0x30>)
 8001940:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8001944:	f002 fe5a 	bl	80045fc <assert_failed>
 8001948:	e7ed      	b.n	8001926 <HAL_GPIO_WritePin+0xa>
 800194a:	bf00      	nop
 800194c:	08005440 	.word	0x08005440

08001950 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8001950:	2800      	cmp	r0, #0
 8001952:	f000 80cd 	beq.w	8001af0 <HAL_OPAMP_Init+0x1a0>
{
 8001956:	b510      	push	{r4, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8001958:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 800195c:	2b05      	cmp	r3, #5
{
 800195e:	b082      	sub	sp, #8
 8001960:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8001962:	f000 809a 	beq.w	8001a9a <HAL_OPAMP_Init+0x14a>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8001966:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 800196a:	2b02      	cmp	r3, #2
 800196c:	f000 8095 	beq.w	8001a9a <HAL_OPAMP_Init+0x14a>
  }
  else
  {

    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));
 8001970:	6803      	ldr	r3, [r0, #0]
 8001972:	4a72      	ldr	r2, [pc, #456]	@ (8001b3c <HAL_OPAMP_Init+0x1ec>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00d      	beq.n	8001994 <HAL_OPAMP_Init+0x44>
 8001978:	3204      	adds	r2, #4
 800197a:	4293      	cmp	r3, r2
 800197c:	d00a      	beq.n	8001994 <HAL_OPAMP_Init+0x44>
 800197e:	3204      	adds	r2, #4
 8001980:	4293      	cmp	r3, r2
 8001982:	d007      	beq.n	8001994 <HAL_OPAMP_Init+0x44>
 8001984:	3204      	adds	r2, #4
 8001986:	4293      	cmp	r3, r2
 8001988:	d004      	beq.n	8001994 <HAL_OPAMP_Init+0x44>
 800198a:	486d      	ldr	r0, [pc, #436]	@ (8001b40 <HAL_OPAMP_Init+0x1f0>)
 800198c:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001990:	f002 fe34 	bl	80045fc <assert_failed>

    /* Set OPAMP parameters */
    assert_param(IS_OPAMP_FUNCTIONAL_NORMALMODE(hopamp->Init.Mode));
 8001994:	6863      	ldr	r3, [r4, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8082 	beq.w	8001aa0 <HAL_OPAMP_Init+0x150>
 800199c:	f023 0320 	bic.w	r3, r3, #32
 80019a0:	2b40      	cmp	r3, #64	@ 0x40
 80019a2:	f000 80a0 	beq.w	8001ae6 <HAL_OPAMP_Init+0x196>
 80019a6:	4866      	ldr	r0, [pc, #408]	@ (8001b40 <HAL_OPAMP_Init+0x1f0>)
 80019a8:	f240 110d 	movw	r1, #269	@ 0x10d
 80019ac:	f002 fe26 	bl	80045fc <assert_failed>
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));
 80019b0:	68e3      	ldr	r3, [r4, #12]
 80019b2:	2b0c      	cmp	r3, #12
 80019b4:	d009      	beq.n	80019ca <HAL_OPAMP_Init+0x7a>
 80019b6:	f033 0204 	bics.w	r2, r3, #4
 80019ba:	d006      	beq.n	80019ca <HAL_OPAMP_Init+0x7a>
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d004      	beq.n	80019ca <HAL_OPAMP_Init+0x7a>
 80019c0:	485f      	ldr	r0, [pc, #380]	@ (8001b40 <HAL_OPAMP_Init+0x1f0>)
 80019c2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80019c6:	f002 fe19 	bl	80045fc <assert_failed>
        hopamp->MspInitCallback = HAL_OPAMP_MspInit;
      }
    }
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    if ((hopamp->Init.Mode) == OPAMP_STANDALONE_MODE)
 80019ca:	6863      	ldr	r3, [r4, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d06a      	beq.n	8001aa6 <HAL_OPAMP_Init+0x156>
    {
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));
 80019d0:	6923      	ldr	r3, [r4, #16]
 80019d2:	b1ab      	cbz	r3, 8001a00 <HAL_OPAMP_Init+0xb0>
 80019d4:	2b80      	cmp	r3, #128	@ 0x80
 80019d6:	d173      	bne.n	8001ac0 <HAL_OPAMP_Init+0x170>

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
    {
      assert_param(IS_OPAMP_SEC_NONINVERTINGINPUT(hopamp->Init.NonInvertingInputSecondary));
 80019d8:	69a3      	ldr	r3, [r4, #24]
 80019da:	f433 63c0 	bics.w	r3, r3, #1536	@ 0x600
 80019de:	d004      	beq.n	80019ea <HAL_OPAMP_Init+0x9a>
 80019e0:	4857      	ldr	r0, [pc, #348]	@ (8001b40 <HAL_OPAMP_Init+0x1f0>)
 80019e2:	f240 1123 	movw	r1, #291	@ 0x123
 80019e6:	f002 fe09 	bl	80045fc <assert_failed>
      if ((hopamp->Init.Mode) == OPAMP_STANDALONE_MODE)
 80019ea:	6863      	ldr	r3, [r4, #4]
 80019ec:	b94b      	cbnz	r3, 8001a02 <HAL_OPAMP_Init+0xb2>
      {
        assert_param(IS_OPAMP_SEC_INVERTINGINPUT(hopamp->Init.InvertingInputSecondary));
 80019ee:	6963      	ldr	r3, [r4, #20]
 80019f0:	f433 7380 	bics.w	r3, r3, #256	@ 0x100
 80019f4:	d007      	beq.n	8001a06 <HAL_OPAMP_Init+0xb6>
 80019f6:	4852      	ldr	r0, [pc, #328]	@ (8001b40 <HAL_OPAMP_Init+0x1f0>)
 80019f8:	f44f 7193 	mov.w	r1, #294	@ 0x126
 80019fc:	f002 fdfe 	bl	80045fc <assert_failed>
      }
    }

    if ((hopamp->Init.Mode) == OPAMP_PGA_MODE)
 8001a00:	6863      	ldr	r3, [r4, #4]
 8001a02:	2b40      	cmp	r3, #64	@ 0x40
 8001a04:	d076      	beq.n	8001af4 <HAL_OPAMP_Init+0x1a4>
    {
      assert_param(IS_OPAMP_PGACONNECT(hopamp->Init.PgaConnect));
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
 8001a06:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001a08:	b14b      	cbz	r3, 8001a1e <HAL_OPAMP_Init+0xce>
 8001a0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001a0e:	d160      	bne.n	8001ad2 <HAL_OPAMP_Init+0x182>
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
    {
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
 8001a10:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a12:	2b1f      	cmp	r3, #31
 8001a14:	f200 808c 	bhi.w	8001b30 <HAL_OPAMP_Init+0x1e0>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
 8001a18:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001a1a:	2b1f      	cmp	r3, #31
 8001a1c:	d87c      	bhi.n	8001b18 <HAL_OPAMP_Init+0x1c8>
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	4b49      	ldr	r3, [pc, #292]	@ (8001b44 <HAL_OPAMP_Init+0x1f4>)
 8001a20:	699a      	ldr	r2, [r3, #24]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	619a      	str	r2, [r3, #24]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8001a32:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 8001a36:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001a3a:	b90b      	cbnz	r3, 8001a40 <HAL_OPAMP_Init+0xf0>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8001a3c:	f884 2031 	strb.w	r2, [r4, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8001a40:	4620      	mov	r0, r4
 8001a42:	f002 fedd 	bl	8004800 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8001a46:	6863      	ldr	r3, [r4, #4]
 8001a48:	f023 0220 	bic.w	r2, r3, #32
 8001a4c:	2a40      	cmp	r2, #64	@ 0x40
 8001a4e:	d034      	beq.n	8001aba <HAL_OPAMP_Init+0x16a>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8001a50:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001a54:	430b      	orrs	r3, r1
 8001a56:	4313      	orrs	r3, r2
 8001a58:	6920      	ldr	r0, [r4, #16]
 8001a5a:	6962      	ldr	r2, [r4, #20]
 8001a5c:	69a1      	ldr	r1, [r4, #24]
 8001a5e:	4303      	orrs	r3, r0
 8001a60:	4313      	orrs	r3, r2
 8001a62:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8001a66:	430b      	orrs	r3, r1
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001a6c:	6821      	ldr	r1, [r4, #0]
 8001a6e:	4303      	orrs	r3, r0
 8001a70:	4313      	orrs	r3, r2
 8001a72:	e9d4 020a 	ldrd	r0, r2, [r4, #40]	@ 0x28
 8001a76:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8001a7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a7e:	6808      	ldr	r0, [r1, #0]
 8001a80:	4a31      	ldr	r2, [pc, #196]	@ (8001b48 <HAL_OPAMP_Init+0x1f8>)
 8001a82:	4002      	ands	r2, r0
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8001a88:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 8001a8c:	b913      	cbnz	r3, 8001a94 <HAL_OPAMP_Init+0x144>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8001a94:	2000      	movs	r0, #0
  }
}
 8001a96:	b002      	add	sp, #8
 8001a98:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a9a:	2001      	movs	r0, #1
}
 8001a9c:	b002      	add	sp, #8
 8001a9e:	bd10      	pop	{r4, pc}
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));
 8001aa0:	68e3      	ldr	r3, [r4, #12]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d187      	bne.n	80019b6 <HAL_OPAMP_Init+0x66>
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
 8001aa6:	68a3      	ldr	r3, [r4, #8]
 8001aa8:	f033 0320 	bics.w	r3, r3, #32
 8001aac:	d090      	beq.n	80019d0 <HAL_OPAMP_Init+0x80>
 8001aae:	4824      	ldr	r0, [pc, #144]	@ (8001b40 <HAL_OPAMP_Init+0x1f0>)
 8001ab0:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8001ab4:	f002 fda2 	bl	80045fc <assert_failed>
 8001ab8:	e78a      	b.n	80019d0 <HAL_OPAMP_Init+0x80>
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8001aba:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8001abe:	e7cd      	b.n	8001a5c <HAL_OPAMP_Init+0x10c>
    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));
 8001ac0:	481f      	ldr	r0, [pc, #124]	@ (8001b40 <HAL_OPAMP_Init+0x1f0>)
 8001ac2:	f240 111f 	movw	r1, #287	@ 0x11f
 8001ac6:	f002 fd99 	bl	80045fc <assert_failed>
    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 8001aca:	6923      	ldr	r3, [r4, #16]
 8001acc:	2b80      	cmp	r3, #128	@ 0x80
 8001ace:	d197      	bne.n	8001a00 <HAL_OPAMP_Init+0xb0>
 8001ad0:	e782      	b.n	80019d8 <HAL_OPAMP_Init+0x88>
    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
 8001ad2:	481b      	ldr	r0, [pc, #108]	@ (8001b40 <HAL_OPAMP_Init+0x1f0>)
 8001ad4:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8001ad8:	f002 fd90 	bl	80045fc <assert_failed>
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8001adc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ade:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001ae2:	d19c      	bne.n	8001a1e <HAL_OPAMP_Init+0xce>
 8001ae4:	e794      	b.n	8001a10 <HAL_OPAMP_Init+0xc0>
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));
 8001ae6:	68e3      	ldr	r3, [r4, #12]
 8001ae8:	2b0c      	cmp	r3, #12
 8001aea:	f47f af64 	bne.w	80019b6 <HAL_OPAMP_Init+0x66>
 8001aee:	e76f      	b.n	80019d0 <HAL_OPAMP_Init+0x80>
    return HAL_ERROR;
 8001af0:	2001      	movs	r0, #1
}
 8001af2:	4770      	bx	lr
      assert_param(IS_OPAMP_PGACONNECT(hopamp->Init.PgaConnect));
 8001af4:	69e3      	ldr	r3, [r4, #28]
 8001af6:	f433 3200 	bics.w	r2, r3, #131072	@ 0x20000
 8001afa:	d002      	beq.n	8001b02 <HAL_OPAMP_Init+0x1b2>
 8001afc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001b00:	d110      	bne.n	8001b24 <HAL_OPAMP_Init+0x1d4>
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
 8001b02:	6a23      	ldr	r3, [r4, #32]
 8001b04:	f433 4340 	bics.w	r3, r3, #49152	@ 0xc000
 8001b08:	f43f af7d 	beq.w	8001a06 <HAL_OPAMP_Init+0xb6>
 8001b0c:	480c      	ldr	r0, [pc, #48]	@ (8001b40 <HAL_OPAMP_Init+0x1f0>)
 8001b0e:	f240 112d 	movw	r1, #301	@ 0x12d
 8001b12:	f002 fd73 	bl	80045fc <assert_failed>
 8001b16:	e776      	b.n	8001a06 <HAL_OPAMP_Init+0xb6>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
 8001b18:	4809      	ldr	r0, [pc, #36]	@ (8001b40 <HAL_OPAMP_Init+0x1f0>)
 8001b1a:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8001b1e:	f002 fd6d 	bl	80045fc <assert_failed>
 8001b22:	e77c      	b.n	8001a1e <HAL_OPAMP_Init+0xce>
      assert_param(IS_OPAMP_PGACONNECT(hopamp->Init.PgaConnect));
 8001b24:	4806      	ldr	r0, [pc, #24]	@ (8001b40 <HAL_OPAMP_Init+0x1f0>)
 8001b26:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001b2a:	f002 fd67 	bl	80045fc <assert_failed>
 8001b2e:	e7e8      	b.n	8001b02 <HAL_OPAMP_Init+0x1b2>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
 8001b30:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <HAL_OPAMP_Init+0x1f0>)
 8001b32:	f240 1133 	movw	r1, #307	@ 0x133
 8001b36:	f002 fd61 	bl	80045fc <assert_failed>
 8001b3a:	e76d      	b.n	8001a18 <HAL_OPAMP_Init+0xc8>
 8001b3c:	40010038 	.word	0x40010038
 8001b40:	0800547c 	.word	0x0800547c
 8001b44:	40021000 	.word	0x40021000
 8001b48:	e0003811 	.word	0xe0003811

08001b4c <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	f000 834c 	beq.w	80021ea <HAL_RCC_OscConfig+0x69e>
{
 8001b52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001b56:	6803      	ldr	r3, [r0, #0]
{
 8001b58:	b083      	sub	sp, #12
 8001b5a:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 811d 	beq.w	8001d9c <HAL_RCC_OscConfig+0x250>
 8001b62:	071a      	lsls	r2, r3, #28
 8001b64:	f000 8265 	beq.w	8002032 <HAL_RCC_OscConfig+0x4e6>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b68:	07df      	lsls	r7, r3, #31
 8001b6a:	d543      	bpl.n	8001bf4 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001b6c:	6863      	ldr	r3, [r4, #4]
 8001b6e:	f433 3280 	bics.w	r2, r3, #65536	@ 0x10000
 8001b72:	d003      	beq.n	8001b7c <HAL_RCC_OscConfig+0x30>
 8001b74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b78:	f040 8232 	bne.w	8001fe0 <HAL_RCC_OscConfig+0x494>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b7c:	4aae      	ldr	r2, [pc, #696]	@ (8001e38 <HAL_RCC_OscConfig+0x2ec>)
 8001b7e:	6853      	ldr	r3, [r2, #4]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	f000 8210 	beq.w	8001faa <HAL_RCC_OscConfig+0x45e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b8a:	6853      	ldr	r3, [r2, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	f000 8203 	beq.w	8001f9c <HAL_RCC_OscConfig+0x450>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b96:	6863      	ldr	r3, [r4, #4]
 8001b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b9c:	f000 821a 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x488>
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 824d 	beq.w	8002040 <HAL_RCC_OscConfig+0x4f4>
 8001ba6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001baa:	f000 8311 	beq.w	80021d0 <HAL_RCC_OscConfig+0x684>
 8001bae:	4ba2      	ldr	r3, [pc, #648]	@ (8001e38 <HAL_RCC_OscConfig+0x2ec>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001bbe:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7fe fb76 	bl	80002b0 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc4:	4f9c      	ldr	r7, [pc, #624]	@ (8001e38 <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 8001bc6:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f44f 3800 	mov.w	r8, #131072	@ 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bcc:	2601      	movs	r6, #1
 8001bce:	e005      	b.n	8001bdc <HAL_RCC_OscConfig+0x90>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7fe fb6e 	bl	80002b0 <HAL_GetTick>
 8001bd4:	1b40      	subs	r0, r0, r5
 8001bd6:	2864      	cmp	r0, #100	@ 0x64
 8001bd8:	f200 8227 	bhi.w	800202a <HAL_RCC_OscConfig+0x4de>
 8001bdc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	fa98 f3a8 	rbit	r3, r8
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	fa06 f303 	lsl.w	r3, r6, r3
 8001bee:	4213      	tst	r3, r2
 8001bf0:	d0ee      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x84>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf2:	6823      	ldr	r3, [r4, #0]
 8001bf4:	079e      	lsls	r6, r3, #30
 8001bf6:	d547      	bpl.n	8001c88 <HAL_RCC_OscConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001bf8:	68e3      	ldr	r3, [r4, #12]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	f200 8186 	bhi.w	8001f0c <HAL_RCC_OscConfig+0x3c0>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001c00:	6923      	ldr	r3, [r4, #16]
 8001c02:	2b1f      	cmp	r3, #31
 8001c04:	f200 818b 	bhi.w	8001f1e <HAL_RCC_OscConfig+0x3d2>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c08:	4b8b      	ldr	r3, [pc, #556]	@ (8001e38 <HAL_RCC_OscConfig+0x2ec>)
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	f012 0f0c 	tst.w	r2, #12
 8001c10:	f000 8169 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x39a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	f002 020c 	and.w	r2, r2, #12
 8001c1a:	2a08      	cmp	r2, #8
 8001c1c:	f000 815c 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x38c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c20:	68e2      	ldr	r2, [r4, #12]
 8001c22:	2a00      	cmp	r2, #0
 8001c24:	f000 8258 	beq.w	80020d8 <HAL_RCC_OscConfig+0x58c>
 8001c28:	2501      	movs	r5, #1
 8001c2a:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c36:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c3a:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	4f7e      	ldr	r7, [pc, #504]	@ (8001e38 <HAL_RCC_OscConfig+0x2ec>)
        __HAL_RCC_HSI_ENABLE();
 8001c3e:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001c40:	f7fe fb36 	bl	80002b0 <HAL_GetTick>
 8001c44:	f04f 0802 	mov.w	r8, #2
 8001c48:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4a:	e005      	b.n	8001c58 <HAL_RCC_OscConfig+0x10c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4c:	f7fe fb30 	bl	80002b0 <HAL_GetTick>
 8001c50:	1b80      	subs	r0, r0, r6
 8001c52:	2802      	cmp	r0, #2
 8001c54:	f200 81e9 	bhi.w	800202a <HAL_RCC_OscConfig+0x4de>
 8001c58:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	fa98 f3a8 	rbit	r3, r8
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	fa05 f303 	lsl.w	r3, r5, r3
 8001c6a:	4213      	tst	r3, r2
 8001c6c:	d0ee      	beq.n	8001c4c <HAL_RCC_OscConfig+0x100>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6e:	6839      	ldr	r1, [r7, #0]
 8001c70:	22f8      	movs	r2, #248	@ 0xf8
 8001c72:	fa92 f2a2 	rbit	r2, r2
 8001c76:	6923      	ldr	r3, [r4, #16]
 8001c78:	fab2 f282 	clz	r2, r2
 8001c7c:	4093      	lsls	r3, r2
 8001c7e:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 8001c82:	4313      	orrs	r3, r2
 8001c84:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c86:	6823      	ldr	r3, [r4, #0]
 8001c88:	071d      	lsls	r5, r3, #28
 8001c8a:	d52d      	bpl.n	8001ce8 <HAL_RCC_OscConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001c8c:	6963      	ldr	r3, [r4, #20]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	f200 8171 	bhi.w	8001f76 <HAL_RCC_OscConfig+0x42a>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 8148 	beq.w	8001f2a <HAL_RCC_OscConfig+0x3de>
 8001c9a:	2601      	movs	r6, #1
 8001c9c:	fa96 f2a6 	rbit	r2, r6
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca0:	4b66      	ldr	r3, [pc, #408]	@ (8001e3c <HAL_RCC_OscConfig+0x2f0>)
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca2:	f8df 8194 	ldr.w	r8, [pc, #404]	@ 8001e38 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 8001ca6:	fab2 f282 	clz	r2, r2
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	2502      	movs	r5, #2
 8001cb0:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
 8001cb2:	f7fe fafd 	bl	80002b0 <HAL_GetTick>
 8001cb6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb8:	e005      	b.n	8001cc6 <HAL_RCC_OscConfig+0x17a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cba:	f7fe faf9 	bl	80002b0 <HAL_GetTick>
 8001cbe:	1bc0      	subs	r0, r0, r7
 8001cc0:	2802      	cmp	r0, #2
 8001cc2:	f200 81b2 	bhi.w	800202a <HAL_RCC_OscConfig+0x4de>
 8001cc6:	fa95 f3a5 	rbit	r3, r5
 8001cca:	fa95 f3a5 	rbit	r3, r5
 8001cce:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8001cd6:	fa95 f3a5 	rbit	r3, r5
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	fa06 f303 	lsl.w	r3, r6, r3
 8001ce2:	4213      	tst	r3, r2
 8001ce4:	d0e9      	beq.n	8001cba <HAL_RCC_OscConfig+0x16e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	0758      	lsls	r0, r3, #29
 8001cea:	d557      	bpl.n	8001d9c <HAL_RCC_OscConfig+0x250>
  {
    FlagStatus       pwrclkchanged = RESET;
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001cec:	68a3      	ldr	r3, [r4, #8]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d906      	bls.n	8001d00 <HAL_RCC_OscConfig+0x1b4>
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	d004      	beq.n	8001d00 <HAL_RCC_OscConfig+0x1b4>
 8001cf6:	4852      	ldr	r0, [pc, #328]	@ (8001e40 <HAL_RCC_OscConfig+0x2f4>)
 8001cf8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001cfc:	f002 fc7e 	bl	80045fc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d00:	4b4d      	ldr	r3, [pc, #308]	@ (8001e38 <HAL_RCC_OscConfig+0x2ec>)
 8001d02:	69da      	ldr	r2, [r3, #28]
 8001d04:	00d1      	lsls	r1, r2, #3
 8001d06:	f100 81bc 	bmi.w	8002082 <HAL_RCC_OscConfig+0x536>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	69da      	ldr	r2, [r3, #28]
 8001d0c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001d10:	61da      	str	r2, [r3, #28]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d1c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1e:	4e49      	ldr	r6, [pc, #292]	@ (8001e44 <HAL_RCC_OscConfig+0x2f8>)
 8001d20:	6833      	ldr	r3, [r6, #0]
 8001d22:	05da      	lsls	r2, r3, #23
 8001d24:	f140 8171 	bpl.w	800200a <HAL_RCC_OscConfig+0x4be>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d28:	68a3      	ldr	r3, [r4, #8]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d00f      	beq.n	8001d4e <HAL_RCC_OscConfig+0x202>
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 81a9 	beq.w	8002086 <HAL_RCC_OscConfig+0x53a>
 8001d34:	2b05      	cmp	r3, #5
 8001d36:	4b40      	ldr	r3, [pc, #256]	@ (8001e38 <HAL_RCC_OscConfig+0x2ec>)
 8001d38:	6a1a      	ldr	r2, [r3, #32]
 8001d3a:	f000 820f 	beq.w	800215c <HAL_RCC_OscConfig+0x610>
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	621a      	str	r2, [r3, #32]
 8001d44:	6a1a      	ldr	r2, [r3, #32]
 8001d46:	f022 0204 	bic.w	r2, r2, #4
 8001d4a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d4c:	e004      	b.n	8001d58 <HAL_RCC_OscConfig+0x20c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e38 <HAL_RCC_OscConfig+0x2ec>)
 8001d50:	6a13      	ldr	r3, [r2, #32]
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6213      	str	r3, [r2, #32]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7fe faaa 	bl	80002b0 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8001e38 <HAL_RCC_OscConfig+0x2ec>
      tickstart = HAL_GetTick();
 8001d60:	4606      	mov	r6, r0
 8001d62:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d66:	2701      	movs	r7, #1
 8001d68:	e007      	b.n	8001d7a <HAL_RCC_OscConfig+0x22e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7fe faa1 	bl	80002b0 <HAL_GetTick>
 8001d6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001d72:	1b80      	subs	r0, r0, r6
 8001d74:	4298      	cmp	r0, r3
 8001d76:	f200 8158 	bhi.w	800202a <HAL_RCC_OscConfig+0x4de>
 8001d7a:	fa99 f3a9 	rbit	r3, r9
 8001d7e:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d82:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8001d86:	fa99 f3a9 	rbit	r3, r9
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	fa07 f303 	lsl.w	r3, r7, r3
 8001d92:	4213      	tst	r3, r2
 8001d94:	d0e9      	beq.n	8001d6a <HAL_RCC_OscConfig+0x21e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d96:	2d00      	cmp	r5, #0
 8001d98:	f040 81da 	bne.w	8002150 <HAL_RCC_OscConfig+0x604>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001d9c:	69a3      	ldr	r3, [r4, #24]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	f200 80f2 	bhi.w	8001f88 <HAL_RCC_OscConfig+0x43c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8093 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001daa:	4d23      	ldr	r5, [pc, #140]	@ (8001e38 <HAL_RCC_OscConfig+0x2ec>)
 8001dac:	686a      	ldr	r2, [r5, #4]
 8001dae:	f002 020c 	and.w	r2, r2, #12
 8001db2:	2a08      	cmp	r2, #8
 8001db4:	f000 81b4 	beq.w	8002120 <HAL_RCC_OscConfig+0x5d4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	f040 81e3 	bne.w	8002184 <HAL_RCC_OscConfig+0x638>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001dbe:	69e3      	ldr	r3, [r4, #28]
 8001dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dc4:	d007      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x28a>
 8001dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dca:	d004      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x28a>
 8001dcc:	481c      	ldr	r0, [pc, #112]	@ (8001e40 <HAL_RCC_OscConfig+0x2f4>)
 8001dce:	f240 2141 	movw	r1, #577	@ 0x241
 8001dd2:	f002 fc13 	bl	80045fc <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001dd6:	6a23      	ldr	r3, [r4, #32]
 8001dd8:	f433 2240 	bics.w	r2, r3, #786432	@ 0xc0000
 8001ddc:	d012      	beq.n	8001e04 <HAL_RCC_OscConfig+0x2b8>
 8001dde:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8001de2:	d00f      	beq.n	8001e04 <HAL_RCC_OscConfig+0x2b8>
 8001de4:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8001de8:	d00c      	beq.n	8001e04 <HAL_RCC_OscConfig+0x2b8>
 8001dea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8001dee:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 8001df2:	d007      	beq.n	8001e04 <HAL_RCC_OscConfig+0x2b8>
 8001df4:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8001df8:	d004      	beq.n	8001e04 <HAL_RCC_OscConfig+0x2b8>
 8001dfa:	4811      	ldr	r0, [pc, #68]	@ (8001e40 <HAL_RCC_OscConfig+0x2f4>)
 8001dfc:	f240 2142 	movw	r1, #578	@ 0x242
 8001e00:	f002 fbfc 	bl	80045fc <assert_failed>
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8001e04:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e06:	2b0f      	cmp	r3, #15
 8001e08:	f200 81b0 	bhi.w	800216c <HAL_RCC_OscConfig+0x620>
 8001e0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e10:	fa93 f3a3 	rbit	r3, r3
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e1c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7fe fa43 	bl	80002b0 <HAL_GetTick>
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2a:	4d03      	ldr	r5, [pc, #12]	@ (8001e38 <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 8001e2c:	4606      	mov	r6, r0
 8001e2e:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	2701      	movs	r7, #1
 8001e34:	e00e      	b.n	8001e54 <HAL_RCC_OscConfig+0x308>
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	10908120 	.word	0x10908120
 8001e40:	080054b8 	.word	0x080054b8
 8001e44:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e48:	f7fe fa32 	bl	80002b0 <HAL_GetTick>
 8001e4c:	1b80      	subs	r0, r0, r6
 8001e4e:	2802      	cmp	r0, #2
 8001e50:	f200 80eb 	bhi.w	800202a <HAL_RCC_OscConfig+0x4de>
 8001e54:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e58:	682a      	ldr	r2, [r5, #0]
 8001e5a:	fa98 f3a8 	rbit	r3, r8
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	fa07 f303 	lsl.w	r3, r7, r3
 8001e66:	4213      	tst	r3, r2
 8001e68:	d1ee      	bne.n	8001e48 <HAL_RCC_OscConfig+0x2fc>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e6a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8001e6c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001e6e:	f023 030f 	bic.w	r3, r3, #15
 8001e72:	4313      	orrs	r3, r2
 8001e74:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8001e76:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8001e7a:	686a      	ldr	r2, [r5, #4]
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	f422 1276 	bic.w	r2, r2, #4030464	@ 0x3d8000
 8001e82:	4313      	orrs	r3, r2
 8001e84:	606b      	str	r3, [r5, #4]
 8001e86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e8a:	fa93 f3a3 	rbit	r3, r3
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e96:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e9a:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e9c:	4eb6      	ldr	r6, [pc, #728]	@ (8002178 <HAL_RCC_OscConfig+0x62c>)
        __HAL_RCC_PLL_ENABLE();
 8001e9e:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fa06 	bl	80002b0 <HAL_GetTick>
 8001ea4:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
 8001ea8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eaa:	2501      	movs	r5, #1
 8001eac:	e005      	b.n	8001eba <HAL_RCC_OscConfig+0x36e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eae:	f7fe f9ff 	bl	80002b0 <HAL_GetTick>
 8001eb2:	1b00      	subs	r0, r0, r4
 8001eb4:	2802      	cmp	r0, #2
 8001eb6:	f200 80b8 	bhi.w	800202a <HAL_RCC_OscConfig+0x4de>
 8001eba:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ebe:	6832      	ldr	r2, [r6, #0]
 8001ec0:	fa97 f3a7 	rbit	r3, r7
 8001ec4:	fab3 f383 	clz	r3, r3
 8001ec8:	fa05 f303 	lsl.w	r3, r5, r3
 8001ecc:	4213      	tst	r3, r2
 8001ece:	d0ee      	beq.n	8001eae <HAL_RCC_OscConfig+0x362>
        }
      }
    }
  }

  return HAL_OK;
 8001ed0:	2000      	movs	r0, #0
}
 8001ed2:	b003      	add	sp, #12
 8001ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ee2:	f47f ae9d 	bne.w	8001c20 <HAL_RCC_OscConfig+0xd4>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eec:	4aa2      	ldr	r2, [pc, #648]	@ (8002178 <HAL_RCC_OscConfig+0x62c>)
 8001eee:	6811      	ldr	r1, [r2, #0]
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	420b      	tst	r3, r1
 8001f00:	d074      	beq.n	8001fec <HAL_RCC_OscConfig+0x4a0>
 8001f02:	68e3      	ldr	r3, [r4, #12]
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d071      	beq.n	8001fec <HAL_RCC_OscConfig+0x4a0>
    return HAL_ERROR;
 8001f08:	2001      	movs	r0, #1
 8001f0a:	e7e2      	b.n	8001ed2 <HAL_RCC_OscConfig+0x386>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001f0c:	489b      	ldr	r0, [pc, #620]	@ (800217c <HAL_RCC_OscConfig+0x630>)
 8001f0e:	f240 1187 	movw	r1, #391	@ 0x187
 8001f12:	f002 fb73 	bl	80045fc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001f16:	6923      	ldr	r3, [r4, #16]
 8001f18:	2b1f      	cmp	r3, #31
 8001f1a:	f67f ae75 	bls.w	8001c08 <HAL_RCC_OscConfig+0xbc>
 8001f1e:	4897      	ldr	r0, [pc, #604]	@ (800217c <HAL_RCC_OscConfig+0x630>)
 8001f20:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001f24:	f002 fb6a 	bl	80045fc <assert_failed>
 8001f28:	e66e      	b.n	8001c08 <HAL_RCC_OscConfig+0xbc>
 8001f2a:	2701      	movs	r7, #1
 8001f2c:	fa97 f1a7 	rbit	r1, r7
      __HAL_RCC_LSI_DISABLE();
 8001f30:	4a93      	ldr	r2, [pc, #588]	@ (8002180 <HAL_RCC_OscConfig+0x634>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f32:	f8df 8244 	ldr.w	r8, [pc, #580]	@ 8002178 <HAL_RCC_OscConfig+0x62c>
      __HAL_RCC_LSI_DISABLE();
 8001f36:	fab1 f181 	clz	r1, r1
 8001f3a:	440a      	add	r2, r1
 8001f3c:	0092      	lsls	r2, r2, #2
 8001f3e:	2502      	movs	r5, #2
 8001f40:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f42:	f7fe f9b5 	bl	80002b0 <HAL_GetTick>
 8001f46:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f48:	e004      	b.n	8001f54 <HAL_RCC_OscConfig+0x408>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f4a:	f7fe f9b1 	bl	80002b0 <HAL_GetTick>
 8001f4e:	1b80      	subs	r0, r0, r6
 8001f50:	2802      	cmp	r0, #2
 8001f52:	d86a      	bhi.n	800202a <HAL_RCC_OscConfig+0x4de>
 8001f54:	fa95 f3a5 	rbit	r3, r5
 8001f58:	fa95 f3a5 	rbit	r3, r5
 8001f5c:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f60:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8001f64:	fa95 f3a5 	rbit	r3, r5
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	fa07 f303 	lsl.w	r3, r7, r3
 8001f70:	4213      	tst	r3, r2
 8001f72:	d1ea      	bne.n	8001f4a <HAL_RCC_OscConfig+0x3fe>
 8001f74:	e6b7      	b.n	8001ce6 <HAL_RCC_OscConfig+0x19a>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001f76:	4881      	ldr	r0, [pc, #516]	@ (800217c <HAL_RCC_OscConfig+0x630>)
 8001f78:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 8001f7c:	f002 fb3e 	bl	80045fc <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f80:	6963      	ldr	r3, [r4, #20]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0d1      	beq.n	8001f2a <HAL_RCC_OscConfig+0x3de>
 8001f86:	e688      	b.n	8001c9a <HAL_RCC_OscConfig+0x14e>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001f88:	487c      	ldr	r0, [pc, #496]	@ (800217c <HAL_RCC_OscConfig+0x630>)
 8001f8a:	f44f 710e 	mov.w	r1, #568	@ 0x238
 8001f8e:	f002 fb35 	bl	80045fc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f92:	69a3      	ldr	r3, [r4, #24]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f47f af08 	bne.w	8001daa <HAL_RCC_OscConfig+0x25e>
 8001f9a:	e799      	b.n	8001ed0 <HAL_RCC_OscConfig+0x384>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f9c:	6853      	ldr	r3, [r2, #4]
 8001f9e:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001fa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fa6:	f47f adf6 	bne.w	8001b96 <HAL_RCC_OscConfig+0x4a>
 8001faa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fae:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb2:	4a71      	ldr	r2, [pc, #452]	@ (8002178 <HAL_RCC_OscConfig+0x62c>)
 8001fb4:	6811      	ldr	r1, [r2, #0]
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	2201      	movs	r2, #1
 8001fbc:	fab3 f383 	clz	r3, r3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	420b      	tst	r3, r1
 8001fc6:	f43f ae14 	beq.w	8001bf2 <HAL_RCC_OscConfig+0xa6>
 8001fca:	6863      	ldr	r3, [r4, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f47f ae10 	bne.w	8001bf2 <HAL_RCC_OscConfig+0xa6>
 8001fd2:	e799      	b.n	8001f08 <HAL_RCC_OscConfig+0x3bc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd4:	4a68      	ldr	r2, [pc, #416]	@ (8002178 <HAL_RCC_OscConfig+0x62c>)
 8001fd6:	6813      	ldr	r3, [r2, #0]
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fde:	e5ef      	b.n	8001bc0 <HAL_RCC_OscConfig+0x74>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001fe0:	4866      	ldr	r0, [pc, #408]	@ (800217c <HAL_RCC_OscConfig+0x630>)
 8001fe2:	f240 114f 	movw	r1, #335	@ 0x14f
 8001fe6:	f002 fb09 	bl	80045fc <assert_failed>
 8001fea:	e5c7      	b.n	8001b7c <HAL_RCC_OscConfig+0x30>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	4862      	ldr	r0, [pc, #392]	@ (8002178 <HAL_RCC_OscConfig+0x62c>)
 8001fee:	22f8      	movs	r2, #248	@ 0xf8
 8001ff0:	6801      	ldr	r1, [r0, #0]
 8001ff2:	fa92 f2a2 	rbit	r2, r2
 8001ff6:	6923      	ldr	r3, [r4, #16]
 8001ff8:	fab2 f282 	clz	r2, r2
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 8002002:	4313      	orrs	r3, r2
 8002004:	6003      	str	r3, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002006:	6823      	ldr	r3, [r4, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002008:	e63e      	b.n	8001c88 <HAL_RCC_OscConfig+0x13c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800200a:	6833      	ldr	r3, [r6, #0]
 800200c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002010:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002012:	f7fe f94d 	bl	80002b0 <HAL_GetTick>
 8002016:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	6833      	ldr	r3, [r6, #0]
 800201a:	05db      	lsls	r3, r3, #23
 800201c:	f53f ae84 	bmi.w	8001d28 <HAL_RCC_OscConfig+0x1dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002020:	f7fe f946 	bl	80002b0 <HAL_GetTick>
 8002024:	1bc0      	subs	r0, r0, r7
 8002026:	2864      	cmp	r0, #100	@ 0x64
 8002028:	d9f6      	bls.n	8002018 <HAL_RCC_OscConfig+0x4cc>
            return HAL_TIMEOUT;
 800202a:	2003      	movs	r0, #3
}
 800202c:	b003      	add	sp, #12
 800202e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002032:	4852      	ldr	r0, [pc, #328]	@ (800217c <HAL_RCC_OscConfig+0x630>)
 8002034:	f240 1149 	movw	r1, #329	@ 0x149
 8002038:	f002 fae0 	bl	80045fc <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203c:	6823      	ldr	r3, [r4, #0]
 800203e:	e593      	b.n	8001b68 <HAL_RCC_OscConfig+0x1c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002040:	4d4d      	ldr	r5, [pc, #308]	@ (8002178 <HAL_RCC_OscConfig+0x62c>)
 8002042:	682b      	ldr	r3, [r5, #0]
 8002044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002048:	602b      	str	r3, [r5, #0]
 800204a:	682b      	ldr	r3, [r5, #0]
 800204c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002050:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002052:	f7fe f92d 	bl	80002b0 <HAL_GetTick>
 8002056:	f44f 3800 	mov.w	r8, #131072	@ 0x20000
 800205a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205c:	2701      	movs	r7, #1
 800205e:	e004      	b.n	800206a <HAL_RCC_OscConfig+0x51e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002060:	f7fe f926 	bl	80002b0 <HAL_GetTick>
 8002064:	1b80      	subs	r0, r0, r6
 8002066:	2864      	cmp	r0, #100	@ 0x64
 8002068:	d8df      	bhi.n	800202a <HAL_RCC_OscConfig+0x4de>
 800206a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	682a      	ldr	r2, [r5, #0]
 8002070:	fa98 f3a8 	rbit	r3, r8
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	fa07 f303 	lsl.w	r3, r7, r3
 800207c:	4213      	tst	r3, r2
 800207e:	d1ef      	bne.n	8002060 <HAL_RCC_OscConfig+0x514>
 8002080:	e5b7      	b.n	8001bf2 <HAL_RCC_OscConfig+0xa6>
    FlagStatus       pwrclkchanged = RESET;
 8002082:	2500      	movs	r5, #0
 8002084:	e64b      	b.n	8001d1e <HAL_RCC_OscConfig+0x1d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002086:	4e3c      	ldr	r6, [pc, #240]	@ (8002178 <HAL_RCC_OscConfig+0x62c>)
 8002088:	6a33      	ldr	r3, [r6, #32]
 800208a:	f023 0301 	bic.w	r3, r3, #1
 800208e:	6233      	str	r3, [r6, #32]
 8002090:	6a33      	ldr	r3, [r6, #32]
 8002092:	f023 0304 	bic.w	r3, r3, #4
 8002096:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8002098:	f7fe f90a 	bl	80002b0 <HAL_GetTick>
 800209c:	f04f 0902 	mov.w	r9, #2
 80020a0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a2:	f04f 0801 	mov.w	r8, #1
 80020a6:	e006      	b.n	80020b6 <HAL_RCC_OscConfig+0x56a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f7fe f902 	bl	80002b0 <HAL_GetTick>
 80020ac:	f241 3388 	movw	r3, #5000	@ 0x1388
 80020b0:	1bc0      	subs	r0, r0, r7
 80020b2:	4298      	cmp	r0, r3
 80020b4:	d8b9      	bhi.n	800202a <HAL_RCC_OscConfig+0x4de>
 80020b6:	fa99 f3a9 	rbit	r3, r9
 80020ba:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020be:	6a32      	ldr	r2, [r6, #32]
 80020c0:	fa99 f3a9 	rbit	r3, r9
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	fa08 f303 	lsl.w	r3, r8, r3
 80020cc:	4213      	tst	r3, r2
 80020ce:	d1eb      	bne.n	80020a8 <HAL_RCC_OscConfig+0x55c>
    if(pwrclkchanged == SET)
 80020d0:	2d00      	cmp	r5, #0
 80020d2:	f43f ae63 	beq.w	8001d9c <HAL_RCC_OscConfig+0x250>
 80020d6:	e03b      	b.n	8002150 <HAL_RCC_OscConfig+0x604>
 80020d8:	2601      	movs	r6, #1
 80020da:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020e6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020ea:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ec:	4f22      	ldr	r7, [pc, #136]	@ (8002178 <HAL_RCC_OscConfig+0x62c>)
        __HAL_RCC_HSI_DISABLE();
 80020ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020f0:	f7fe f8de 	bl	80002b0 <HAL_GetTick>
 80020f4:	f04f 0802 	mov.w	r8, #2
 80020f8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fa:	e004      	b.n	8002106 <HAL_RCC_OscConfig+0x5ba>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020fc:	f7fe f8d8 	bl	80002b0 <HAL_GetTick>
 8002100:	1b40      	subs	r0, r0, r5
 8002102:	2802      	cmp	r0, #2
 8002104:	d891      	bhi.n	800202a <HAL_RCC_OscConfig+0x4de>
 8002106:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	fa98 f3a8 	rbit	r3, r8
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	fa06 f303 	lsl.w	r3, r6, r3
 8002118:	4213      	tst	r3, r2
 800211a:	d1ef      	bne.n	80020fc <HAL_RCC_OscConfig+0x5b0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	e5b3      	b.n	8001c88 <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002120:	2b01      	cmp	r3, #1
 8002122:	f43f aef1 	beq.w	8001f08 <HAL_RCC_OscConfig+0x3bc>
        pll_config = RCC->CFGR;
 8002126:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002128:	69e1      	ldr	r1, [r4, #28]
        pll_config2 = RCC->CFGR2;
 800212a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800212c:	f402 30c0 	and.w	r0, r2, #98304	@ 0x18000
 8002130:	4288      	cmp	r0, r1
 8002132:	f47f aee9 	bne.w	8001f08 <HAL_RCC_OscConfig+0x3bc>
 8002136:	6a21      	ldr	r1, [r4, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002138:	f402 1270 	and.w	r2, r2, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800213c:	428a      	cmp	r2, r1
 800213e:	f47f aee3 	bne.w	8001f08 <HAL_RCC_OscConfig+0x3bc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002142:	6a60      	ldr	r0, [r4, #36]	@ 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002144:	f003 030f 	and.w	r3, r3, #15
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002148:	1a18      	subs	r0, r3, r0
 800214a:	bf18      	it	ne
 800214c:	2001      	movne	r0, #1
 800214e:	e6c0      	b.n	8001ed2 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002150:	4a09      	ldr	r2, [pc, #36]	@ (8002178 <HAL_RCC_OscConfig+0x62c>)
 8002152:	69d3      	ldr	r3, [r2, #28]
 8002154:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002158:	61d3      	str	r3, [r2, #28]
 800215a:	e61f      	b.n	8001d9c <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215c:	f042 0204 	orr.w	r2, r2, #4
 8002160:	621a      	str	r2, [r3, #32]
 8002162:	6a1a      	ldr	r2, [r3, #32]
 8002164:	f042 0201 	orr.w	r2, r2, #1
 8002168:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216a:	e5f5      	b.n	8001d58 <HAL_RCC_OscConfig+0x20c>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 800216c:	4803      	ldr	r0, [pc, #12]	@ (800217c <HAL_RCC_OscConfig+0x630>)
 800216e:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8002172:	f002 fa43 	bl	80045fc <assert_failed>
 8002176:	e649      	b.n	8001e0c <HAL_RCC_OscConfig+0x2c0>
 8002178:	40021000 	.word	0x40021000
 800217c:	080054b8 	.word	0x080054b8
 8002180:	10908120 	.word	0x10908120
 8002184:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002188:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002194:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800219e:	f7fe f887 	bl	80002b0 <HAL_GetTick>
 80021a2:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
 80021a6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a8:	2601      	movs	r6, #1
 80021aa:	e005      	b.n	80021b8 <HAL_RCC_OscConfig+0x66c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ac:	f7fe f880 	bl	80002b0 <HAL_GetTick>
 80021b0:	1b00      	subs	r0, r0, r4
 80021b2:	2802      	cmp	r0, #2
 80021b4:	f63f af39 	bhi.w	800202a <HAL_RCC_OscConfig+0x4de>
 80021b8:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021bc:	682a      	ldr	r2, [r5, #0]
 80021be:	fa97 f3a7 	rbit	r3, r7
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	fa06 f303 	lsl.w	r3, r6, r3
 80021ca:	4213      	tst	r3, r2
 80021cc:	d1ee      	bne.n	80021ac <HAL_RCC_OscConfig+0x660>
 80021ce:	e67f      	b.n	8001ed0 <HAL_RCC_OscConfig+0x384>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021d4:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80021e6:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e8:	e4ea      	b.n	8001bc0 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 80021ea:	2001      	movs	r0, #1
}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop

080021f0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80021f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x34>)
 80021f2:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f4:	f003 010c 	and.w	r1, r3, #12
 80021f8:	2908      	cmp	r1, #8
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x10>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021fc:	480a      	ldr	r0, [pc, #40]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x38>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80021fe:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002200:	f3c3 4383 	ubfx	r3, r3, #18, #4
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002204:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002206:	4909      	ldr	r1, [pc, #36]	@ (800222c <HAL_RCC_GetSysClockFreq+0x3c>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002208:	4807      	ldr	r0, [pc, #28]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x38>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800220a:	5cc9      	ldrb	r1, [r1, r3]
{
 800220c:	b410      	push	{r4}
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800220e:	f002 030f 	and.w	r3, r2, #15
 8002212:	4c07      	ldr	r4, [pc, #28]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x40>)
 8002214:	5ce3      	ldrb	r3, [r4, r3]
}
 8002216:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800221a:	fbb0 f0f3 	udiv	r0, r0, r3
 800221e:	fb01 f000 	mul.w	r0, r1, r0
}
 8002222:	4770      	bx	lr
 8002224:	40021000 	.word	0x40021000
 8002228:	007a1200 	.word	0x007a1200
 800222c:	080055ec 	.word	0x080055ec
 8002230:	080055dc 	.word	0x080055dc

08002234 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002234:	2800      	cmp	r0, #0
 8002236:	f000 80dc 	beq.w	80023f2 <HAL_RCC_ClockConfig+0x1be>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800223a:	6803      	ldr	r3, [r0, #0]
{
 800223c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002240:	071e      	lsls	r6, r3, #28
 8002242:	460d      	mov	r5, r1
 8002244:	4604      	mov	r4, r0
 8002246:	f000 80ce 	beq.w	80023e6 <HAL_RCC_ClockConfig+0x1b2>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800224a:	2d02      	cmp	r5, #2
 800224c:	f200 80c5 	bhi.w	80023da <HAL_RCC_ClockConfig+0x1a6>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002250:	4a7c      	ldr	r2, [pc, #496]	@ (8002444 <HAL_RCC_ClockConfig+0x210>)
 8002252:	6813      	ldr	r3, [r2, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	42ab      	cmp	r3, r5
 800225a:	d20c      	bcs.n	8002276 <HAL_RCC_ClockConfig+0x42>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225c:	6813      	ldr	r3, [r2, #0]
 800225e:	f023 0307 	bic.w	r3, r3, #7
 8002262:	432b      	orrs	r3, r5
 8002264:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	6813      	ldr	r3, [r2, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	42ab      	cmp	r3, r5
 800226e:	d002      	beq.n	8002276 <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 8002270:	2001      	movs	r0, #1
}
 8002272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002276:	6823      	ldr	r3, [r4, #0]
 8002278:	0798      	lsls	r0, r3, #30
 800227a:	d51a      	bpl.n	80022b2 <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800227c:	68a1      	ldr	r1, [r4, #8]
 800227e:	b191      	cbz	r1, 80022a6 <HAL_RCC_ClockConfig+0x72>
 8002280:	29c0      	cmp	r1, #192	@ 0xc0
 8002282:	d010      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x72>
 8002284:	f200 80d0 	bhi.w	8002428 <HAL_RCC_ClockConfig+0x1f4>
 8002288:	29a0      	cmp	r1, #160	@ 0xa0
 800228a:	d00c      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x72>
 800228c:	f200 80d5 	bhi.w	800243a <HAL_RCC_ClockConfig+0x206>
 8002290:	f021 0210 	bic.w	r2, r1, #16
 8002294:	2a80      	cmp	r2, #128	@ 0x80
 8002296:	d006      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x72>
 8002298:	f240 21d9 	movw	r1, #729	@ 0x2d9
 800229c:	486a      	ldr	r0, [pc, #424]	@ (8002448 <HAL_RCC_ClockConfig+0x214>)
 800229e:	f002 f9ad 	bl	80045fc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a2:	68a1      	ldr	r1, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a4:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a6:	4869      	ldr	r0, [pc, #420]	@ (800244c <HAL_RCC_ClockConfig+0x218>)
 80022a8:	6842      	ldr	r2, [r0, #4]
 80022aa:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80022ae:	430a      	orrs	r2, r1
 80022b0:	6042      	str	r2, [r0, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b2:	07d9      	lsls	r1, r3, #31
 80022b4:	d531      	bpl.n	800231a <HAL_RCC_ClockConfig+0xe6>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80022b6:	6863      	ldr	r3, [r4, #4]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	f200 80ac 	bhi.w	8002416 <HAL_RCC_ClockConfig+0x1e2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022be:	2b01      	cmp	r3, #1
 80022c0:	f000 8099 	beq.w	80023f6 <HAL_RCC_ClockConfig+0x1c2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	bf0c      	ite	eq
 80022c8:	f04f 7200 	moveq.w	r2, #33554432	@ 0x2000000
 80022cc:	2202      	movne	r2, #2
 80022ce:	fa92 f1a2 	rbit	r1, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	495e      	ldr	r1, [pc, #376]	@ (800244c <HAL_RCC_ClockConfig+0x218>)
 80022d4:	6808      	ldr	r0, [r1, #0]
 80022d6:	fa92 f2a2 	rbit	r2, r2
 80022da:	2101      	movs	r1, #1
 80022dc:	fab2 f282 	clz	r2, r2
 80022e0:	fa01 f202 	lsl.w	r2, r1, r2
 80022e4:	4202      	tst	r2, r0
 80022e6:	d0c3      	beq.n	8002270 <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e8:	4e58      	ldr	r6, [pc, #352]	@ (800244c <HAL_RCC_ClockConfig+0x218>)
 80022ea:	6872      	ldr	r2, [r6, #4]
 80022ec:	f022 0203 	bic.w	r2, r2, #3
 80022f0:	4313      	orrs	r3, r2
 80022f2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80022f4:	f7fd ffdc 	bl	80002b0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f8:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80022fc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	e005      	b.n	800230c <HAL_RCC_ClockConfig+0xd8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002300:	f7fd ffd6 	bl	80002b0 <HAL_GetTick>
 8002304:	1bc0      	subs	r0, r0, r7
 8002306:	4540      	cmp	r0, r8
 8002308:	f200 808c 	bhi.w	8002424 <HAL_RCC_ClockConfig+0x1f0>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230c:	6873      	ldr	r3, [r6, #4]
 800230e:	6862      	ldr	r2, [r4, #4]
 8002310:	f003 030c 	and.w	r3, r3, #12
 8002314:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002318:	d1f2      	bne.n	8002300 <HAL_RCC_ClockConfig+0xcc>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800231a:	4a4a      	ldr	r2, [pc, #296]	@ (8002444 <HAL_RCC_ClockConfig+0x210>)
 800231c:	6813      	ldr	r3, [r2, #0]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	42ab      	cmp	r3, r5
 8002324:	d909      	bls.n	800233a <HAL_RCC_ClockConfig+0x106>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	6813      	ldr	r3, [r2, #0]
 8002328:	f023 0307 	bic.w	r3, r3, #7
 800232c:	432b      	orrs	r3, r5
 800232e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002330:	6813      	ldr	r3, [r2, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	42ab      	cmp	r3, r5
 8002338:	d19a      	bne.n	8002270 <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233a:	6823      	ldr	r3, [r4, #0]
 800233c:	075a      	lsls	r2, r3, #29
 800233e:	d518      	bpl.n	8002372 <HAL_RCC_ClockConfig+0x13e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002340:	68e1      	ldr	r1, [r4, #12]
 8002342:	f431 6280 	bics.w	r2, r1, #1024	@ 0x400
 8002346:	d00e      	beq.n	8002366 <HAL_RCC_ClockConfig+0x132>
 8002348:	f421 7200 	bic.w	r2, r1, #512	@ 0x200
 800234c:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 8002350:	d009      	beq.n	8002366 <HAL_RCC_ClockConfig+0x132>
 8002352:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 8002356:	d006      	beq.n	8002366 <HAL_RCC_ClockConfig+0x132>
 8002358:	f44f 7147 	mov.w	r1, #796	@ 0x31c
 800235c:	483a      	ldr	r0, [pc, #232]	@ (8002448 <HAL_RCC_ClockConfig+0x214>)
 800235e:	f002 f94d 	bl	80045fc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002362:	68e1      	ldr	r1, [r4, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002364:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002366:	4839      	ldr	r0, [pc, #228]	@ (800244c <HAL_RCC_ClockConfig+0x218>)
 8002368:	6842      	ldr	r2, [r0, #4]
 800236a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800236e:	430a      	orrs	r2, r1
 8002370:	6042      	str	r2, [r0, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002372:	071b      	lsls	r3, r3, #28
 8002374:	d518      	bpl.n	80023a8 <HAL_RCC_ClockConfig+0x174>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002376:	6922      	ldr	r2, [r4, #16]
 8002378:	f432 6380 	bics.w	r3, r2, #1024	@ 0x400
 800237c:	d00d      	beq.n	800239a <HAL_RCC_ClockConfig+0x166>
 800237e:	f422 7300 	bic.w	r3, r2, #512	@ 0x200
 8002382:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002386:	d008      	beq.n	800239a <HAL_RCC_ClockConfig+0x166>
 8002388:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
 800238c:	d005      	beq.n	800239a <HAL_RCC_ClockConfig+0x166>
 800238e:	482e      	ldr	r0, [pc, #184]	@ (8002448 <HAL_RCC_ClockConfig+0x214>)
 8002390:	f240 3123 	movw	r1, #803	@ 0x323
 8002394:	f002 f932 	bl	80045fc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002398:	6922      	ldr	r2, [r4, #16]
 800239a:	492c      	ldr	r1, [pc, #176]	@ (800244c <HAL_RCC_ClockConfig+0x218>)
 800239c:	684b      	ldr	r3, [r1, #4]
 800239e:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80023a2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80023a6:	604b      	str	r3, [r1, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023a8:	f7ff ff22 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80023ac:	4b27      	ldr	r3, [pc, #156]	@ (800244c <HAL_RCC_ClockConfig+0x218>)
 80023ae:	22f0      	movs	r2, #240	@ 0xf0
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	fa92 f2a2 	rbit	r2, r2
 80023b6:	fab2 f282 	clz	r2, r2
 80023ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023be:	4c24      	ldr	r4, [pc, #144]	@ (8002450 <HAL_RCC_ClockConfig+0x21c>)
  HAL_InitTick (uwTickPrio);
 80023c0:	4924      	ldr	r1, [pc, #144]	@ (8002454 <HAL_RCC_ClockConfig+0x220>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023c2:	40d3      	lsrs	r3, r2
 80023c4:	4a24      	ldr	r2, [pc, #144]	@ (8002458 <HAL_RCC_ClockConfig+0x224>)
 80023c6:	5ce3      	ldrb	r3, [r4, r3]
 80023c8:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 80023cc:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023ce:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80023d0:	f7fd ff2c 	bl	800022c <HAL_InitTick>
  return HAL_OK;
 80023d4:	2000      	movs	r0, #0
}
 80023d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 80023da:	481b      	ldr	r0, [pc, #108]	@ (8002448 <HAL_RCC_ClockConfig+0x214>)
 80023dc:	f240 21c2 	movw	r1, #706	@ 0x2c2
 80023e0:	f002 f90c 	bl	80045fc <assert_failed>
 80023e4:	e734      	b.n	8002250 <HAL_RCC_ClockConfig+0x1c>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80023e6:	4818      	ldr	r0, [pc, #96]	@ (8002448 <HAL_RCC_ClockConfig+0x214>)
 80023e8:	f240 21c1 	movw	r1, #705	@ 0x2c1
 80023ec:	f002 f906 	bl	80045fc <assert_failed>
 80023f0:	e72b      	b.n	800224a <HAL_RCC_ClockConfig+0x16>
    return HAL_ERROR;
 80023f2:	2001      	movs	r0, #1
}
 80023f4:	4770      	bx	lr
 80023f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023fa:	fa92 f1a2 	rbit	r1, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4913      	ldr	r1, [pc, #76]	@ (800244c <HAL_RCC_ClockConfig+0x218>)
 8002400:	6809      	ldr	r1, [r1, #0]
 8002402:	fa92 f2a2 	rbit	r2, r2
 8002406:	fab2 f282 	clz	r2, r2
 800240a:	fa03 f202 	lsl.w	r2, r3, r2
 800240e:	420a      	tst	r2, r1
 8002410:	f47f af6a 	bne.w	80022e8 <HAL_RCC_ClockConfig+0xb4>
 8002414:	e72c      	b.n	8002270 <HAL_RCC_ClockConfig+0x3c>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002416:	480c      	ldr	r0, [pc, #48]	@ (8002448 <HAL_RCC_ClockConfig+0x214>)
 8002418:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 800241c:	f002 f8ee 	bl	80045fc <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002420:	6863      	ldr	r3, [r4, #4]
 8002422:	e74c      	b.n	80022be <HAL_RCC_ClockConfig+0x8a>
        return HAL_TIMEOUT;
 8002424:	2003      	movs	r0, #3
 8002426:	e724      	b.n	8002272 <HAL_RCC_ClockConfig+0x3e>
 8002428:	29e0      	cmp	r1, #224	@ 0xe0
 800242a:	f43f af3c 	beq.w	80022a6 <HAL_RCC_ClockConfig+0x72>
 800242e:	f021 0220 	bic.w	r2, r1, #32
 8002432:	2ad0      	cmp	r2, #208	@ 0xd0
 8002434:	f47f af30 	bne.w	8002298 <HAL_RCC_ClockConfig+0x64>
 8002438:	e735      	b.n	80022a6 <HAL_RCC_ClockConfig+0x72>
 800243a:	29b0      	cmp	r1, #176	@ 0xb0
 800243c:	f43f af33 	beq.w	80022a6 <HAL_RCC_ClockConfig+0x72>
 8002440:	e72a      	b.n	8002298 <HAL_RCC_ClockConfig+0x64>
 8002442:	bf00      	nop
 8002444:	40022000 	.word	0x40022000
 8002448:	080054b8 	.word	0x080054b8
 800244c:	40021000 	.word	0x40021000
 8002450:	08005604 	.word	0x08005604
 8002454:	20000004 	.word	0x20000004
 8002458:	20000008 	.word	0x20000008

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800245c:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <HAL_RCC_GetPCLK1Freq+0x24>)
 800245e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	fa92 f2a2 	rbit	r2, r2
 8002468:	fab2 f282 	clz	r2, r2
 800246c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002470:	4904      	ldr	r1, [pc, #16]	@ (8002484 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8002472:	4805      	ldr	r0, [pc, #20]	@ (8002488 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002474:	40d3      	lsrs	r3, r2
 8002476:	6800      	ldr	r0, [r0, #0]
 8002478:	5ccb      	ldrb	r3, [r1, r3]
}    
 800247a:	40d8      	lsrs	r0, r3
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	080055fc 	.word	0x080055fc
 8002488:	20000008 	.word	0x20000008

0800248c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800248c:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800248e:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	fa92 f2a2 	rbit	r2, r2
 8002498:	fab2 f282 	clz	r2, r2
 800249c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80024a0:	4904      	ldr	r1, [pc, #16]	@ (80024b4 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 80024a2:	4805      	ldr	r0, [pc, #20]	@ (80024b8 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024a4:	40d3      	lsrs	r3, r2
 80024a6:	6800      	ldr	r0, [r0, #0]
 80024a8:	5ccb      	ldrb	r3, [r1, r3]
} 
 80024aa:	40d8      	lsrs	r0, r3
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	080055fc 	.word	0x080055fc
 80024b8:	20000008 	.word	0x20000008

080024bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tickstart = 0U;
  uint32_t temp_reg = 0U;
  FlagStatus       pwrclkchanged = RESET;
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80024c0:	4a94      	ldr	r2, [pc, #592]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024c2:	6803      	ldr	r3, [r0, #0]
 80024c4:	4293      	cmp	r3, r2
{
 80024c6:	b083      	sub	sp, #12
 80024c8:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80024ca:	f080 81f2 	bcs.w	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024ce:	03d9      	lsls	r1, r3, #15
 80024d0:	d54e      	bpl.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80024d2:	6863      	ldr	r3, [r4, #4]
 80024d4:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
 80024d8:	f040 820c 	bne.w	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x438>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024dc:	4b8e      	ldr	r3, [pc, #568]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80024de:	69da      	ldr	r2, [r3, #28]
 80024e0:	00d2      	lsls	r2, r2, #3
 80024e2:	f100 81ec 	bmi.w	80028be <HAL_RCCEx_PeriphCLKConfig+0x402>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4d8c      	ldr	r5, [pc, #560]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x260>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80024ee:	61da      	str	r2, [r3, #28]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fa:	682b      	ldr	r3, [r5, #0]
 80024fc:	05df      	lsls	r7, r3, #23
      pwrclkchanged = SET;
 80024fe:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	f140 81e3 	bpl.w	80028cc <HAL_RCCEx_PeriphCLKConfig+0x410>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002506:	f8df 8210 	ldr.w	r8, [pc, #528]	@ 8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800250a:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800250c:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002510:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002514:	d020      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002516:	f401 7240 	and.w	r2, r1, #768	@ 0x300
 800251a:	429a      	cmp	r2, r3
 800251c:	d01c      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800251e:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8002522:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002526:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 800252a:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800252e:	4f7c      	ldr	r7, [pc, #496]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002530:	fab2 f282 	clz	r2, r2
 8002534:	443a      	add	r2, r7
 8002536:	0092      	lsls	r2, r2, #2
 8002538:	2501      	movs	r5, #1
 800253a:	6015      	str	r5, [r2, #0]
 800253c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	443b      	add	r3, r7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800254a:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 800254c:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 800254e:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002552:	f100 81f6 	bmi.w	8002942 <HAL_RCCEx_PeriphCLKConfig+0x486>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002556:	6861      	ldr	r1, [r4, #4]
 8002558:	4a6f      	ldr	r2, [pc, #444]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800255a:	6a13      	ldr	r3, [r2, #32]
 800255c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002560:	430b      	orrs	r3, r1
 8002562:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002564:	b11e      	cbz	r6, 800256e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002566:	69d3      	ldr	r3, [r2, #28]
 8002568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800256c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	07da      	lsls	r2, r3, #31
 8002572:	d509      	bpl.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8002574:	68a1      	ldr	r1, [r4, #8]
 8002576:	2903      	cmp	r1, #3
 8002578:	f200 81d4 	bhi.w	8002924 <HAL_RCCEx_PeriphCLKConfig+0x468>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800257c:	4866      	ldr	r0, [pc, #408]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800257e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002580:	f022 0203 	bic.w	r2, r2, #3
 8002584:	430a      	orrs	r2, r1
 8002586:	6302      	str	r2, [r0, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002588:	079f      	lsls	r7, r3, #30
 800258a:	d50f      	bpl.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800258c:	68e1      	ldr	r1, [r4, #12]
 800258e:	f431 3240 	bics.w	r2, r1, #196608	@ 0x30000
 8002592:	d005      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8002594:	21c7      	movs	r1, #199	@ 0xc7
 8002596:	4863      	ldr	r0, [pc, #396]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002598:	f002 f830 	bl	80045fc <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800259c:	68e1      	ldr	r1, [r4, #12]
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800259e:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025a0:	485d      	ldr	r0, [pc, #372]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025a2:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80025a4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80025a8:	430a      	orrs	r2, r1
 80025aa:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025ac:	075e      	lsls	r6, r3, #29
 80025ae:	d50f      	bpl.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80025b0:	6921      	ldr	r1, [r4, #16]
 80025b2:	f431 2240 	bics.w	r2, r1, #786432	@ 0xc0000
 80025b6:	d005      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80025b8:	21d3      	movs	r1, #211	@ 0xd3
 80025ba:	485a      	ldr	r0, [pc, #360]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025bc:	f002 f81e 	bl	80045fc <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025c0:	6921      	ldr	r1, [r4, #16]
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025c2:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025c4:	4854      	ldr	r0, [pc, #336]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025c6:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80025c8:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80025cc:	430a      	orrs	r2, r1
 80025ce:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025d0:	069d      	lsls	r5, r3, #26
 80025d2:	d50f      	bpl.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80025d4:	69e1      	ldr	r1, [r4, #28]
 80025d6:	f031 0210 	bics.w	r2, r1, #16
 80025da:	d005      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80025dc:	21de      	movs	r1, #222	@ 0xde
 80025de:	4851      	ldr	r0, [pc, #324]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025e0:	f002 f80c 	bl	80045fc <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025e4:	69e1      	ldr	r1, [r4, #28]
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025e6:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025e8:	484b      	ldr	r0, [pc, #300]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025ea:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80025ec:	f022 0210 	bic.w	r2, r2, #16
 80025f0:	430a      	orrs	r2, r1
 80025f2:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025f4:	0398      	lsls	r0, r3, #14
 80025f6:	d50f      	bpl.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 80025f8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80025fa:	f431 0280 	bics.w	r2, r1, #4194304	@ 0x400000
 80025fe:	d005      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002600:	21ec      	movs	r1, #236	@ 0xec
 8002602:	4848      	ldr	r0, [pc, #288]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002604:	f001 fffa 	bl	80045fc <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002608:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800260a:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800260c:	4842      	ldr	r0, [pc, #264]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800260e:	6842      	ldr	r2, [r0, #4]
 8002610:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8002614:	430a      	orrs	r2, r1
 8002616:	6042      	str	r2, [r0, #4]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002618:	0659      	lsls	r1, r3, #25
 800261a:	d510      	bpl.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800261c:	6a21      	ldr	r1, [r4, #32]
 800261e:	f031 0220 	bics.w	r2, r1, #32
 8002622:	d006      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8002624:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002628:	483e      	ldr	r0, [pc, #248]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800262a:	f001 ffe7 	bl	80045fc <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800262e:	6a21      	ldr	r1, [r4, #32]
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002630:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002632:	4839      	ldr	r0, [pc, #228]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002634:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002636:	f022 0220 	bic.w	r2, r2, #32
 800263a:	430a      	orrs	r2, r1
 800263c:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800263e:	035a      	lsls	r2, r3, #13
 8002640:	d510      	bpl.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8002642:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002644:	f031 0240 	bics.w	r2, r1, #64	@ 0x40
 8002648:	d006      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800264a:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800264e:	4835      	ldr	r0, [pc, #212]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002650:	f001 ffd4 	bl	80045fc <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002654:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002656:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002658:	482f      	ldr	r0, [pc, #188]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800265a:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800265c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002660:	430a      	orrs	r2, r1
 8002662:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002664:	071f      	lsls	r7, r3, #28
 8002666:	d510      	bpl.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8002668:	6961      	ldr	r1, [r4, #20]
 800266a:	f431 1240 	bics.w	r2, r1, #3145728	@ 0x300000
 800266e:	d006      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002670:	f240 1121 	movw	r1, #289	@ 0x121
 8002674:	482b      	ldr	r0, [pc, #172]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002676:	f001 ffc1 	bl	80045fc <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800267a:	6961      	ldr	r1, [r4, #20]
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800267c:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800267e:	4826      	ldr	r0, [pc, #152]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002680:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002682:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002686:	430a      	orrs	r2, r1
 8002688:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800268a:	06de      	lsls	r6, r3, #27
 800268c:	d510      	bpl.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800268e:	69a1      	ldr	r1, [r4, #24]
 8002690:	f431 0240 	bics.w	r2, r1, #12582912	@ 0xc00000
 8002694:	d006      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002696:	f240 112b 	movw	r1, #299	@ 0x12b
 800269a:	4822      	ldr	r0, [pc, #136]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800269c:	f001 ffae 	bl	80045fc <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026a0:	69a1      	ldr	r1, [r4, #24]

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026a2:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026a4:	481c      	ldr	r0, [pc, #112]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026a6:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80026a8:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80026ac:	430a      	orrs	r2, r1
 80026ae:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	059d      	lsls	r5, r3, #22
 80026b2:	d510      	bpl.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80026b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80026b6:	f431 0200 	bics.w	r2, r1, #8388608	@ 0x800000
 80026ba:	d006      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
 80026bc:	f240 113b 	movw	r1, #315	@ 0x13b
 80026c0:	4818      	ldr	r0, [pc, #96]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026c2:	f001 ff9b 	bl	80045fc <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026c6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026c8:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026ca:	4813      	ldr	r0, [pc, #76]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026cc:	6842      	ldr	r2, [r0, #4]
 80026ce:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 80026d2:	430a      	orrs	r2, r1
 80026d4:	6042      	str	r2, [r0, #4]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026d6:	0618      	lsls	r0, r3, #24
 80026d8:	d526      	bpl.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 80026da:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80026dc:	b191      	cbz	r1, 8002704 <HAL_RCCEx_PeriphCLKConfig+0x248>
 80026de:	f5b1 7fb0 	cmp.w	r1, #352	@ 0x160
 80026e2:	d00f      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x248>
 80026e4:	f200 810b 	bhi.w	80028fe <HAL_RCCEx_PeriphCLKConfig+0x442>
 80026e8:	f5b1 7f98 	cmp.w	r1, #304	@ 0x130
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x248>
 80026ee:	f021 0210 	bic.w	r2, r1, #16
 80026f2:	f200 8142 	bhi.w	800297a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80026f6:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80026fa:	d003      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x248>
 80026fc:	f5b1 7f90 	cmp.w	r1, #288	@ 0x120
 8002700:	f040 8108 	bne.w	8002914 <HAL_RCCEx_PeriphCLKConfig+0x458>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002704:	4804      	ldr	r0, [pc, #16]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002706:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8002708:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 800270c:	430a      	orrs	r2, r1
 800270e:	62c2      	str	r2, [r0, #44]	@ 0x2c
 8002710:	e00a      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002712:	bf00      	nop
 8002714:	03f73400 	.word	0x03f73400
 8002718:	40021000 	.word	0x40021000
 800271c:	40007000 	.word	0x40007000
 8002720:	10908100 	.word	0x10908100
 8002724:	080054f0 	.word	0x080054f0
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002728:	05d9      	lsls	r1, r3, #23
 800272a:	d527      	bpl.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 800272c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800272e:	f431 5200 	bics.w	r2, r1, #8192	@ 0x2000
 8002732:	d01d      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002734:	f421 6280 	bic.w	r2, r1, #1024	@ 0x400
 8002738:	f5b2 5f08 	cmp.w	r2, #8704	@ 0x2200
 800273c:	d018      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800273e:	f421 6200 	bic.w	r2, r1, #2048	@ 0x800
 8002742:	f5b2 5f10 	cmp.w	r2, #9216	@ 0x2400
 8002746:	d013      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002748:	f421 7200 	bic.w	r2, r1, #512	@ 0x200
 800274c:	f5b2 5f20 	cmp.w	r2, #10240	@ 0x2800
 8002750:	d00e      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002752:	f5b1 5f38 	cmp.w	r1, #11776	@ 0x2e00
 8002756:	d00b      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002758:	f421 62c0 	bic.w	r2, r1, #1536	@ 0x600
 800275c:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8002760:	d006      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002762:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8002766:	4887      	ldr	r0, [pc, #540]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 8002768:	f001 ff48 	bl	80045fc <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800276c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800276e:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002770:	4885      	ldr	r0, [pc, #532]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8002772:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8002774:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8002778:	430a      	orrs	r2, r1
 800277a:	62c2      	str	r2, [r0, #44]	@ 0x2c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800277c:	04da      	lsls	r2, r3, #19
 800277e:	d510      	bpl.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8002780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002782:	f431 7280 	bics.w	r2, r1, #256	@ 0x100
 8002786:	d006      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002788:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800278c:	487d      	ldr	r0, [pc, #500]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800278e:	f001 ff35 	bl	80045fc <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002792:	6b61      	ldr	r1, [r4, #52]	@ 0x34
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002794:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002796:	487c      	ldr	r0, [pc, #496]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8002798:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800279a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800279e:	430a      	orrs	r2, r1
 80027a0:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80027a2:	049f      	lsls	r7, r3, #18
 80027a4:	d510      	bpl.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 80027a6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80027a8:	f431 7200 	bics.w	r2, r1, #512	@ 0x200
 80027ac:	d006      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x300>
 80027ae:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 80027b2:	4874      	ldr	r0, [pc, #464]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 80027b4:	f001 ff22 	bl	80045fc <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80027b8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80027ba:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80027bc:	4872      	ldr	r0, [pc, #456]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80027be:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80027c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027c4:	430a      	orrs	r2, r1
 80027c6:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80027c8:	02de      	lsls	r6, r3, #11
 80027ca:	d510      	bpl.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 80027cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80027ce:	f031 7280 	bics.w	r2, r1, #16777216	@ 0x1000000
 80027d2:	d006      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80027d4:	f240 11f5 	movw	r1, #501	@ 0x1f5
 80027d8:	486a      	ldr	r0, [pc, #424]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 80027da:	f001 ff0f 	bl	80045fc <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80027de:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80027e0:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80027e2:	4869      	ldr	r0, [pc, #420]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80027e4:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80027e6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80027ea:	430a      	orrs	r2, r1
 80027ec:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80027ee:	029d      	lsls	r5, r3, #10
 80027f0:	d510      	bpl.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 80027f2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80027f4:	f031 7200 	bics.w	r2, r1, #33554432	@ 0x2000000
 80027f8:	d006      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80027fa:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80027fe:	4861      	ldr	r0, [pc, #388]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 8002800:	f001 fefc 	bl	80045fc <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002804:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002806:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002808:	485f      	ldr	r0, [pc, #380]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800280a:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800280c:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8002810:	430a      	orrs	r2, r1
 8002812:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002814:	0258      	lsls	r0, r3, #9
 8002816:	d510      	bpl.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 8002818:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800281a:	f431 6280 	bics.w	r2, r1, #1024	@ 0x400
 800281e:	d006      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002820:	f240 2109 	movw	r1, #521	@ 0x209
 8002824:	4857      	ldr	r0, [pc, #348]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 8002826:	f001 fee9 	bl	80045fc <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800282a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800282c:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800282e:	4856      	ldr	r0, [pc, #344]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8002830:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002836:	430a      	orrs	r2, r1
 8002838:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800283a:	0219      	lsls	r1, r3, #8
 800283c:	d510      	bpl.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 800283e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002840:	f431 6200 	bics.w	r2, r1, #2048	@ 0x800
 8002844:	d006      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8002846:	f240 2113 	movw	r1, #531	@ 0x213
 800284a:	484e      	ldr	r0, [pc, #312]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800284c:	f001 fed6 	bl	80045fc <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002850:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002852:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002854:	484c      	ldr	r0, [pc, #304]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8002856:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002858:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800285c:	430a      	orrs	r2, r1
 800285e:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002860:	01da      	lsls	r2, r3, #7
 8002862:	d510      	bpl.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 8002864:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8002866:	f431 5200 	bics.w	r2, r1, #8192	@ 0x2000
 800286a:	d006      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x3be>
 800286c:	f240 211d 	movw	r1, #541	@ 0x21d
 8002870:	4844      	ldr	r0, [pc, #272]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 8002872:	f001 fec3 	bl	80045fc <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002876:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002878:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800287a:	4843      	ldr	r0, [pc, #268]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800287c:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800287e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002882:	430a      	orrs	r2, r1
 8002884:	6302      	str	r2, [r0, #48]	@ 0x30
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002886:	019b      	lsls	r3, r3, #6
 8002888:	d50f      	bpl.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 800288a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800288c:	f432 4300 	bics.w	r3, r2, #32768	@ 0x8000
 8002890:	d005      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8002892:	483c      	ldr	r0, [pc, #240]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 8002894:	f240 212a 	movw	r1, #554	@ 0x22a
 8002898:	f001 feb0 	bl	80045fc <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800289c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800289e:	493a      	ldr	r1, [pc, #232]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80028a0:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80028a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80028a6:	4313      	orrs	r3, r2
 80028a8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80028aa:	2000      	movs	r0, #0
}
 80028ac:	b003      	add	sp, #12
 80028ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80028b2:	4834      	ldr	r0, [pc, #208]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 80028b4:	2170      	movs	r1, #112	@ 0x70
 80028b6:	f001 fea1 	bl	80045fc <assert_failed>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	e607      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x12>
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028be:	4d33      	ldr	r5, [pc, #204]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80028c0:	682b      	ldr	r3, [r5, #0]
 80028c2:	05df      	lsls	r7, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 80028c4:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c8:	f53f ae1d 	bmi.w	8002506 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80028d4:	f7fd fcec 	bl	80002b0 <HAL_GetTick>
 80028d8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028da:	682b      	ldr	r3, [r5, #0]
 80028dc:	05d8      	lsls	r0, r3, #23
 80028de:	f53f ae12 	bmi.w	8002506 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e2:	f7fd fce5 	bl	80002b0 <HAL_GetTick>
 80028e6:	1bc0      	subs	r0, r0, r7
 80028e8:	2864      	cmp	r0, #100	@ 0x64
 80028ea:	d9f6      	bls.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x41e>
          return HAL_TIMEOUT;
 80028ec:	2003      	movs	r0, #3
}
 80028ee:	b003      	add	sp, #12
 80028f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80028f4:	4823      	ldr	r0, [pc, #140]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 80028f6:	2176      	movs	r1, #118	@ 0x76
 80028f8:	f001 fe80 	bl	80045fc <assert_failed>
 80028fc:	e5ee      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x20>
 80028fe:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 8002902:	f43f aeff 	beq.w	8002704 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8002906:	d914      	bls.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002908:	f021 0210 	bic.w	r2, r1, #16
 800290c:	f5b2 7fd0 	cmp.w	r2, #416	@ 0x1a0
 8002910:	f43f aef8 	beq.w	8002704 <HAL_RCCEx_PeriphCLKConfig+0x248>
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 8002914:	f240 115b 	movw	r1, #347	@ 0x15b
 8002918:	481a      	ldr	r0, [pc, #104]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800291a:	f001 fe6f 	bl	80045fc <assert_failed>
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800291e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	e6ef      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x248>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8002924:	21bc      	movs	r1, #188	@ 0xbc
 8002926:	4817      	ldr	r0, [pc, #92]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 8002928:	f001 fe68 	bl	80045fc <assert_failed>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800292c:	68a1      	ldr	r1, [r4, #8]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800292e:	6823      	ldr	r3, [r4, #0]
 8002930:	e624      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8002932:	f5b1 7fb8 	cmp.w	r1, #368	@ 0x170
 8002936:	f43f aee5 	beq.w	8002704 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800293a:	f5b1 7fc0 	cmp.w	r1, #384	@ 0x180
 800293e:	d1e9      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8002940:	e6e0      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x248>
        tickstart = HAL_GetTick();
 8002942:	f7fd fcb5 	bl	80002b0 <HAL_GetTick>
 8002946:	f04f 0902 	mov.w	r9, #2
 800294a:	4607      	mov	r7, r0
 800294c:	fa99 f3a9 	rbit	r3, r9
 8002950:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002954:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8002958:	fa99 f3a9 	rbit	r3, r9
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	fa05 f303 	lsl.w	r3, r5, r3
 8002964:	4213      	tst	r3, r2
 8002966:	f47f adf6 	bne.w	8002556 <HAL_RCCEx_PeriphCLKConfig+0x9a>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296a:	f7fd fca1 	bl	80002b0 <HAL_GetTick>
 800296e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002972:	1bc0      	subs	r0, r0, r7
 8002974:	4298      	cmp	r0, r3
 8002976:	d9e9      	bls.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x490>
 8002978:	e7b8      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x430>
 800297a:	f5b2 7fa0 	cmp.w	r2, #320	@ 0x140
 800297e:	d1c9      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8002980:	e6c0      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8002982:	bf00      	nop
 8002984:	080054f0 	.word	0x080054f0
 8002988:	40021000 	.word	0x40021000
 800298c:	40007000 	.word	0x40007000

08002990 <HAL_TIM_Base_Start>:
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002990:	4a32      	ldr	r2, [pc, #200]	@ (8002a5c <HAL_TIM_Base_Start+0xcc>)
 8002992:	6803      	ldr	r3, [r0, #0]
 8002994:	4293      	cmp	r3, r2
{
 8002996:	b510      	push	{r4, lr}
 8002998:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800299a:	d02b      	beq.n	80029f4 <HAL_TIM_Base_Start+0x64>
 800299c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a0:	d028      	beq.n	80029f4 <HAL_TIM_Base_Start+0x64>
 80029a2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d024      	beq.n	80029f4 <HAL_TIM_Base_Start+0x64>
 80029aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d020      	beq.n	80029f4 <HAL_TIM_Base_Start+0x64>
 80029b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d01c      	beq.n	80029f4 <HAL_TIM_Base_Start+0x64>
 80029ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80029be:	4293      	cmp	r3, r2
 80029c0:	d018      	beq.n	80029f4 <HAL_TIM_Base_Start+0x64>
 80029c2:	f502 3290 	add.w	r2, r2, #73728	@ 0x12000
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d014      	beq.n	80029f4 <HAL_TIM_Base_Start+0x64>
 80029ca:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d010      	beq.n	80029f4 <HAL_TIM_Base_Start+0x64>
 80029d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00c      	beq.n	80029f4 <HAL_TIM_Base_Start+0x64>
 80029da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80029de:	4293      	cmp	r3, r2
 80029e0:	d008      	beq.n	80029f4 <HAL_TIM_Base_Start+0x64>
 80029e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_TIM_Base_Start+0x64>
 80029ea:	481d      	ldr	r0, [pc, #116]	@ (8002a60 <HAL_TIM_Base_Start+0xd0>)
 80029ec:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 80029f0:	f001 fe04 	bl	80045fc <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f4:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d123      	bne.n	8002a44 <HAL_TIM_Base_Start+0xb4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029fc:	6823      	ldr	r3, [r4, #0]
 80029fe:	4a17      	ldr	r2, [pc, #92]	@ (8002a5c <HAL_TIM_Base_Start+0xcc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a02:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8002a04:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a08:	d01e      	beq.n	8002a48 <HAL_TIM_Base_Start+0xb8>
 8002a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a0e:	d01b      	beq.n	8002a48 <HAL_TIM_Base_Start+0xb8>
 8002a10:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d017      	beq.n	8002a48 <HAL_TIM_Base_Start+0xb8>
 8002a18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d013      	beq.n	8002a48 <HAL_TIM_Base_Start+0xb8>
 8002a20:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00f      	beq.n	8002a48 <HAL_TIM_Base_Start+0xb8>
 8002a28:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00b      	beq.n	8002a48 <HAL_TIM_Base_Start+0xb8>
 8002a30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d007      	beq.n	8002a48 <HAL_TIM_Base_Start+0xb8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    {
      __HAL_TIM_ENABLE(htim);
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8002a40:	2000      	movs	r0, #0
}
 8002a42:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a44:	2001      	movs	r0, #1
}
 8002a46:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a48:	6899      	ldr	r1, [r3, #8]
 8002a4a:	4a06      	ldr	r2, [pc, #24]	@ (8002a64 <HAL_TIM_Base_Start+0xd4>)
 8002a4c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4e:	2a06      	cmp	r2, #6
 8002a50:	d0f6      	beq.n	8002a40 <HAL_TIM_Base_Start+0xb0>
 8002a52:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8002a56:	d1ef      	bne.n	8002a38 <HAL_TIM_Base_Start+0xa8>
 8002a58:	e7f2      	b.n	8002a40 <HAL_TIM_Base_Start+0xb0>
 8002a5a:	bf00      	nop
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	0800552c 	.word	0x0800552c
 8002a64:	00010007 	.word	0x00010007

08002a68 <HAL_TIM_OnePulse_MspInit>:
/**
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop

08002a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a6c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a6e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	f000 81a1 	beq.w	8002dba <HAL_TIM_ConfigClockSource+0x34e>

  htim->State = HAL_TIM_STATE_BUSY;
 8002a78:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8002a84:	680b      	ldr	r3, [r1, #0]
 8002a86:	2b70      	cmp	r3, #112	@ 0x70
 8002a88:	4604      	mov	r4, r0
 8002a8a:	460d      	mov	r5, r1
 8002a8c:	f000 8230 	beq.w	8002ef0 <HAL_TIM_ConfigClockSource+0x484>
 8002a90:	d823      	bhi.n	8002ada <HAL_TIM_ConfigClockSource+0x6e>
 8002a92:	f023 0210 	bic.w	r2, r3, #16
 8002a96:	2a40      	cmp	r2, #64	@ 0x40
 8002a98:	f000 80d1 	beq.w	8002c3e <HAL_TIM_ConfigClockSource+0x1d2>
 8002a9c:	2b60      	cmp	r3, #96	@ 0x60
 8002a9e:	f000 818e 	beq.w	8002dbe <HAL_TIM_ConfigClockSource+0x352>
 8002aa2:	f033 0230 	bics.w	r2, r3, #48	@ 0x30
 8002aa6:	d16a      	bne.n	8002b7e <HAL_TIM_ConfigClockSource+0x112>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002aa8:	6822      	ldr	r2, [r4, #0]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aaa:	49aa      	ldr	r1, [pc, #680]	@ (8002d54 <HAL_TIM_ConfigClockSource+0x2e8>)
  tmpsmcr = htim->Instance->SMCR;
 8002aac:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aae:	4001      	ands	r1, r0
  htim->Instance->SMCR = tmpsmcr;
 8002ab0:	6091      	str	r1, [r2, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ab2:	2b40      	cmp	r3, #64	@ 0x40
 8002ab4:	f200 80cc 	bhi.w	8002c50 <HAL_TIM_ConfigClockSource+0x1e4>
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	f000 8154 	beq.w	8002d66 <HAL_TIM_ConfigClockSource+0x2fa>
 8002abe:	f200 814f 	bhi.w	8002d60 <HAL_TIM_ConfigClockSource+0x2f4>
 8002ac2:	f033 0110 	bics.w	r1, r3, #16
 8002ac6:	f000 814e 	beq.w	8002d66 <HAL_TIM_ConfigClockSource+0x2fa>
  HAL_StatusTypeDef status = HAL_OK;
 8002aca:	2001      	movs	r0, #1

    default:
      status = HAL_ERROR;
      break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002acc:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 8002ace:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002ad0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002ad4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c

  return status;
}
 8002ad8:	bd38      	pop	{r3, r4, r5, pc}
 8002ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ade:	f000 8103 	beq.w	8002ce8 <HAL_TIM_ConfigClockSource+0x27c>
 8002ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ae6:	d1dc      	bne.n	8002aa2 <HAL_TIM_ConfigClockSource+0x36>
  tmpsmcr = htim->Instance->SMCR;
 8002ae8:	6802      	ldr	r2, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aea:	4b9a      	ldr	r3, [pc, #616]	@ (8002d54 <HAL_TIM_ConfigClockSource+0x2e8>)
  tmpsmcr = htim->Instance->SMCR;
 8002aec:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aee:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 8002af0:	6093      	str	r3, [r2, #8]
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8002af2:	4b99      	ldr	r3, [pc, #612]	@ (8002d58 <HAL_TIM_ConfigClockSource+0x2ec>)
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d017      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0xbc>
 8002af8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002afc:	d014      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0xbc>
 8002afe:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d010      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0xbc>
 8002b06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d00c      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0xbc>
 8002b0e:	f503 3396 	add.w	r3, r3, #76800	@ 0x12c00
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d008      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0xbc>
 8002b16:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d004      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0xbc>
 8002b1e:	488f      	ldr	r0, [pc, #572]	@ (8002d5c <HAL_TIM_ConfigClockSource+0x2f0>)
 8002b20:	f241 519d 	movw	r1, #5533	@ 0x159d
 8002b24:	f001 fd6a 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002b28:	68ab      	ldr	r3, [r5, #8]
 8002b2a:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
 8002b2e:	d004      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0xce>
 8002b30:	488a      	ldr	r0, [pc, #552]	@ (8002d5c <HAL_TIM_ConfigClockSource+0x2f0>)
 8002b32:	f44f 51ad 	mov.w	r1, #5536	@ 0x15a0
 8002b36:	f001 fd61 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002b3a:	686b      	ldr	r3, [r5, #4]
 8002b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b40:	d009      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0xea>
 8002b42:	f033 0202 	bics.w	r2, r3, #2
 8002b46:	d006      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0xea>
 8002b48:	2b0a      	cmp	r3, #10
 8002b4a:	d004      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0xea>
 8002b4c:	4883      	ldr	r0, [pc, #524]	@ (8002d5c <HAL_TIM_ConfigClockSource+0x2f0>)
 8002b4e:	f241 51a1 	movw	r1, #5537	@ 0x15a1
 8002b52:	f001 fd53 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002b56:	68e8      	ldr	r0, [r5, #12]
 8002b58:	280f      	cmp	r0, #15
 8002b5a:	f200 81d6 	bhi.w	8002f0a <HAL_TIM_ConfigClockSource+0x49e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b5e:	6822      	ldr	r2, [r4, #0]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b60:	e9d5 5301 	ldrd	r5, r3, [r5, #4]
 8002b64:	6891      	ldr	r1, [r2, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b66:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b68:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
 8002b6c:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b6e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b72:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b74:	6893      	ldr	r3, [r2, #8]
 8002b76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b7a:	6093      	str	r3, [r2, #8]
      break;
 8002b7c:	e11b      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8002b7e:	4877      	ldr	r0, [pc, #476]	@ (8002d5c <HAL_TIM_ConfigClockSource+0x2f0>)
 8002b80:	f241 5172 	movw	r1, #5490	@ 0x1572
 8002b84:	f001 fd3a 	bl	80045fc <assert_failed>
  tmpsmcr = htim->Instance->SMCR;
 8002b88:	6822      	ldr	r2, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 8002b8a:	682b      	ldr	r3, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002b8c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b8e:	4971      	ldr	r1, [pc, #452]	@ (8002d54 <HAL_TIM_ConfigClockSource+0x2e8>)
  switch (sClockSourceConfig->ClockSource)
 8002b90:	2b60      	cmp	r3, #96	@ 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b92:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 8002b96:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002b98:	f000 8116 	beq.w	8002dc8 <HAL_TIM_ConfigClockSource+0x35c>
 8002b9c:	f240 815d 	bls.w	8002e5a <HAL_TIM_ConfigClockSource+0x3ee>
 8002ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ba4:	f000 80a5 	beq.w	8002cf2 <HAL_TIM_ConfigClockSource+0x286>
 8002ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bac:	d0a1      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x86>
 8002bae:	2b70      	cmp	r3, #112	@ 0x70
 8002bb0:	d18b      	bne.n	8002aca <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8002bb2:	4b69      	ldr	r3, [pc, #420]	@ (8002d58 <HAL_TIM_ConfigClockSource+0x2ec>)
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d017      	beq.n	8002be8 <HAL_TIM_ConfigClockSource+0x17c>
 8002bb8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002bbc:	d014      	beq.n	8002be8 <HAL_TIM_ConfigClockSource+0x17c>
 8002bbe:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d010      	beq.n	8002be8 <HAL_TIM_ConfigClockSource+0x17c>
 8002bc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d00c      	beq.n	8002be8 <HAL_TIM_ConfigClockSource+0x17c>
 8002bce:	f503 3396 	add.w	r3, r3, #76800	@ 0x12c00
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d008      	beq.n	8002be8 <HAL_TIM_ConfigClockSource+0x17c>
 8002bd6:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d004      	beq.n	8002be8 <HAL_TIM_ConfigClockSource+0x17c>
 8002bde:	485f      	ldr	r0, [pc, #380]	@ (8002d5c <HAL_TIM_ConfigClockSource+0x2f0>)
 8002be0:	f241 5185 	movw	r1, #5509	@ 0x1585
 8002be4:	f001 fd0a 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002be8:	68ab      	ldr	r3, [r5, #8]
 8002bea:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
 8002bee:	d004      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x18e>
 8002bf0:	485a      	ldr	r0, [pc, #360]	@ (8002d5c <HAL_TIM_ConfigClockSource+0x2f0>)
 8002bf2:	f241 5188 	movw	r1, #5512	@ 0x1588
 8002bf6:	f001 fd01 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002bfa:	686b      	ldr	r3, [r5, #4]
 8002bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c00:	d009      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x1aa>
 8002c02:	f033 0202 	bics.w	r2, r3, #2
 8002c06:	d006      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x1aa>
 8002c08:	2b0a      	cmp	r3, #10
 8002c0a:	d004      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x1aa>
 8002c0c:	4853      	ldr	r0, [pc, #332]	@ (8002d5c <HAL_TIM_ConfigClockSource+0x2f0>)
 8002c0e:	f241 5189 	movw	r1, #5513	@ 0x1589
 8002c12:	f001 fcf3 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002c16:	68e8      	ldr	r0, [r5, #12]
 8002c18:	280f      	cmp	r0, #15
 8002c1a:	f200 817d 	bhi.w	8002f18 <HAL_TIM_ConfigClockSource+0x4ac>
      TIM_ETR_SetConfig(htim->Instance,
 8002c1e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002c20:	e9d5 5301 	ldrd	r5, r3, [r5, #4]
 8002c24:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c26:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c28:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
 8002c2c:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c2e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 8002c32:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002c34:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c36:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002c3a:	6093      	str	r3, [r2, #8]
      break;
 8002c3c:	e0bb      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
  tmpsmcr = htim->Instance->SMCR;
 8002c3e:	6802      	ldr	r2, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c40:	4944      	ldr	r1, [pc, #272]	@ (8002d54 <HAL_TIM_ConfigClockSource+0x2e8>)
  tmpsmcr = htim->Instance->SMCR;
 8002c42:	6890      	ldr	r0, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002c44:	2b40      	cmp	r3, #64	@ 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c46:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 8002c4a:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002c4c:	f000 8108 	beq.w	8002e60 <HAL_TIM_ConfigClockSource+0x3f4>
 8002c50:	2b50      	cmp	r3, #80	@ 0x50
 8002c52:	f47f af3a 	bne.w	8002aca <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002c56:	4b40      	ldr	r3, [pc, #256]	@ (8002d58 <HAL_TIM_ConfigClockSource+0x2ec>)
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d01b      	beq.n	8002c94 <HAL_TIM_ConfigClockSource+0x228>
 8002c5c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002c60:	d018      	beq.n	8002c94 <HAL_TIM_ConfigClockSource+0x228>
 8002c62:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d014      	beq.n	8002c94 <HAL_TIM_ConfigClockSource+0x228>
 8002c6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d010      	beq.n	8002c94 <HAL_TIM_ConfigClockSource+0x228>
 8002c72:	f503 3396 	add.w	r3, r3, #76800	@ 0x12c00
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d00c      	beq.n	8002c94 <HAL_TIM_ConfigClockSource+0x228>
 8002c7a:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d008      	beq.n	8002c94 <HAL_TIM_ConfigClockSource+0x228>
 8002c82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d004      	beq.n	8002c94 <HAL_TIM_ConfigClockSource+0x228>
 8002c8a:	4834      	ldr	r0, [pc, #208]	@ (8002d5c <HAL_TIM_ConfigClockSource+0x2f0>)
 8002c8c:	f241 51b1 	movw	r1, #5553	@ 0x15b1
 8002c90:	f001 fcb4 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002c94:	686b      	ldr	r3, [r5, #4]
 8002c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c9a:	d009      	beq.n	8002cb0 <HAL_TIM_ConfigClockSource+0x244>
 8002c9c:	f033 0202 	bics.w	r2, r3, #2
 8002ca0:	d006      	beq.n	8002cb0 <HAL_TIM_ConfigClockSource+0x244>
 8002ca2:	2b0a      	cmp	r3, #10
 8002ca4:	d004      	beq.n	8002cb0 <HAL_TIM_ConfigClockSource+0x244>
 8002ca6:	482d      	ldr	r0, [pc, #180]	@ (8002d5c <HAL_TIM_ConfigClockSource+0x2f0>)
 8002ca8:	f241 51b4 	movw	r1, #5556	@ 0x15b4
 8002cac:	f001 fca6 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002cb0:	68e8      	ldr	r0, [r5, #12]
 8002cb2:	280f      	cmp	r0, #15
 8002cb4:	f200 813e 	bhi.w	8002f34 <HAL_TIM_ConfigClockSource+0x4c8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb8:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cba:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8002cbc:	6a1a      	ldr	r2, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cbe:	f022 020a 	bic.w	r2, r2, #10
  tmpccer |= TIM_ICPolarity;
 8002cc2:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cc4:	6a1a      	ldr	r2, [r3, #32]
 8002cc6:	f022 0201 	bic.w	r2, r2, #1
 8002cca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ccc:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cce:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cd2:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd8:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8002cda:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cdc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ce0:	f042 0257 	orr.w	r2, r2, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8002ce4:	609a      	str	r2, [r3, #8]
}
 8002ce6:	e066      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
  tmpsmcr = htim->Instance->SMCR;
 8002ce8:	6802      	ldr	r2, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cea:	4b1a      	ldr	r3, [pc, #104]	@ (8002d54 <HAL_TIM_ConfigClockSource+0x2e8>)
  tmpsmcr = htim->Instance->SMCR;
 8002cec:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cee:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 8002cf0:	6093      	str	r3, [r2, #8]
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002cf2:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <HAL_TIM_ConfigClockSource+0x2ec>)
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d05e      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
 8002cf8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002cfc:	d05b      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
 8002cfe:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d057      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
 8002d06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d053      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
 8002d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d04f      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
 8002d16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d04b      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
 8002d1e:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d047      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
 8002d26:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d043      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
 8002d2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d03f      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
 8002d36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d03b      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
 8002d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d037      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
 8002d46:	4805      	ldr	r0, [pc, #20]	@ (8002d5c <HAL_TIM_ConfigClockSource+0x2f0>)
 8002d48:	f241 517e 	movw	r1, #5502	@ 0x157e
 8002d4c:	f001 fc56 	bl	80045fc <assert_failed>
 8002d50:	e031      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
 8002d52:	bf00      	nop
 8002d54:	fffe0088 	.word	0xfffe0088
 8002d58:	40012c00 	.word	0x40012c00
 8002d5c:	0800552c 	.word	0x0800552c
  switch (sClockSourceConfig->ClockSource)
 8002d60:	2b30      	cmp	r3, #48	@ 0x30
 8002d62:	f47f aeb2 	bne.w	8002aca <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8002d66:	4977      	ldr	r1, [pc, #476]	@ (8002f44 <HAL_TIM_ConfigClockSource+0x4d8>)
 8002d68:	428a      	cmp	r2, r1
 8002d6a:	d01d      	beq.n	8002da8 <HAL_TIM_ConfigClockSource+0x33c>
 8002d6c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002d70:	d01a      	beq.n	8002da8 <HAL_TIM_ConfigClockSource+0x33c>
 8002d72:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 8002d76:	428a      	cmp	r2, r1
 8002d78:	d016      	beq.n	8002da8 <HAL_TIM_ConfigClockSource+0x33c>
 8002d7a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8002d7e:	428a      	cmp	r2, r1
 8002d80:	d012      	beq.n	8002da8 <HAL_TIM_ConfigClockSource+0x33c>
 8002d82:	f501 3196 	add.w	r1, r1, #76800	@ 0x12c00
 8002d86:	428a      	cmp	r2, r1
 8002d88:	d00e      	beq.n	8002da8 <HAL_TIM_ConfigClockSource+0x33c>
 8002d8a:	f501 6140 	add.w	r1, r1, #3072	@ 0xc00
 8002d8e:	428a      	cmp	r2, r1
 8002d90:	d00a      	beq.n	8002da8 <HAL_TIM_ConfigClockSource+0x33c>
 8002d92:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8002d96:	428a      	cmp	r2, r1
 8002d98:	d006      	beq.n	8002da8 <HAL_TIM_ConfigClockSource+0x33c>
 8002d9a:	486b      	ldr	r0, [pc, #428]	@ (8002f48 <HAL_TIM_ConfigClockSource+0x4dc>)
 8002d9c:	f241 51e4 	movw	r1, #5604	@ 0x15e4
 8002da0:	f001 fc2c 	bl	80045fc <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002da4:	6822      	ldr	r2, [r4, #0]
 8002da6:	682b      	ldr	r3, [r5, #0]
  tmpsmcr = TIMx->SMCR;
 8002da8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002daa:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dae:	430b      	orrs	r3, r1
 8002db0:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8002db4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002db6:	2000      	movs	r0, #0
 8002db8:	e688      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x60>
  __HAL_LOCK(htim);
 8002dba:	2002      	movs	r0, #2
}
 8002dbc:	bd38      	pop	{r3, r4, r5, pc}
  tmpsmcr = htim->Instance->SMCR;
 8002dbe:	6802      	ldr	r2, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc0:	4b62      	ldr	r3, [pc, #392]	@ (8002f4c <HAL_TIM_ConfigClockSource+0x4e0>)
  tmpsmcr = htim->Instance->SMCR;
 8002dc2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc4:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 8002dc6:	6093      	str	r3, [r2, #8]
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002dc8:	4b5e      	ldr	r3, [pc, #376]	@ (8002f44 <HAL_TIM_ConfigClockSource+0x4d8>)
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d01b      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x39a>
 8002dce:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002dd2:	d018      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x39a>
 8002dd4:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d014      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x39a>
 8002ddc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d010      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x39a>
 8002de4:	f503 3396 	add.w	r3, r3, #76800	@ 0x12c00
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d00c      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x39a>
 8002dec:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d008      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x39a>
 8002df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d004      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x39a>
 8002dfc:	4852      	ldr	r0, [pc, #328]	@ (8002f48 <HAL_TIM_ConfigClockSource+0x4dc>)
 8002dfe:	f241 51c1 	movw	r1, #5569	@ 0x15c1
 8002e02:	f001 fbfb 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002e06:	686b      	ldr	r3, [r5, #4]
 8002e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e0c:	d009      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x3b6>
 8002e0e:	f033 0202 	bics.w	r2, r3, #2
 8002e12:	d006      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x3b6>
 8002e14:	2b0a      	cmp	r3, #10
 8002e16:	d004      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x3b6>
 8002e18:	484b      	ldr	r0, [pc, #300]	@ (8002f48 <HAL_TIM_ConfigClockSource+0x4dc>)
 8002e1a:	f241 51c4 	movw	r1, #5572	@ 0x15c4
 8002e1e:	f001 fbed 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002e22:	68e8      	ldr	r0, [r5, #12]
 8002e24:	280f      	cmp	r0, #15
 8002e26:	d87e      	bhi.n	8002f26 <HAL_TIM_ConfigClockSource+0x4ba>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e28:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e2a:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8002e2c:	6a1a      	ldr	r2, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e2e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e32:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e36:	6a19      	ldr	r1, [r3, #32]
 8002e38:	f021 0110 	bic.w	r1, r1, #16
 8002e3c:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e3e:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e40:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e44:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002e48:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e4a:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8002e4c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e4e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e52:	f042 0267 	orr.w	r2, r2, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8002e56:	609a      	str	r2, [r3, #8]
}
 8002e58:	e7ad      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
  switch (sClockSourceConfig->ClockSource)
 8002e5a:	2b40      	cmp	r3, #64	@ 0x40
 8002e5c:	f47f ae29 	bne.w	8002ab2 <HAL_TIM_ConfigClockSource+0x46>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002e60:	4b38      	ldr	r3, [pc, #224]	@ (8002f44 <HAL_TIM_ConfigClockSource+0x4d8>)
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d01b      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x432>
 8002e66:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002e6a:	d018      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x432>
 8002e6c:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d014      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x432>
 8002e74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d010      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x432>
 8002e7c:	f503 3396 	add.w	r3, r3, #76800	@ 0x12c00
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d00c      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x432>
 8002e84:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d008      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x432>
 8002e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d004      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x432>
 8002e94:	482c      	ldr	r0, [pc, #176]	@ (8002f48 <HAL_TIM_ConfigClockSource+0x4dc>)
 8002e96:	f241 51d1 	movw	r1, #5585	@ 0x15d1
 8002e9a:	f001 fbaf 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002e9e:	686b      	ldr	r3, [r5, #4]
 8002ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ea4:	d009      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x44e>
 8002ea6:	f033 0202 	bics.w	r2, r3, #2
 8002eaa:	d006      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x44e>
 8002eac:	2b0a      	cmp	r3, #10
 8002eae:	d004      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x44e>
 8002eb0:	4825      	ldr	r0, [pc, #148]	@ (8002f48 <HAL_TIM_ConfigClockSource+0x4dc>)
 8002eb2:	f241 51d4 	movw	r1, #5588	@ 0x15d4
 8002eb6:	f001 fba1 	bl	80045fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002eba:	68e8      	ldr	r0, [r5, #12]
 8002ebc:	280f      	cmp	r0, #15
 8002ebe:	d81d      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x490>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec0:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ec2:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8002ec4:	6a1a      	ldr	r2, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ec6:	f022 020a 	bic.w	r2, r2, #10
  tmpccer |= TIM_ICPolarity;
 8002eca:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ecc:	6a1a      	ldr	r2, [r3, #32]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ed6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eda:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ee0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8002ee2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ee4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ee8:	f042 0247 	orr.w	r2, r2, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8002eec:	609a      	str	r2, [r3, #8]
}
 8002eee:	e762      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x34a>
  tmpsmcr = htim->Instance->SMCR;
 8002ef0:	6802      	ldr	r2, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ef2:	4b16      	ldr	r3, [pc, #88]	@ (8002f4c <HAL_TIM_ConfigClockSource+0x4e0>)
  tmpsmcr = htim->Instance->SMCR;
 8002ef4:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ef6:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 8002ef8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002efa:	e65a      	b.n	8002bb2 <HAL_TIM_ConfigClockSource+0x146>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002efc:	4812      	ldr	r0, [pc, #72]	@ (8002f48 <HAL_TIM_ConfigClockSource+0x4dc>)
 8002efe:	f241 51d5 	movw	r1, #5589	@ 0x15d5
 8002f02:	f001 fb7b 	bl	80045fc <assert_failed>
                               sClockSourceConfig->ClockFilter);
 8002f06:	68e8      	ldr	r0, [r5, #12]
 8002f08:	e7da      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x454>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002f0a:	480f      	ldr	r0, [pc, #60]	@ (8002f48 <HAL_TIM_ConfigClockSource+0x4dc>)
 8002f0c:	f241 51a2 	movw	r1, #5538	@ 0x15a2
 8002f10:	f001 fb74 	bl	80045fc <assert_failed>
                        sClockSourceConfig->ClockFilter);
 8002f14:	68e8      	ldr	r0, [r5, #12]
 8002f16:	e622      	b.n	8002b5e <HAL_TIM_ConfigClockSource+0xf2>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002f18:	480b      	ldr	r0, [pc, #44]	@ (8002f48 <HAL_TIM_ConfigClockSource+0x4dc>)
 8002f1a:	f241 518a 	movw	r1, #5514	@ 0x158a
 8002f1e:	f001 fb6d 	bl	80045fc <assert_failed>
                        sClockSourceConfig->ClockFilter);
 8002f22:	68e8      	ldr	r0, [r5, #12]
 8002f24:	e67b      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x1b2>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002f26:	4808      	ldr	r0, [pc, #32]	@ (8002f48 <HAL_TIM_ConfigClockSource+0x4dc>)
 8002f28:	f241 51c5 	movw	r1, #5573	@ 0x15c5
 8002f2c:	f001 fb66 	bl	80045fc <assert_failed>
                               sClockSourceConfig->ClockFilter);
 8002f30:	68e8      	ldr	r0, [r5, #12]
 8002f32:	e779      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x3bc>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002f34:	4804      	ldr	r0, [pc, #16]	@ (8002f48 <HAL_TIM_ConfigClockSource+0x4dc>)
 8002f36:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 8002f3a:	f001 fb5f 	bl	80045fc <assert_failed>
                               sClockSourceConfig->ClockFilter);
 8002f3e:	68e8      	ldr	r0, [r5, #12]
 8002f40:	e6ba      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x24c>
 8002f42:	bf00      	nop
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	0800552c 	.word	0x0800552c
 8002f4c:	fffe0088 	.word	0xfffe0088

08002f50 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f50:	4a34      	ldr	r2, [pc, #208]	@ (8003024 <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 8002f52:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f54:	4290      	cmp	r0, r2
{
 8002f56:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f58:	d028      	beq.n	8002fac <TIM_Base_SetConfig+0x5c>
 8002f5a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002f5e:	d044      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002f60:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002f64:	4290      	cmp	r0, r2
 8002f66:	d040      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002f68:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f6c:	4290      	cmp	r0, r2
 8002f6e:	d03c      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002f70:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8002f74:	4290      	cmp	r0, r2
 8002f76:	d04a      	beq.n	800300e <TIM_Base_SetConfig+0xbe>
 8002f78:	f502 52e0 	add.w	r2, r2, #7168	@ 0x1c00
 8002f7c:	4290      	cmp	r0, r2
 8002f7e:	d015      	beq.n	8002fac <TIM_Base_SetConfig+0x5c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f80:	f5a2 5280 	sub.w	r2, r2, #4096	@ 0x1000
 8002f84:	4290      	cmp	r0, r2
 8002f86:	d047      	beq.n	8003018 <TIM_Base_SetConfig+0xc8>
 8002f88:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f8c:	4290      	cmp	r0, r2
 8002f8e:	d043      	beq.n	8003018 <TIM_Base_SetConfig+0xc8>
 8002f90:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f94:	4290      	cmp	r0, r2
 8002f96:	d03f      	beq.n	8003018 <TIM_Base_SetConfig+0xc8>
  TIMx->PSC = Structure->Prescaler;
 8002f98:	680a      	ldr	r2, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f9a:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f9c:	6949      	ldr	r1, [r1, #20]
 8002f9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fa2:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002fa4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fa6:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002fa8:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002faa:	e012      	b.n	8002fd2 <TIM_Base_SetConfig+0x82>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fac:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fae:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002fb4:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fba:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fbc:	694a      	ldr	r2, [r1, #20]
 8002fbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fc2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002fc4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fc6:	688b      	ldr	r3, [r1, #8]
 8002fc8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002fca:	680b      	ldr	r3, [r1, #0]
 8002fcc:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002fce:	690b      	ldr	r3, [r1, #16]
 8002fd0:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fd6:	6903      	ldr	r3, [r0, #16]
 8002fd8:	07db      	lsls	r3, r3, #31
 8002fda:	d503      	bpl.n	8002fe4 <TIM_Base_SetConfig+0x94>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fdc:	6903      	ldr	r3, [r0, #16]
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	6103      	str	r3, [r0, #16]
}
 8002fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fe8:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002fea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fec:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ff2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff8:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ffa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ffc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003000:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003002:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8003004:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8003006:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003008:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800300a:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800300c:	e7e1      	b.n	8002fd2 <TIM_Base_SetConfig+0x82>
    tmpcr1 |= Structure->CounterMode;
 800300e:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003010:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003016:	e7cd      	b.n	8002fb4 <TIM_Base_SetConfig+0x64>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003018:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800301a:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 800301c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003020:	4323      	orrs	r3, r4
 8003022:	e7cc      	b.n	8002fbe <TIM_Base_SetConfig+0x6e>
 8003024:	40012c00 	.word	0x40012c00

08003028 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003028:	2800      	cmp	r0, #0
 800302a:	f000 80a5 	beq.w	8003178 <HAL_TIM_Base_Init+0x150>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800302e:	6803      	ldr	r3, [r0, #0]
 8003030:	4a52      	ldr	r2, [pc, #328]	@ (800317c <HAL_TIM_Base_Init+0x154>)
 8003032:	4293      	cmp	r3, r2
{
 8003034:	b510      	push	{r4, lr}
 8003036:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003038:	d02b      	beq.n	8003092 <HAL_TIM_Base_Init+0x6a>
 800303a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800303e:	d028      	beq.n	8003092 <HAL_TIM_Base_Init+0x6a>
 8003040:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003044:	4293      	cmp	r3, r2
 8003046:	d024      	beq.n	8003092 <HAL_TIM_Base_Init+0x6a>
 8003048:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800304c:	4293      	cmp	r3, r2
 800304e:	d020      	beq.n	8003092 <HAL_TIM_Base_Init+0x6a>
 8003050:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003054:	4293      	cmp	r3, r2
 8003056:	d01c      	beq.n	8003092 <HAL_TIM_Base_Init+0x6a>
 8003058:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800305c:	4293      	cmp	r3, r2
 800305e:	d018      	beq.n	8003092 <HAL_TIM_Base_Init+0x6a>
 8003060:	f502 3290 	add.w	r2, r2, #73728	@ 0x12000
 8003064:	4293      	cmp	r3, r2
 8003066:	d014      	beq.n	8003092 <HAL_TIM_Base_Init+0x6a>
 8003068:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800306c:	4293      	cmp	r3, r2
 800306e:	d010      	beq.n	8003092 <HAL_TIM_Base_Init+0x6a>
 8003070:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003074:	4293      	cmp	r3, r2
 8003076:	d00c      	beq.n	8003092 <HAL_TIM_Base_Init+0x6a>
 8003078:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800307c:	4293      	cmp	r3, r2
 800307e:	d008      	beq.n	8003092 <HAL_TIM_Base_Init+0x6a>
 8003080:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_TIM_Base_Init+0x6a>
 8003088:	483d      	ldr	r0, [pc, #244]	@ (8003180 <HAL_TIM_Base_Init+0x158>)
 800308a:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800308e:	f001 fab5 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003092:	68a3      	ldr	r3, [r4, #8]
 8003094:	f033 0210 	bics.w	r2, r3, #16
 8003098:	d00a      	beq.n	80030b0 <HAL_TIM_Base_Init+0x88>
 800309a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800309e:	2a20      	cmp	r2, #32
 80030a0:	d006      	beq.n	80030b0 <HAL_TIM_Base_Init+0x88>
 80030a2:	2b40      	cmp	r3, #64	@ 0x40
 80030a4:	d004      	beq.n	80030b0 <HAL_TIM_Base_Init+0x88>
 80030a6:	4836      	ldr	r0, [pc, #216]	@ (8003180 <HAL_TIM_Base_Init+0x158>)
 80030a8:	f240 111b 	movw	r1, #283	@ 0x11b
 80030ac:	f001 faa6 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80030b0:	6923      	ldr	r3, [r4, #16]
 80030b2:	f433 7280 	bics.w	r2, r3, #256	@ 0x100
 80030b6:	d136      	bne.n	8003126 <HAL_TIM_Base_Init+0xfe>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80030b8:	6822      	ldr	r2, [r4, #0]
 80030ba:	68e3      	ldr	r3, [r4, #12]
 80030bc:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80030c0:	d03e      	beq.n	8003140 <HAL_TIM_Base_Init+0x118>
 80030c2:	3b01      	subs	r3, #1
 80030c4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d83b      	bhi.n	8003144 <HAL_TIM_Base_Init+0x11c>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80030cc:	69a3      	ldr	r3, [r4, #24]
 80030ce:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 80030d2:	d140      	bne.n	8003156 <HAL_TIM_Base_Init+0x12e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80030d4:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80030d8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d045      	beq.n	800316c <HAL_TIM_Base_Init+0x144>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e0:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80030e2:	2302      	movs	r3, #2
 80030e4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e8:	f851 0b04 	ldr.w	r0, [r1], #4
 80030ec:	f7ff ff30 	bl	8002f50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f0:	2301      	movs	r3, #1
 80030f2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80030fa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80030fe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003102:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003106:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800310a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003112:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003116:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800311a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800311e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003122:	2000      	movs	r0, #0
}
 8003124:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003126:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800312a:	d0c5      	beq.n	80030b8 <HAL_TIM_Base_Init+0x90>
 800312c:	4814      	ldr	r0, [pc, #80]	@ (8003180 <HAL_TIM_Base_Init+0x158>)
 800312e:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8003132:	f001 fa63 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8003136:	6822      	ldr	r2, [r4, #0]
 8003138:	68e3      	ldr	r3, [r4, #12]
 800313a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800313e:	d1c0      	bne.n	80030c2 <HAL_TIM_Base_Init+0x9a>
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1c3      	bne.n	80030cc <HAL_TIM_Base_Init+0xa4>
 8003144:	480e      	ldr	r0, [pc, #56]	@ (8003180 <HAL_TIM_Base_Init+0x158>)
 8003146:	f240 111d 	movw	r1, #285	@ 0x11d
 800314a:	f001 fa57 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800314e:	69a3      	ldr	r3, [r4, #24]
 8003150:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 8003154:	d0be      	beq.n	80030d4 <HAL_TIM_Base_Init+0xac>
 8003156:	480a      	ldr	r0, [pc, #40]	@ (8003180 <HAL_TIM_Base_Init+0x158>)
 8003158:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 800315c:	f001 fa4e 	bl	80045fc <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003160:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003164:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1b9      	bne.n	80030e0 <HAL_TIM_Base_Init+0xb8>
    htim->Lock = HAL_UNLOCKED;
 800316c:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003170:	4620      	mov	r0, r4
 8003172:	f001 fbb9 	bl	80048e8 <HAL_TIM_Base_MspInit>
 8003176:	e7b3      	b.n	80030e0 <HAL_TIM_Base_Init+0xb8>
    return HAL_ERROR;
 8003178:	2001      	movs	r0, #1
}
 800317a:	4770      	bx	lr
 800317c:	40012c00 	.word	0x40012c00
 8003180:	0800552c 	.word	0x0800552c

08003184 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 8003184:	2800      	cmp	r0, #0
 8003186:	f000 80a6 	beq.w	80032d6 <HAL_TIM_OnePulse_Init+0x152>
{
 800318a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800318c:	4a53      	ldr	r2, [pc, #332]	@ (80032dc <HAL_TIM_OnePulse_Init+0x158>)
 800318e:	6803      	ldr	r3, [r0, #0]
 8003190:	4293      	cmp	r3, r2
 8003192:	460d      	mov	r5, r1
 8003194:	4604      	mov	r4, r0
 8003196:	d02b      	beq.n	80031f0 <HAL_TIM_OnePulse_Init+0x6c>
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800319c:	d028      	beq.n	80031f0 <HAL_TIM_OnePulse_Init+0x6c>
 800319e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d024      	beq.n	80031f0 <HAL_TIM_OnePulse_Init+0x6c>
 80031a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d020      	beq.n	80031f0 <HAL_TIM_OnePulse_Init+0x6c>
 80031ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01c      	beq.n	80031f0 <HAL_TIM_OnePulse_Init+0x6c>
 80031b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d018      	beq.n	80031f0 <HAL_TIM_OnePulse_Init+0x6c>
 80031be:	f502 3290 	add.w	r2, r2, #73728	@ 0x12000
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d014      	beq.n	80031f0 <HAL_TIM_OnePulse_Init+0x6c>
 80031c6:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d010      	beq.n	80031f0 <HAL_TIM_OnePulse_Init+0x6c>
 80031ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00c      	beq.n	80031f0 <HAL_TIM_OnePulse_Init+0x6c>
 80031d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031da:	4293      	cmp	r3, r2
 80031dc:	d008      	beq.n	80031f0 <HAL_TIM_OnePulse_Init+0x6c>
 80031de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d004      	beq.n	80031f0 <HAL_TIM_OnePulse_Init+0x6c>
 80031e6:	483e      	ldr	r0, [pc, #248]	@ (80032e0 <HAL_TIM_OnePulse_Init+0x15c>)
 80031e8:	f44f 6126 	mov.w	r1, #2656	@ 0xa60
 80031ec:	f001 fa06 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80031f0:	68a3      	ldr	r3, [r4, #8]
 80031f2:	f033 0210 	bics.w	r2, r3, #16
 80031f6:	d00a      	beq.n	800320e <HAL_TIM_OnePulse_Init+0x8a>
 80031f8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80031fc:	2a20      	cmp	r2, #32
 80031fe:	d006      	beq.n	800320e <HAL_TIM_OnePulse_Init+0x8a>
 8003200:	2b40      	cmp	r3, #64	@ 0x40
 8003202:	d004      	beq.n	800320e <HAL_TIM_OnePulse_Init+0x8a>
 8003204:	4836      	ldr	r0, [pc, #216]	@ (80032e0 <HAL_TIM_OnePulse_Init+0x15c>)
 8003206:	f640 2161 	movw	r1, #2657	@ 0xa61
 800320a:	f001 f9f7 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800320e:	6923      	ldr	r3, [r4, #16]
 8003210:	f433 7280 	bics.w	r2, r3, #256	@ 0x100
 8003214:	d139      	bne.n	800328a <HAL_TIM_OnePulse_Init+0x106>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 8003216:	f035 0308 	bics.w	r3, r5, #8
 800321a:	d004      	beq.n	8003226 <HAL_TIM_OnePulse_Init+0xa2>
 800321c:	4830      	ldr	r0, [pc, #192]	@ (80032e0 <HAL_TIM_OnePulse_Init+0x15c>)
 800321e:	f640 2163 	movw	r1, #2659	@ 0xa63
 8003222:	f001 f9eb 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8003226:	6822      	ldr	r2, [r4, #0]
 8003228:	68e3      	ldr	r3, [r4, #12]
 800322a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800322e:	d046      	beq.n	80032be <HAL_TIM_OnePulse_Init+0x13a>
 8003230:	3b01      	subs	r3, #1
 8003232:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003236:	4293      	cmp	r3, r2
 8003238:	d843      	bhi.n	80032c2 <HAL_TIM_OnePulse_Init+0x13e>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800323a:	69a3      	ldr	r3, [r4, #24]
 800323c:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 8003240:	d12c      	bne.n	800329c <HAL_TIM_OnePulse_Init+0x118>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003242:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003246:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800324a:	b393      	cbz	r3, 80032b2 <HAL_TIM_OnePulse_Init+0x12e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800324c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800324e:	2302      	movs	r3, #2
 8003250:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003254:	f851 0b04 	ldr.w	r0, [r1], #4
 8003258:	f7ff fe7a 	bl	8002f50 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800325c:	6802      	ldr	r2, [r0, #0]
 800325e:	f022 0208 	bic.w	r2, r2, #8
 8003262:	6002      	str	r2, [r0, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8003264:	6802      	ldr	r2, [r0, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003266:	2301      	movs	r3, #1
  htim->Instance->CR1 |= OnePulseMode;
 8003268:	432a      	orrs	r2, r5
 800326a:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 800326c:	2100      	movs	r1, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800326e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003272:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003276:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800327a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800327e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003282:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8003286:	4608      	mov	r0, r1
 8003288:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800328a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800328e:	d0c2      	beq.n	8003216 <HAL_TIM_OnePulse_Init+0x92>
 8003290:	4813      	ldr	r0, [pc, #76]	@ (80032e0 <HAL_TIM_OnePulse_Init+0x15c>)
 8003292:	f640 2162 	movw	r1, #2658	@ 0xa62
 8003296:	f001 f9b1 	bl	80045fc <assert_failed>
 800329a:	e7bc      	b.n	8003216 <HAL_TIM_OnePulse_Init+0x92>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800329c:	4810      	ldr	r0, [pc, #64]	@ (80032e0 <HAL_TIM_OnePulse_Init+0x15c>)
 800329e:	f640 2165 	movw	r1, #2661	@ 0xa65
 80032a2:	f001 f9ab 	bl	80045fc <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 80032a6:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80032aa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1cc      	bne.n	800324c <HAL_TIM_OnePulse_Init+0xc8>
    htim->Lock = HAL_UNLOCKED;
 80032b2:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 80032b6:	4620      	mov	r0, r4
 80032b8:	f7ff fbd6 	bl	8002a68 <HAL_TIM_OnePulse_MspInit>
 80032bc:	e7c6      	b.n	800324c <HAL_TIM_OnePulse_Init+0xc8>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1bb      	bne.n	800323a <HAL_TIM_OnePulse_Init+0xb6>
 80032c2:	4807      	ldr	r0, [pc, #28]	@ (80032e0 <HAL_TIM_OnePulse_Init+0x15c>)
 80032c4:	f640 2164 	movw	r1, #2660	@ 0xa64
 80032c8:	f001 f998 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80032cc:	69a3      	ldr	r3, [r4, #24]
 80032ce:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 80032d2:	d0b6      	beq.n	8003242 <HAL_TIM_OnePulse_Init+0xbe>
 80032d4:	e7e2      	b.n	800329c <HAL_TIM_OnePulse_Init+0x118>
    return HAL_ERROR;
 80032d6:	2101      	movs	r1, #1
}
 80032d8:	4608      	mov	r0, r1
 80032da:	4770      	bx	lr
 80032dc:	40012c00 	.word	0x40012c00
 80032e0:	0800552c 	.word	0x0800552c

080032e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80032e6:	4a5f      	ldr	r2, [pc, #380]	@ (8003464 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80032e8:	6803      	ldr	r3, [r0, #0]
 80032ea:	4293      	cmp	r3, r2
{
 80032ec:	4604      	mov	r4, r0
 80032ee:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80032f0:	d023      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f6:	d020      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032f8:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d01c      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003300:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003304:	4293      	cmp	r3, r2
 8003306:	d018      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003308:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800330c:	4293      	cmp	r3, r2
 800330e:	d014      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003310:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003314:	4293      	cmp	r3, r2
 8003316:	d010      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003318:	f502 3290 	add.w	r2, r2, #73728	@ 0x12000
 800331c:	4293      	cmp	r3, r2
 800331e:	d00c      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003320:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8003324:	4293      	cmp	r3, r2
 8003326:	d008      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003328:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800332c:	4293      	cmp	r3, r2
 800332e:	d004      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003330:	484d      	ldr	r0, [pc, #308]	@ (8003468 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8003332:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 8003336:	f001 f961 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800333a:	682b      	ldr	r3, [r5, #0]
 800333c:	f033 0240 	bics.w	r2, r3, #64	@ 0x40
 8003340:	d00c      	beq.n	800335c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003342:	2b40      	cmp	r3, #64	@ 0x40
 8003344:	d876      	bhi.n	8003434 <HAL_TIMEx_MasterConfigSynchronization+0x150>
 8003346:	2b20      	cmp	r3, #32
 8003348:	d008      	beq.n	800335c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800334a:	f023 0320 	bic.w	r3, r3, #32
 800334e:	2b10      	cmp	r3, #16
 8003350:	d004      	beq.n	800335c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003352:	4845      	ldr	r0, [pc, #276]	@ (8003468 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8003354:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8003358:	f001 f950 	bl	80045fc <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800335c:	68ab      	ldr	r3, [r5, #8]
 800335e:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 8003362:	d004      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8003364:	4840      	ldr	r0, [pc, #256]	@ (8003468 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8003366:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 800336a:	f001 f947 	bl	80045fc <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800336e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8003372:	2b01      	cmp	r3, #1
 8003374:	d071      	beq.n	800345a <HAL_TIMEx_MasterConfigSynchronization+0x176>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003376:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003378:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800337a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800337e:	4a39      	ldr	r2, [pc, #228]	@ (8003464 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
  __HAL_LOCK(htim);
 8003380:	2101      	movs	r1, #1
 8003382:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003386:	4293      	cmp	r3, r2
  tmpcr2 = htim->Instance->CR2;
 8003388:	685e      	ldr	r6, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800338a:	689f      	ldr	r7, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800338c:	d01e      	beq.n	80033cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>
 800338e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003392:	4293      	cmp	r3, r2
 8003394:	d01a      	beq.n	80033cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>
 8003396:	f502 52e0 	add.w	r2, r2, #7168	@ 0x1c00
 800339a:	4293      	cmp	r3, r2
 800339c:	d016      	beq.n	80033cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800339e:	682a      	ldr	r2, [r5, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80033a0:	f026 0670 	bic.w	r6, r6, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033a4:	4316      	orrs	r6, r2

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033a6:	605e      	str	r6, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ac:	d002      	beq.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>
 80033ae:	4a2f      	ldr	r2, [pc, #188]	@ (800346c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d146      	bne.n	8003442 <HAL_TIMEx_MasterConfigSynchronization+0x15e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033b4:	68aa      	ldr	r2, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033b6:	f027 0780 	bic.w	r7, r7, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ba:	4317      	orrs	r7, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033bc:	609f      	str	r7, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80033be:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80033c0:	2301      	movs	r3, #1
 80033c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80033c6:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 80033ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80033cc:	686a      	ldr	r2, [r5, #4]
 80033ce:	f432 1140 	bics.w	r1, r2, #3145728	@ 0x300000
 80033d2:	d01c      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0x12a>
 80033d4:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 80033d8:	d019      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0x12a>
 80033da:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80033de:	d016      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0x12a>
 80033e0:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 80033e4:	d013      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0x12a>
 80033e6:	f240 71c1 	movw	r1, #1985	@ 0x7c1
 80033ea:	481f      	ldr	r0, [pc, #124]	@ (8003468 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80033ec:	f001 f906 	bl	80045fc <assert_failed>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033f0:	6869      	ldr	r1, [r5, #4]
  htim->Instance->CR2 = tmpcr2;
 80033f2:	6823      	ldr	r3, [r4, #0]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033f4:	f426 0270 	bic.w	r2, r6, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033f8:	430a      	orrs	r2, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033fa:	6829      	ldr	r1, [r5, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80033fc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003400:	430a      	orrs	r2, r1
  htim->Instance->CR2 = tmpcr2;
 8003402:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003404:	4a17      	ldr	r2, [pc, #92]	@ (8003464 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d1ce      	bne.n	80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800340a:	4b16      	ldr	r3, [pc, #88]	@ (8003464 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800340c:	e7d2      	b.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800340e:	f426 0670 	bic.w	r6, r6, #15728640	@ 0xf00000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003412:	6829      	ldr	r1, [r5, #0]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003414:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8003416:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800341a:	430a      	orrs	r2, r1
  htim->Instance->CR2 = tmpcr2;
 800341c:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341e:	4a11      	ldr	r2, [pc, #68]	@ (8003464 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d0f2      	beq.n	800340a <HAL_TIMEx_MasterConfigSynchronization+0x126>
 8003424:	4a12      	ldr	r2, [pc, #72]	@ (8003470 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d019      	beq.n	800345e <HAL_TIMEx_MasterConfigSynchronization+0x17a>
 800342a:	4b12      	ldr	r3, [pc, #72]	@ (8003474 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800342c:	4a11      	ldr	r2, [pc, #68]	@ (8003474 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d1c5      	bne.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xda>
 8003432:	e7bf      	b.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>
 8003434:	2b60      	cmp	r3, #96	@ 0x60
 8003436:	d091      	beq.n	800335c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003438:	f023 0320 	bic.w	r3, r3, #32
 800343c:	2b50      	cmp	r3, #80	@ 0x50
 800343e:	d188      	bne.n	8003352 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003440:	e78c      	b.n	800335c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003442:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003446:	4293      	cmp	r3, r2
 8003448:	d0b4      	beq.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>
 800344a:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 800344e:	4293      	cmp	r3, r2
 8003450:	d005      	beq.n	800345e <HAL_TIMEx_MasterConfigSynchronization+0x17a>
 8003452:	4a09      	ldr	r2, [pc, #36]	@ (8003478 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d0ad      	beq.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>
 8003458:	e7e8      	b.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0x148>
  __HAL_LOCK(htim);
 800345a:	2002      	movs	r0, #2
}
 800345c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345e:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8003460:	e7a8      	b.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>
 8003462:	bf00      	nop
 8003464:	40012c00 	.word	0x40012c00
 8003468:	08005564 	.word	0x08005564
 800346c:	40000400 	.word	0x40000400
 8003470:	40013400 	.word	0x40013400
 8003474:	40015000 	.word	0x40015000
 8003478:	40014000 	.word	0x40014000

0800347c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800347c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347e:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003482:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	e842 3100 	strex	r1, r3, [r2]
 800348a:	2900      	cmp	r1, #0
 800348c:	d1f7      	bne.n	800347e <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	f102 0308 	add.w	r3, r2, #8
 8003492:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003496:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349a:	f102 0c08 	add.w	ip, r2, #8
 800349e:	e84c 3100 	strex	r1, r3, [ip]
 80034a2:	2900      	cmp	r1, #0
 80034a4:	d1f3      	bne.n	800348e <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d006      	beq.n	80034ba <UART_EndRxTransfer+0x3e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ac:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80034ae:	2220      	movs	r2, #32
 80034b0:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034b4:	6683      	str	r3, [r0, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b6:	6603      	str	r3, [r0, #96]	@ 0x60
}
 80034b8:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ba:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034be:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	e842 3100 	strex	r1, r3, [r2]
 80034c6:	2900      	cmp	r1, #0
 80034c8:	d0f0      	beq.n	80034ac <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ca:	e852 3f00 	ldrex	r3, [r2]
 80034ce:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	e842 3100 	strex	r1, r3, [r2]
 80034d6:	2900      	cmp	r1, #0
 80034d8:	d1ef      	bne.n	80034ba <UART_EndRxTransfer+0x3e>
 80034da:	e7e7      	b.n	80034ac <UART_EndRxTransfer+0x30>

080034dc <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034dc:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80034de:	2b21      	cmp	r3, #33	@ 0x21
 80034e0:	d000      	beq.n	80034e4 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80034e2:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 80034e4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80034e8:	6802      	ldr	r2, [r0, #0]
    if (huart->TxXferCount == 0U)
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	b983      	cbnz	r3, 8003510 <UART_TxISR_16BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ee:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80034f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	e842 3100 	strex	r1, r3, [r2]
 80034fa:	2900      	cmp	r1, #0
 80034fc:	d1f7      	bne.n	80034ee <UART_TxISR_16BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fe:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	e842 3100 	strex	r1, r3, [r2]
 800350a:	2900      	cmp	r1, #0
 800350c:	d1f7      	bne.n	80034fe <UART_TxISR_16BIT+0x22>
 800350e:	4770      	bx	lr
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003510:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8003512:	f831 3b02 	ldrh.w	r3, [r1], #2
 8003516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351a:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800351c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
      huart->pTxBuffPtr += 2U;
 8003520:	64c1      	str	r1, [r0, #76]	@ 0x4c
      huart->TxXferCount--;
 8003522:	3b01      	subs	r3, #1
 8003524:	b29b      	uxth	r3, r3
 8003526:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
}
 800352a:	4770      	bx	lr

0800352c <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800352c:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800352e:	2b21      	cmp	r3, #33	@ 0x21
 8003530:	d000      	beq.n	8003534 <UART_TxISR_8BIT+0x8>
}
 8003532:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8003534:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003538:	6802      	ldr	r2, [r0, #0]
    if (huart->TxXferCount == 0U)
 800353a:	b29b      	uxth	r3, r3
 800353c:	b983      	cbnz	r3, 8003560 <UART_TxISR_8BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003542:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003546:	e842 3100 	strex	r1, r3, [r2]
 800354a:	2900      	cmp	r1, #0
 800354c:	d1f7      	bne.n	800353e <UART_TxISR_8BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354e:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	e842 3100 	strex	r1, r3, [r2]
 800355a:	2900      	cmp	r1, #0
 800355c:	d1f7      	bne.n	800354e <UART_TxISR_8BIT+0x22>
 800355e:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003560:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8003562:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003566:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8003568:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
      huart->pTxBuffPtr++;
 800356c:	64c1      	str	r1, [r0, #76]	@ 0x4c
      huart->TxXferCount--;
 800356e:	3b01      	subs	r3, #1
 8003570:	b29b      	uxth	r3, r3
 8003572:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
}
 8003576:	4770      	bx	lr

08003578 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8003578:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800357a:	2b20      	cmp	r3, #32
 800357c:	d122      	bne.n	80035c4 <HAL_UART_Transmit_IT+0x4c>
    if ((pData == NULL) || (Size == 0U))
 800357e:	b101      	cbz	r1, 8003582 <HAL_UART_Transmit_IT+0xa>
 8003580:	b90a      	cbnz	r2, 8003586 <HAL_UART_Transmit_IT+0xe>
      return HAL_ERROR;
 8003582:	2001      	movs	r0, #1
}
 8003584:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003586:	6883      	ldr	r3, [r0, #8]
{
 8003588:	b410      	push	{r4}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800358a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358e:	f04f 0400 	mov.w	r4, #0
    huart->pTxBuffPtr  = pData;
 8003592:	64c1      	str	r1, [r0, #76]	@ 0x4c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003594:	f04f 0121 	mov.w	r1, #33	@ 0x21
    huart->TxXferCount = Size;
 8003598:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
    huart->TxXferSize  = Size;
 800359c:	f8a0 2050 	strh.w	r2, [r0, #80]	@ 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a0:	f8c0 4084 	str.w	r4, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035a4:	67c1      	str	r1, [r0, #124]	@ 0x7c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a6:	d00f      	beq.n	80035c8 <HAL_UART_Transmit_IT+0x50>
      huart->TxISR = UART_TxISR_8BIT;
 80035a8:	4b0b      	ldr	r3, [pc, #44]	@ (80035d8 <HAL_UART_Transmit_IT+0x60>)
 80035aa:	6802      	ldr	r2, [r0, #0]
 80035ac:	66c3      	str	r3, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80035b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b6:	e842 3000 	strex	r0, r3, [r2]
 80035ba:	2800      	cmp	r0, #0
 80035bc:	d1f7      	bne.n	80035ae <HAL_UART_Transmit_IT+0x36>
}
 80035be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035c2:	4770      	bx	lr
    return HAL_BUSY;
 80035c4:	2002      	movs	r0, #2
 80035c6:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c8:	6901      	ldr	r1, [r0, #16]
      huart->TxISR = UART_TxISR_8BIT;
 80035ca:	4b04      	ldr	r3, [pc, #16]	@ (80035dc <HAL_UART_Transmit_IT+0x64>)
 80035cc:	4a02      	ldr	r2, [pc, #8]	@ (80035d8 <HAL_UART_Transmit_IT+0x60>)
 80035ce:	42a1      	cmp	r1, r4
 80035d0:	bf18      	it	ne
 80035d2:	4613      	movne	r3, r2
 80035d4:	e7e9      	b.n	80035aa <HAL_UART_Transmit_IT+0x32>
 80035d6:	bf00      	nop
 80035d8:	0800352d 	.word	0x0800352d
 80035dc:	080034dd 	.word	0x080034dd

080035e0 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop

080035e4 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop

080035e8 <UART_DMAAbortOnError>:
{
 80035e8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035ea:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80035f2:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
  HAL_UART_ErrorCallback(huart);
 80035f6:	f7ff fff5 	bl	80035e4 <HAL_UART_ErrorCallback>
}
 80035fa:	bd08      	pop	{r3, pc}

080035fc <HAL_UARTEx_RxEventCallback>:
}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop

08003600 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003600:	6803      	ldr	r3, [r0, #0]
 8003602:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003604:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003606:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  if (errorflags == 0U)
 800360a:	ea12 0f0c 	tst.w	r2, ip
{
 800360e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003612:	689d      	ldr	r5, [r3, #8]
{
 8003614:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8003616:	f040 8081 	bne.w	800371c <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800361a:	0697      	lsls	r7, r2, #26
 800361c:	d502      	bpl.n	8003624 <HAL_UART_IRQHandler+0x24>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800361e:	068e      	lsls	r6, r1, #26
 8003620:	f100 80eb 	bmi.w	80037fa <HAL_UART_IRQHandler+0x1fa>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003624:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003626:	2801      	cmp	r0, #1
 8003628:	d025      	beq.n	8003676 <HAL_UART_IRQHandler+0x76>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800362a:	02d0      	lsls	r0, r2, #11
 800362c:	d502      	bpl.n	8003634 <HAL_UART_IRQHandler+0x34>
 800362e:	026f      	lsls	r7, r5, #9
 8003630:	f100 80e8 	bmi.w	8003804 <HAL_UART_IRQHandler+0x204>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003634:	0616      	lsls	r6, r2, #24
 8003636:	d415      	bmi.n	8003664 <HAL_UART_IRQHandler+0x64>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003638:	0650      	lsls	r0, r2, #25
 800363a:	d501      	bpl.n	8003640 <HAL_UART_IRQHandler+0x40>
 800363c:	064a      	lsls	r2, r1, #25
 800363e:	d401      	bmi.n	8003644 <HAL_UART_IRQHandler+0x44>
}
 8003640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003644:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003648:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	e843 2100 	strex	r1, r2, [r3]
 8003650:	2900      	cmp	r1, #0
 8003652:	d1f7      	bne.n	8003644 <HAL_UART_IRQHandler+0x44>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003654:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003656:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003658:	67e2      	str	r2, [r4, #124]	@ 0x7c
  huart->TxISR = NULL;
 800365a:	66e3      	str	r3, [r4, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800365c:	4620      	mov	r0, r4
 800365e:	f7ff ffbf 	bl	80035e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003662:	e7ed      	b.n	8003640 <HAL_UART_IRQHandler+0x40>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003664:	060d      	lsls	r5, r1, #24
 8003666:	d5e7      	bpl.n	8003638 <HAL_UART_IRQHandler+0x38>
    if (huart->TxISR != NULL)
 8003668:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0e8      	beq.n	8003640 <HAL_UART_IRQHandler+0x40>
      huart->TxISR(huart);
 800366e:	4620      	mov	r0, r4
}
 8003670:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8003674:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003676:	06d7      	lsls	r7, r2, #27
 8003678:	d5d7      	bpl.n	800362a <HAL_UART_IRQHandler+0x2a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800367a:	06ce      	lsls	r6, r1, #27
 800367c:	d5d5      	bpl.n	800362a <HAL_UART_IRQHandler+0x2a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800367e:	2210      	movs	r2, #16
 8003680:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	0655      	lsls	r5, r2, #25
 8003686:	f140 810e 	bpl.w	80038a6 <HAL_UART_IRQHandler+0x2a6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800368a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800368c:	6802      	ldr	r2, [r0, #0]
 800368e:	6852      	ldr	r2, [r2, #4]
 8003690:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003692:	2a00      	cmp	r2, #0
 8003694:	d0d4      	beq.n	8003640 <HAL_UART_IRQHandler+0x40>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003696:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 800369a:	4291      	cmp	r1, r2
 800369c:	d9d0      	bls.n	8003640 <HAL_UART_IRQHandler+0x40>
        huart->RxXferCount = nb_remaining_rx_data;
 800369e:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036a2:	6982      	ldr	r2, [r0, #24]
 80036a4:	2a20      	cmp	r2, #32
 80036a6:	d02f      	beq.n	8003708 <HAL_UART_IRQHandler+0x108>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b0:	e843 2100 	strex	r1, r2, [r3]
 80036b4:	2900      	cmp	r1, #0
 80036b6:	d1f7      	bne.n	80036a8 <HAL_UART_IRQHandler+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	f103 0208 	add.w	r2, r3, #8
 80036bc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	f103 0508 	add.w	r5, r3, #8
 80036c8:	e845 2100 	strex	r1, r2, [r5]
 80036cc:	2900      	cmp	r1, #0
 80036ce:	d1f3      	bne.n	80036b8 <HAL_UART_IRQHandler+0xb8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d0:	f103 0208 	add.w	r2, r3, #8
 80036d4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	f103 0508 	add.w	r5, r3, #8
 80036e0:	e845 2100 	strex	r1, r2, [r5]
 80036e4:	2900      	cmp	r1, #0
 80036e6:	d1f3      	bne.n	80036d0 <HAL_UART_IRQHandler+0xd0>
          huart->RxState = HAL_UART_STATE_READY;
 80036e8:	2220      	movs	r2, #32
 80036ea:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ee:	6621      	str	r1, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	e843 2100 	strex	r1, r2, [r3]
 80036fc:	2900      	cmp	r1, #0
 80036fe:	d1f7      	bne.n	80036f0 <HAL_UART_IRQHandler+0xf0>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003700:	f7fd fed4 	bl	80014ac <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003704:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003708:	2302      	movs	r3, #2
 800370a:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800370c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8003710:	1ac9      	subs	r1, r1, r3
 8003712:	4620      	mov	r0, r4
 8003714:	b289      	uxth	r1, r1
 8003716:	f7ff ff71 	bl	80035fc <HAL_UARTEx_RxEventCallback>
 800371a:	e791      	b.n	8003640 <HAL_UART_IRQHandler+0x40>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800371c:	f015 0701 	ands.w	r7, r5, #1
 8003720:	461e      	mov	r6, r3
 8003722:	f040 8099 	bne.w	8003858 <HAL_UART_IRQHandler+0x258>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003726:	487e      	ldr	r0, [pc, #504]	@ (8003920 <HAL_UART_IRQHandler+0x320>)
 8003728:	4201      	tst	r1, r0
 800372a:	f43f af7b 	beq.w	8003624 <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800372e:	07d5      	lsls	r5, r2, #31
 8003730:	d50f      	bpl.n	8003752 <HAL_UART_IRQHandler+0x152>
 8003732:	05c8      	lsls	r0, r1, #23
 8003734:	f140 80b3 	bpl.w	800389e <HAL_UART_IRQHandler+0x29e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003738:	2001      	movs	r0, #1
 800373a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800373c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003740:	f040 0001 	orr.w	r0, r0, #1
 8003744:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003748:	0790      	lsls	r0, r2, #30
 800374a:	d567      	bpl.n	800381c <HAL_UART_IRQHandler+0x21c>
 800374c:	2f00      	cmp	r7, #0
 800374e:	f040 8087 	bne.w	8003860 <HAL_UART_IRQHandler+0x260>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003752:	0755      	lsls	r5, r2, #29
 8003754:	d579      	bpl.n	800384a <HAL_UART_IRQHandler+0x24a>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003756:	0717      	lsls	r7, r2, #28
 8003758:	f100 8096 	bmi.w	8003888 <HAL_UART_IRQHandler+0x288>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800375c:	0517      	lsls	r7, r2, #20
 800375e:	d50a      	bpl.n	8003776 <HAL_UART_IRQHandler+0x176>
 8003760:	014d      	lsls	r5, r1, #5
 8003762:	d508      	bpl.n	8003776 <HAL_UART_IRQHandler+0x176>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003764:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003768:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800376a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800376e:	f043 0320 	orr.w	r3, r3, #32
 8003772:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003776:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800377a:	2b00      	cmp	r3, #0
 800377c:	f43f af60 	beq.w	8003640 <HAL_UART_IRQHandler+0x40>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003780:	0690      	lsls	r0, r2, #26
 8003782:	d502      	bpl.n	800378a <HAL_UART_IRQHandler+0x18a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003784:	068a      	lsls	r2, r1, #26
 8003786:	f100 8082 	bmi.w	800388e <HAL_UART_IRQHandler+0x28e>
      errorcode = huart->ErrorCode;
 800378a:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800378e:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003790:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003798:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 800379c:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800379e:	f000 80b9 	beq.w	8003914 <HAL_UART_IRQHandler+0x314>
        UART_EndRxTransfer(huart);
 80037a2:	f7ff fe6b 	bl	800347c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a6:	68b3      	ldr	r3, [r6, #8]
 80037a8:	065b      	lsls	r3, r3, #25
 80037aa:	d566      	bpl.n	800387a <HAL_UART_IRQHandler+0x27a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	f106 0308 	add.w	r3, r6, #8
 80037b0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	f106 0108 	add.w	r1, r6, #8
 80037bc:	e841 3200 	strex	r2, r3, [r1]
 80037c0:	b162      	cbz	r2, 80037dc <HAL_UART_IRQHandler+0x1dc>
 80037c2:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	f103 0208 	add.w	r2, r3, #8
 80037c8:	e852 2f00 	ldrex	r2, [r2]
 80037cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	f103 0008 	add.w	r0, r3, #8
 80037d4:	e840 2100 	strex	r1, r2, [r0]
 80037d8:	2900      	cmp	r1, #0
 80037da:	d1f3      	bne.n	80037c4 <HAL_UART_IRQHandler+0x1c4>
          if (huart->hdmarx != NULL)
 80037dc:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80037de:	2800      	cmp	r0, #0
 80037e0:	d04b      	beq.n	800387a <HAL_UART_IRQHandler+0x27a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037e2:	4b50      	ldr	r3, [pc, #320]	@ (8003924 <HAL_UART_IRQHandler+0x324>)
 80037e4:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037e6:	f7fd fe85 	bl	80014f4 <HAL_DMA_Abort_IT>
 80037ea:	2800      	cmp	r0, #0
 80037ec:	f43f af28 	beq.w	8003640 <HAL_UART_IRQHandler+0x40>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037f0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
}
 80037f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037f6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80037f8:	4718      	bx	r3
      if (huart->RxISR != NULL)
 80037fa:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f47f af37 	bne.w	8003670 <HAL_UART_IRQHandler+0x70>
 8003802:	e71d      	b.n	8003640 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003804:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8003808:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800380a:	621a      	str	r2, [r3, #32]
}
 800380c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003810:	f000 bbb6 	b.w	8003f80 <HAL_UARTEx_WakeupCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003814:	05c8      	lsls	r0, r1, #23
 8003816:	d48f      	bmi.n	8003738 <HAL_UART_IRQHandler+0x138>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003818:	0795      	lsls	r5, r2, #30
 800381a:	d421      	bmi.n	8003860 <HAL_UART_IRQHandler+0x260>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800381c:	0750      	lsls	r0, r2, #29
 800381e:	d514      	bpl.n	800384a <HAL_UART_IRQHandler+0x24a>
 8003820:	2f00      	cmp	r7, #0
 8003822:	d098      	beq.n	8003756 <HAL_UART_IRQHandler+0x156>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003824:	2004      	movs	r0, #4
 8003826:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003828:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 800382c:	0715      	lsls	r5, r2, #28
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800382e:	f040 0002 	orr.w	r0, r0, #2
 8003832:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003836:	d591      	bpl.n	800375c <HAL_UART_IRQHandler+0x15c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003838:	2008      	movs	r0, #8
 800383a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800383c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003840:	f040 0008 	orr.w	r0, r0, #8
 8003844:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8003848:	e788      	b.n	800375c <HAL_UART_IRQHandler+0x15c>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800384a:	0710      	lsls	r0, r2, #28
 800384c:	d586      	bpl.n	800375c <HAL_UART_IRQHandler+0x15c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800384e:	f001 0020 	and.w	r0, r1, #32
 8003852:	4338      	orrs	r0, r7
 8003854:	d082      	beq.n	800375c <HAL_UART_IRQHandler+0x15c>
 8003856:	e7ef      	b.n	8003838 <HAL_UART_IRQHandler+0x238>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003858:	07d5      	lsls	r5, r2, #31
 800385a:	d4db      	bmi.n	8003814 <HAL_UART_IRQHandler+0x214>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800385c:	0790      	lsls	r0, r2, #30
 800385e:	d510      	bpl.n	8003882 <HAL_UART_IRQHandler+0x282>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003860:	2002      	movs	r0, #2
 8003862:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003864:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003868:	0757      	lsls	r7, r2, #29
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800386a:	f040 0004 	orr.w	r0, r0, #4
 800386e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003872:	d4d7      	bmi.n	8003824 <HAL_UART_IRQHandler+0x224>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003874:	0710      	lsls	r0, r2, #28
 8003876:	d4df      	bmi.n	8003838 <HAL_UART_IRQHandler+0x238>
 8003878:	e770      	b.n	800375c <HAL_UART_IRQHandler+0x15c>
            HAL_UART_ErrorCallback(huart);
 800387a:	4620      	mov	r0, r4
 800387c:	f7ff feb2 	bl	80035e4 <HAL_UART_ErrorCallback>
 8003880:	e6de      	b.n	8003640 <HAL_UART_IRQHandler+0x40>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003882:	0757      	lsls	r7, r2, #29
 8003884:	d4ce      	bmi.n	8003824 <HAL_UART_IRQHandler+0x224>
 8003886:	e7f5      	b.n	8003874 <HAL_UART_IRQHandler+0x274>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003888:	068d      	lsls	r5, r1, #26
 800388a:	d4d5      	bmi.n	8003838 <HAL_UART_IRQHandler+0x238>
 800388c:	e766      	b.n	800375c <HAL_UART_IRQHandler+0x15c>
        if (huart->RxISR != NULL)
 800388e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8003890:	2b00      	cmp	r3, #0
 8003892:	f43f af7a 	beq.w	800378a <HAL_UART_IRQHandler+0x18a>
          huart->RxISR(huart);
 8003896:	4620      	mov	r0, r4
 8003898:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800389a:	6826      	ldr	r6, [r4, #0]
 800389c:	e775      	b.n	800378a <HAL_UART_IRQHandler+0x18a>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800389e:	0795      	lsls	r5, r2, #30
 80038a0:	f53f af57 	bmi.w	8003752 <HAL_UART_IRQHandler+0x152>
 80038a4:	e7ba      	b.n	800381c <HAL_UART_IRQHandler+0x21c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038a6:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
      if ((huart->RxXferCount > 0U)
 80038aa:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038ae:	f8b4 0058 	ldrh.w	r0, [r4, #88]	@ 0x58
      if ((huart->RxXferCount > 0U)
 80038b2:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038b4:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80038b6:	2a00      	cmp	r2, #0
 80038b8:	f43f aec2 	beq.w	8003640 <HAL_UART_IRQHandler+0x40>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038bc:	1a41      	subs	r1, r0, r1
 80038be:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80038c0:	2900      	cmp	r1, #0
 80038c2:	f43f aebd 	beq.w	8003640 <HAL_UART_IRQHandler+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ca:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	e843 2000 	strex	r0, r2, [r3]
 80038d2:	2800      	cmp	r0, #0
 80038d4:	d1f7      	bne.n	80038c6 <HAL_UART_IRQHandler+0x2c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	f103 0208 	add.w	r2, r3, #8
 80038da:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038de:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	f103 0508 	add.w	r5, r3, #8
 80038e6:	e845 2000 	strex	r0, r2, [r5]
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d1f3      	bne.n	80038d6 <HAL_UART_IRQHandler+0x2d6>
        huart->RxState = HAL_UART_STATE_READY;
 80038ee:	2220      	movs	r2, #32
 80038f0:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
        huart->RxISR = NULL;
 80038f4:	66a0      	str	r0, [r4, #104]	@ 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f6:	6620      	str	r0, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038fc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	e843 2000 	strex	r0, r2, [r3]
 8003904:	2800      	cmp	r0, #0
 8003906:	d1f7      	bne.n	80038f8 <HAL_UART_IRQHandler+0x2f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003908:	2302      	movs	r3, #2
 800390a:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800390c:	4620      	mov	r0, r4
 800390e:	f7ff fe75 	bl	80035fc <HAL_UARTEx_RxEventCallback>
 8003912:	e695      	b.n	8003640 <HAL_UART_IRQHandler+0x40>
        HAL_UART_ErrorCallback(huart);
 8003914:	f7ff fe66 	bl	80035e4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003918:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
 800391c:	e690      	b.n	8003640 <HAL_UART_IRQHandler+0x40>
 800391e:	bf00      	nop
 8003920:	04000120 	.word	0x04000120
 8003924:	080035e9 	.word	0x080035e9

08003928 <UART_SetConfig>:
{
 8003928:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800392a:	6842      	ldr	r2, [r0, #4]
 800392c:	4b8d      	ldr	r3, [pc, #564]	@ (8003b64 <UART_SetConfig+0x23c>)
 800392e:	429a      	cmp	r2, r3
{
 8003930:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003932:	f200 80a1 	bhi.w	8003a78 <UART_SetConfig+0x150>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003936:	68a3      	ldr	r3, [r4, #8]
 8003938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800393c:	d003      	beq.n	8003946 <UART_SetConfig+0x1e>
 800393e:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
 8003942:	f040 80af 	bne.w	8003aa4 <UART_SetConfig+0x17c>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003946:	68e3      	ldr	r3, [r4, #12]
 8003948:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
 800394c:	d004      	beq.n	8003958 <UART_SetConfig+0x30>
 800394e:	4886      	ldr	r0, [pc, #536]	@ (8003b68 <UART_SetConfig+0x240>)
 8003950:	f640 313b 	movw	r1, #2875	@ 0xb3b
 8003954:	f000 fe52 	bl	80045fc <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8003958:	6a23      	ldr	r3, [r4, #32]
 800395a:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
 800395e:	d004      	beq.n	800396a <UART_SetConfig+0x42>
 8003960:	4881      	ldr	r0, [pc, #516]	@ (8003b68 <UART_SetConfig+0x240>)
 8003962:	f640 313c 	movw	r1, #2876	@ 0xb3c
 8003966:	f000 fe49 	bl	80045fc <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800396a:	6923      	ldr	r3, [r4, #16]
 800396c:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
 8003970:	d003      	beq.n	800397a <UART_SetConfig+0x52>
 8003972:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003976:	f040 809b 	bne.w	8003ab0 <UART_SetConfig+0x188>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800397a:	6963      	ldr	r3, [r4, #20]
 800397c:	f033 020c 	bics.w	r2, r3, #12
 8003980:	d157      	bne.n	8003a32 <UART_SetConfig+0x10a>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d055      	beq.n	8003a32 <UART_SetConfig+0x10a>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003986:	69a3      	ldr	r3, [r4, #24]
 8003988:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
 800398c:	d004      	beq.n	8003998 <UART_SetConfig+0x70>
 800398e:	4876      	ldr	r0, [pc, #472]	@ (8003b68 <UART_SetConfig+0x240>)
 8003990:	f44f 6134 	mov.w	r1, #2880	@ 0xb40
 8003994:	f000 fe32 	bl	80045fc <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003998:	69e1      	ldr	r1, [r4, #28]
 800399a:	f431 4300 	bics.w	r3, r1, #32768	@ 0x8000
 800399e:	d005      	beq.n	80039ac <UART_SetConfig+0x84>
 80039a0:	f640 3141 	movw	r1, #2881	@ 0xb41
 80039a4:	4870      	ldr	r0, [pc, #448]	@ (8003b68 <UART_SetConfig+0x240>)
 80039a6:	f000 fe29 	bl	80045fc <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039aa:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039ac:	6920      	ldr	r0, [r4, #16]
 80039ae:	68a3      	ldr	r3, [r4, #8]
 80039b0:	6822      	ldr	r2, [r4, #0]
 80039b2:	4303      	orrs	r3, r0
 80039b4:	6960      	ldr	r0, [r4, #20]
 80039b6:	6815      	ldr	r5, [r2, #0]
 80039b8:	4303      	orrs	r3, r0
 80039ba:	486c      	ldr	r0, [pc, #432]	@ (8003b6c <UART_SetConfig+0x244>)
 80039bc:	4028      	ands	r0, r5
 80039be:	4303      	orrs	r3, r0
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c4:	6853      	ldr	r3, [r2, #4]
 80039c6:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 80039c8:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80039ce:	4303      	orrs	r3, r0
 80039d0:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039d2:	6890      	ldr	r0, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039d4:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039d6:	f420 6030 	bic.w	r0, r0, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80039da:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039dc:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039de:	4864      	ldr	r0, [pc, #400]	@ (8003b70 <UART_SetConfig+0x248>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039e0:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039e2:	4282      	cmp	r2, r0
 80039e4:	d04e      	beq.n	8003a84 <UART_SetConfig+0x15c>
 80039e6:	4b63      	ldr	r3, [pc, #396]	@ (8003b74 <UART_SetConfig+0x24c>)
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d028      	beq.n	8003a3e <UART_SetConfig+0x116>
 80039ec:	4b62      	ldr	r3, [pc, #392]	@ (8003b78 <UART_SetConfig+0x250>)
 80039ee:	429a      	cmp	r2, r3
 80039f0:	f000 8086 	beq.w	8003b00 <UART_SetConfig+0x1d8>
 80039f4:	4b61      	ldr	r3, [pc, #388]	@ (8003b7c <UART_SetConfig+0x254>)
 80039f6:	429a      	cmp	r2, r3
 80039f8:	f000 8095 	beq.w	8003b26 <UART_SetConfig+0x1fe>
 80039fc:	4b60      	ldr	r3, [pc, #384]	@ (8003b80 <UART_SetConfig+0x258>)
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d138      	bne.n	8003a74 <UART_SetConfig+0x14c>
 8003a02:	f503 33e0 	add.w	r3, r3, #114688	@ 0x1c000
 8003a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a08:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003a0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a10:	d054      	beq.n	8003abc <UART_SetConfig+0x194>
 8003a12:	f200 80a1 	bhi.w	8003b58 <UART_SetConfig+0x230>
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d07f      	beq.n	8003b1a <UART_SetConfig+0x1f2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a1a:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003a1e:	f000 8095 	beq.w	8003b4c <UART_SetConfig+0x224>
        pclk = HAL_RCC_GetSysClockFreq();
 8003a22:	f7fe fbe5 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003a26:	b9d0      	cbnz	r0, 8003a5e <UART_SetConfig+0x136>
        pclk = (uint32_t) HSI_VALUE;
 8003a28:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8003a30:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003a32:	484d      	ldr	r0, [pc, #308]	@ (8003b68 <UART_SetConfig+0x240>)
 8003a34:	f640 313f 	movw	r1, #2879	@ 0xb3f
 8003a38:	f000 fde0 	bl	80045fc <assert_failed>
 8003a3c:	e7a3      	b.n	8003986 <UART_SetConfig+0x5e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a3e:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 8003a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a4c:	d036      	beq.n	8003abc <UART_SetConfig+0x194>
 8003a4e:	d9e2      	bls.n	8003a16 <UART_SetConfig+0xee>
 8003a50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a54:	d10e      	bne.n	8003a74 <UART_SetConfig+0x14c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a56:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003a5a:	d072      	beq.n	8003b42 <UART_SetConfig+0x21a>
        pclk = (uint32_t) HSI_VALUE;
 8003a5c:	4849      	ldr	r0, [pc, #292]	@ (8003b84 <UART_SetConfig+0x25c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a5e:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a60:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a64:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003a68:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a6c:	f1a0 0310 	sub.w	r3, r0, #16
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d942      	bls.n	8003afa <UART_SetConfig+0x1d2>
        pclk = (uint32_t) HSI_VALUE;
 8003a74:	2001      	movs	r0, #1
 8003a76:	e7d8      	b.n	8003a2a <UART_SetConfig+0x102>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003a78:	483b      	ldr	r0, [pc, #236]	@ (8003b68 <UART_SetConfig+0x240>)
 8003a7a:	f640 3139 	movw	r1, #2873	@ 0xb39
 8003a7e:	f000 fdbd 	bl	80045fc <assert_failed>
 8003a82:	e758      	b.n	8003936 <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a84:	4b40      	ldr	r3, [pc, #256]	@ (8003b88 <UART_SetConfig+0x260>)
 8003a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d015      	beq.n	8003abc <UART_SetConfig+0x194>
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d0e0      	beq.n	8003a56 <UART_SetConfig+0x12e>
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d0c0      	beq.n	8003a1a <UART_SetConfig+0xf2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a98:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003a9c:	d014      	beq.n	8003ac8 <UART_SetConfig+0x1a0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a9e:	f7fe fcf5 	bl	800248c <HAL_RCC_GetPCLK2Freq>
        break;
 8003aa2:	e7c0      	b.n	8003a26 <UART_SetConfig+0xfe>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003aa4:	4830      	ldr	r0, [pc, #192]	@ (8003b68 <UART_SetConfig+0x240>)
 8003aa6:	f640 313a 	movw	r1, #2874	@ 0xb3a
 8003aaa:	f000 fda7 	bl	80045fc <assert_failed>
 8003aae:	e74a      	b.n	8003946 <UART_SetConfig+0x1e>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003ab0:	482d      	ldr	r0, [pc, #180]	@ (8003b68 <UART_SetConfig+0x240>)
 8003ab2:	f640 313e 	movw	r1, #2878	@ 0xb3e
 8003ab6:	f000 fda1 	bl	80045fc <assert_failed>
 8003aba:	e75e      	b.n	800397a <UART_SetConfig+0x52>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003abc:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003ac0:	d041      	beq.n	8003b46 <UART_SetConfig+0x21e>
        pclk = (uint32_t) LSE_VALUE;
 8003ac2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003ac6:	e7ca      	b.n	8003a5e <UART_SetConfig+0x136>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ac8:	f7fe fce0 	bl	800248c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d0ab      	beq.n	8003a28 <UART_SetConfig+0x100>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ad0:	0040      	lsls	r0, r0, #1
 8003ad2:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ad4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ad8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003adc:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ae0:	f1a3 0110 	sub.w	r1, r3, #16
 8003ae4:	4291      	cmp	r1, r2
 8003ae6:	d8c5      	bhi.n	8003a74 <UART_SetConfig+0x14c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ae8:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8003aec:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aee:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003af0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60cb      	str	r3, [r1, #12]
 8003af8:	e796      	b.n	8003a28 <UART_SetConfig+0x100>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	60d8      	str	r0, [r3, #12]
 8003afe:	e793      	b.n	8003a28 <UART_SetConfig+0x100>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b00:	f503 33e4 	add.w	r3, r3, #116736	@ 0x1c800
 8003b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b06:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003b0a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b0e:	d0d5      	beq.n	8003abc <UART_SetConfig+0x194>
 8003b10:	d981      	bls.n	8003a16 <UART_SetConfig+0xee>
 8003b12:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b16:	d09e      	beq.n	8003a56 <UART_SetConfig+0x12e>
 8003b18:	e7ac      	b.n	8003a74 <UART_SetConfig+0x14c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b1a:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003b1e:	d018      	beq.n	8003b52 <UART_SetConfig+0x22a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b20:	f7fe fc9c 	bl	800245c <HAL_RCC_GetPCLK1Freq>
        break;
 8003b24:	e77f      	b.n	8003a26 <UART_SetConfig+0xfe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b26:	f503 33e2 	add.w	r3, r3, #115712	@ 0x1c400
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003b30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b34:	d0c2      	beq.n	8003abc <UART_SetConfig+0x194>
 8003b36:	f67f af6e 	bls.w	8003a16 <UART_SetConfig+0xee>
 8003b3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b3e:	d08a      	beq.n	8003a56 <UART_SetConfig+0x12e>
 8003b40:	e798      	b.n	8003a74 <UART_SetConfig+0x14c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b42:	4812      	ldr	r0, [pc, #72]	@ (8003b8c <UART_SetConfig+0x264>)
 8003b44:	e7c5      	b.n	8003ad2 <UART_SetConfig+0x1aa>
 8003b46:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8003b4a:	e7c2      	b.n	8003ad2 <UART_SetConfig+0x1aa>
        pclk = HAL_RCC_GetSysClockFreq();
 8003b4c:	f7fe fb50 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
        break;
 8003b50:	e7bc      	b.n	8003acc <UART_SetConfig+0x1a4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b52:	f7fe fc83 	bl	800245c <HAL_RCC_GetPCLK1Freq>
        break;
 8003b56:	e7b9      	b.n	8003acc <UART_SetConfig+0x1a4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b58:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b5c:	f43f af7b 	beq.w	8003a56 <UART_SetConfig+0x12e>
 8003b60:	e788      	b.n	8003a74 <UART_SetConfig+0x14c>
 8003b62:	bf00      	nop
 8003b64:	00895440 	.word	0x00895440
 8003b68:	080055a0 	.word	0x080055a0
 8003b6c:	efff69f3 	.word	0xefff69f3
 8003b70:	40013800 	.word	0x40013800
 8003b74:	40004400 	.word	0x40004400
 8003b78:	40004800 	.word	0x40004800
 8003b7c:	40004c00 	.word	0x40004c00
 8003b80:	40005000 	.word	0x40005000
 8003b84:	007a1200 	.word	0x007a1200
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	00f42400 	.word	0x00f42400

08003b90 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8003b90:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003b92:	2bff      	cmp	r3, #255	@ 0xff
{
 8003b94:	b510      	push	{r4, lr}
 8003b96:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8003b98:	f200 8095 	bhi.w	8003cc6 <UART_AdvFeatureConfig+0x136>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b9c:	071a      	lsls	r2, r3, #28
 8003b9e:	d50a      	bpl.n	8003bb6 <UART_AdvFeatureConfig+0x26>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8003ba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ba2:	f431 4200 	bics.w	r2, r1, #32768	@ 0x8000
 8003ba6:	f040 809d 	bne.w	8003ce4 <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003baa:	6820      	ldr	r0, [r4, #0]
 8003bac:	6842      	ldr	r2, [r0, #4]
 8003bae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bb6:	07d8      	lsls	r0, r3, #31
 8003bb8:	d50a      	bpl.n	8003bd0 <UART_AdvFeatureConfig+0x40>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8003bba:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003bbc:	f431 3200 	bics.w	r2, r1, #131072	@ 0x20000
 8003bc0:	f040 8098 	bne.w	8003cf4 <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bc4:	6820      	ldr	r0, [r4, #0]
 8003bc6:	6842      	ldr	r2, [r0, #4]
 8003bc8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bd0:	0799      	lsls	r1, r3, #30
 8003bd2:	d50a      	bpl.n	8003bea <UART_AdvFeatureConfig+0x5a>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8003bd4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003bd6:	f431 3280 	bics.w	r2, r1, #65536	@ 0x10000
 8003bda:	f040 8093 	bne.w	8003d04 <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bde:	6820      	ldr	r0, [r4, #0]
 8003be0:	6842      	ldr	r2, [r0, #4]
 8003be2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003be6:	430a      	orrs	r2, r1
 8003be8:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bea:	075a      	lsls	r2, r3, #29
 8003bec:	d50a      	bpl.n	8003c04 <UART_AdvFeatureConfig+0x74>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8003bee:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003bf0:	f431 2280 	bics.w	r2, r1, #262144	@ 0x40000
 8003bf4:	f040 808e 	bne.w	8003d14 <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bf8:	6820      	ldr	r0, [r4, #0]
 8003bfa:	6842      	ldr	r2, [r0, #4]
 8003bfc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c00:	430a      	orrs	r2, r1
 8003c02:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c04:	06d8      	lsls	r0, r3, #27
 8003c06:	d50a      	bpl.n	8003c1e <UART_AdvFeatureConfig+0x8e>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8003c08:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003c0a:	f431 5280 	bics.w	r2, r1, #4096	@ 0x1000
 8003c0e:	f040 8089 	bne.w	8003d24 <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c12:	6820      	ldr	r0, [r4, #0]
 8003c14:	6882      	ldr	r2, [r0, #8]
 8003c16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c1e:	0699      	lsls	r1, r3, #26
 8003c20:	d509      	bpl.n	8003c36 <UART_AdvFeatureConfig+0xa6>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8003c22:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8003c24:	f431 5200 	bics.w	r2, r1, #8192	@ 0x2000
 8003c28:	d154      	bne.n	8003cd4 <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c2a:	6820      	ldr	r0, [r4, #0]
 8003c2c:	6882      	ldr	r2, [r0, #8]
 8003c2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c32:	430a      	orrs	r2, r1
 8003c34:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c36:	065a      	lsls	r2, r3, #25
 8003c38:	d52b      	bpl.n	8003c92 <UART_AdvFeatureConfig+0x102>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	4a46      	ldr	r2, [pc, #280]	@ (8003d58 <UART_AdvFeatureConfig+0x1c8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00c      	beq.n	8003c5c <UART_AdvFeatureConfig+0xcc>
 8003c42:	f5a2 4274 	sub.w	r2, r2, #62464	@ 0xf400
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d008      	beq.n	8003c5c <UART_AdvFeatureConfig+0xcc>
 8003c4a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <UART_AdvFeatureConfig+0xcc>
 8003c52:	4842      	ldr	r0, [pc, #264]	@ (8003d5c <UART_AdvFeatureConfig+0x1cc>)
 8003c54:	f640 31f1 	movw	r1, #3057	@ 0xbf1
 8003c58:	f000 fcd0 	bl	80045fc <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8003c5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c5e:	b35b      	cbz	r3, 8003cb8 <UART_AdvFeatureConfig+0x128>
 8003c60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c64:	d166      	bne.n	8003d34 <UART_AdvFeatureConfig+0x1a4>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c66:	6822      	ldr	r2, [r4, #0]
 8003c68:	6853      	ldr	r3, [r2, #4]
 8003c6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c6e:	6053      	str	r3, [r2, #4]
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8003c70:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003c72:	f430 03c0 	bics.w	r3, r0, #6291456	@ 0x600000
 8003c76:	d006      	beq.n	8003c86 <UART_AdvFeatureConfig+0xf6>
 8003c78:	4838      	ldr	r0, [pc, #224]	@ (8003d5c <UART_AdvFeatureConfig+0x1cc>)
 8003c7a:	f640 31f7 	movw	r1, #3063	@ 0xbf7
 8003c7e:	f000 fcbd 	bl	80045fc <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c82:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003c84:	6822      	ldr	r2, [r4, #0]
 8003c86:	6851      	ldr	r1, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c88:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c8a:	f421 01c0 	bic.w	r1, r1, #6291456	@ 0x600000
 8003c8e:	4301      	orrs	r1, r0
 8003c90:	6051      	str	r1, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c92:	061b      	lsls	r3, r3, #24
 8003c94:	d50f      	bpl.n	8003cb6 <UART_AdvFeatureConfig+0x126>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8003c96:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003c98:	f432 2300 	bics.w	r3, r2, #524288	@ 0x80000
 8003c9c:	d005      	beq.n	8003caa <UART_AdvFeatureConfig+0x11a>
 8003c9e:	482f      	ldr	r0, [pc, #188]	@ (8003d5c <UART_AdvFeatureConfig+0x1cc>)
 8003ca0:	f640 31ff 	movw	r1, #3071	@ 0xbff
 8003ca4:	f000 fcaa 	bl	80045fc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ca8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003caa:	6821      	ldr	r1, [r4, #0]
 8003cac:	684b      	ldr	r3, [r1, #4]
 8003cae:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	604b      	str	r3, [r1, #4]
}
 8003cb6:	bd10      	pop	{r4, pc}
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cb8:	6821      	ldr	r1, [r4, #0]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cbc:	684a      	ldr	r2, [r1, #4]
 8003cbe:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003cc2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cc4:	e7e5      	b.n	8003c92 <UART_AdvFeatureConfig+0x102>
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8003cc6:	4825      	ldr	r0, [pc, #148]	@ (8003d5c <UART_AdvFeatureConfig+0x1cc>)
 8003cc8:	f640 31c2 	movw	r1, #3010	@ 0xbc2
 8003ccc:	f000 fc96 	bl	80045fc <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cd0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003cd2:	e763      	b.n	8003b9c <UART_AdvFeatureConfig+0xc>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8003cd4:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8003cd8:	4820      	ldr	r0, [pc, #128]	@ (8003d5c <UART_AdvFeatureConfig+0x1cc>)
 8003cda:	f000 fc8f 	bl	80045fc <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cde:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ce0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003ce2:	e7a2      	b.n	8003c2a <UART_AdvFeatureConfig+0x9a>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8003ce4:	f640 31c7 	movw	r1, #3015	@ 0xbc7
 8003ce8:	481c      	ldr	r0, [pc, #112]	@ (8003d5c <UART_AdvFeatureConfig+0x1cc>)
 8003cea:	f000 fc87 	bl	80045fc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cf0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003cf2:	e75a      	b.n	8003baa <UART_AdvFeatureConfig+0x1a>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8003cf4:	f640 31ce 	movw	r1, #3022	@ 0xbce
 8003cf8:	4818      	ldr	r0, [pc, #96]	@ (8003d5c <UART_AdvFeatureConfig+0x1cc>)
 8003cfa:	f000 fc7f 	bl	80045fc <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cfe:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	@ 0x24
 8003d02:	e75f      	b.n	8003bc4 <UART_AdvFeatureConfig+0x34>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8003d04:	f640 31d5 	movw	r1, #3029	@ 0xbd5
 8003d08:	4814      	ldr	r0, [pc, #80]	@ (8003d5c <UART_AdvFeatureConfig+0x1cc>)
 8003d0a:	f000 fc77 	bl	80045fc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d0e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d12:	e764      	b.n	8003bde <UART_AdvFeatureConfig+0x4e>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8003d14:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8003d18:	4810      	ldr	r0, [pc, #64]	@ (8003d5c <UART_AdvFeatureConfig+0x1cc>)
 8003d1a:	f000 fc6f 	bl	80045fc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d1e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d20:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d22:	e769      	b.n	8003bf8 <UART_AdvFeatureConfig+0x68>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8003d24:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8003d28:	480c      	ldr	r0, [pc, #48]	@ (8003d5c <UART_AdvFeatureConfig+0x1cc>)
 8003d2a:	f000 fc67 	bl	80045fc <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d2e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d30:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d32:	e76e      	b.n	8003c12 <UART_AdvFeatureConfig+0x82>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8003d34:	f640 31f2 	movw	r1, #3058	@ 0xbf2
 8003d38:	4808      	ldr	r0, [pc, #32]	@ (8003d5c <UART_AdvFeatureConfig+0x1cc>)
 8003d3a:	f000 fc5f 	bl	80045fc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d3e:	6822      	ldr	r2, [r4, #0]
 8003d40:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003d42:	6853      	ldr	r3, [r2, #4]
 8003d44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d48:	430b      	orrs	r3, r1
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d4a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d4e:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d50:	d08e      	beq.n	8003c70 <UART_AdvFeatureConfig+0xe0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d52:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d54:	e79d      	b.n	8003c92 <UART_AdvFeatureConfig+0x102>
 8003d56:	bf00      	nop
 8003d58:	40013800 	.word	0x40013800
 8003d5c:	080055a0 	.word	0x080055a0

08003d60 <UART_WaitOnFlagUntilTimeout>:
{
 8003d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d64:	9f08      	ldr	r7, [sp, #32]
 8003d66:	460c      	mov	r4, r1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d68:	6801      	ldr	r1, [r0, #0]
{
 8003d6a:	4606      	mov	r6, r0
 8003d6c:	4615      	mov	r5, r2
 8003d6e:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d70:	69ca      	ldr	r2, [r1, #28]
 8003d72:	ea34 0202 	bics.w	r2, r4, r2
 8003d76:	bf0c      	ite	eq
 8003d78:	2201      	moveq	r2, #1
 8003d7a:	2200      	movne	r2, #0
 8003d7c:	42aa      	cmp	r2, r5
 8003d7e:	d109      	bne.n	8003d94 <UART_WaitOnFlagUntilTimeout+0x34>
    if (Timeout != HAL_MAX_DELAY)
 8003d80:	1c78      	adds	r0, r7, #1
 8003d82:	d10b      	bne.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x3c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d84:	69cb      	ldr	r3, [r1, #28]
 8003d86:	ea34 0303 	bics.w	r3, r4, r3
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	42ab      	cmp	r3, r5
 8003d92:	d0f7      	beq.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9c:	f7fc fa88 	bl	80002b0 <HAL_GetTick>
 8003da0:	eba0 0008 	sub.w	r0, r0, r8
 8003da4:	42b8      	cmp	r0, r7
 8003da6:	d81a      	bhi.n	8003dde <UART_WaitOnFlagUntilTimeout+0x7e>
 8003da8:	b1cf      	cbz	r7, 8003dde <UART_WaitOnFlagUntilTimeout+0x7e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003daa:	6831      	ldr	r1, [r6, #0]
 8003dac:	680b      	ldr	r3, [r1, #0]
 8003dae:	075a      	lsls	r2, r3, #29
 8003db0:	d5de      	bpl.n	8003d70 <UART_WaitOnFlagUntilTimeout+0x10>
 8003db2:	2c80      	cmp	r4, #128	@ 0x80
 8003db4:	d0dc      	beq.n	8003d70 <UART_WaitOnFlagUntilTimeout+0x10>
 8003db6:	2c40      	cmp	r4, #64	@ 0x40
 8003db8:	d0da      	beq.n	8003d70 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dba:	69cb      	ldr	r3, [r1, #28]
 8003dbc:	f013 0908 	ands.w	r9, r3, #8
 8003dc0:	d10f      	bne.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc2:	69ca      	ldr	r2, [r1, #28]
 8003dc4:	0513      	lsls	r3, r2, #20
 8003dc6:	d5d3      	bpl.n	8003d70 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dcc:	620a      	str	r2, [r1, #32]
          UART_EndRxTransfer(huart);
 8003dce:	4630      	mov	r0, r6
 8003dd0:	f7ff fb54 	bl	800347c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f8c6 2084 	str.w	r2, [r6, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8003dda:	f886 9078 	strb.w	r9, [r6, #120]	@ 0x78
        return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e7d9      	b.n	8003d96 <UART_WaitOnFlagUntilTimeout+0x36>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003de2:	2408      	movs	r4, #8
 8003de4:	620c      	str	r4, [r1, #32]
          UART_EndRxTransfer(huart);
 8003de6:	4630      	mov	r0, r6
 8003de8:	f7ff fb48 	bl	800347c <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8003dec:	2200      	movs	r2, #0
          return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003df0:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8003df4:	f886 2078 	strb.w	r2, [r6, #120]	@ 0x78
          return HAL_ERROR;
 8003df8:	e7cd      	b.n	8003d96 <UART_WaitOnFlagUntilTimeout+0x36>
 8003dfa:	bf00      	nop

08003dfc <UART_CheckIdleState>:
{
 8003dfc:	b570      	push	{r4, r5, r6, lr}
 8003dfe:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e00:	2600      	movs	r6, #0
{
 8003e02:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e04:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8003e08:	f7fc fa52 	bl	80002b0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8003e12:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e14:	d40f      	bmi.n	8003e36 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	075b      	lsls	r3, r3, #29
 8003e1a:	d425      	bmi.n	8003e68 <UART_CheckIdleState+0x6c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003e1e:	2220      	movs	r2, #32
 8003e20:	67e2      	str	r2, [r4, #124]	@ 0x7c
  return HAL_OK;
 8003e22:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8003e24:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e28:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e2a:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8003e32:	b002      	add	sp, #8
 8003e34:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	4632      	mov	r2, r6
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e44:	4620      	mov	r0, r4
 8003e46:	f7ff ff8b 	bl	8003d60 <UART_WaitOnFlagUntilTimeout>
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d0e2      	beq.n	8003e16 <UART_CheckIdleState+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e50:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	e843 2100 	strex	r1, r2, [r3]
 8003e5c:	2900      	cmp	r1, #0
 8003e5e:	d1f7      	bne.n	8003e50 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 8003e60:	2320      	movs	r3, #32
 8003e62:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8003e64:	2003      	movs	r0, #3
 8003e66:	e7e1      	b.n	8003e2c <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	462b      	mov	r3, r5
 8003e72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e76:	4620      	mov	r0, r4
 8003e78:	f7ff ff72 	bl	8003d60 <UART_WaitOnFlagUntilTimeout>
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	d0cd      	beq.n	8003e1c <UART_CheckIdleState+0x20>
 8003e80:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e86:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	e843 2100 	strex	r1, r2, [r3]
 8003e8e:	2900      	cmp	r1, #0
 8003e90:	d1f7      	bne.n	8003e82 <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	f103 0208 	add.w	r2, r3, #8
 8003e96:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	f103 0008 	add.w	r0, r3, #8
 8003ea2:	e840 2100 	strex	r1, r2, [r0]
 8003ea6:	2900      	cmp	r1, #0
 8003ea8:	d1f3      	bne.n	8003e92 <UART_CheckIdleState+0x96>
      huart->RxState = HAL_UART_STATE_READY;
 8003eaa:	2320      	movs	r3, #32
 8003eac:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8003eb0:	e7d8      	b.n	8003e64 <UART_CheckIdleState+0x68>
 8003eb2:	bf00      	nop

08003eb4 <HAL_UART_Init>:
  if (huart == NULL)
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d05d      	beq.n	8003f74 <HAL_UART_Init+0xc0>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003eb8:	6982      	ldr	r2, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003eba:	6803      	ldr	r3, [r0, #0]
{
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003ec0:	2a00      	cmp	r2, #0
 8003ec2:	d032      	beq.n	8003f2a <HAL_UART_Init+0x76>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8003f78 <HAL_UART_Init+0xc4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00c      	beq.n	8003ee4 <HAL_UART_Init+0x30>
 8003eca:	f5a2 4274 	sub.w	r2, r2, #62464	@ 0xf400
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d008      	beq.n	8003ee4 <HAL_UART_Init+0x30>
 8003ed2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d004      	beq.n	8003ee4 <HAL_UART_Init+0x30>
 8003eda:	4828      	ldr	r0, [pc, #160]	@ (8003f7c <HAL_UART_Init+0xc8>)
 8003edc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8003ee0:	f000 fb8c 	bl	80045fc <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003ee4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d03e      	beq.n	8003f68 <HAL_UART_Init+0xb4>
  __HAL_UART_DISABLE(huart);
 8003eea:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 8003eee:	2324      	movs	r3, #36	@ 0x24
 8003ef0:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8003ef2:	6813      	ldr	r3, [r2, #0]
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003efa:	bb89      	cbnz	r1, 8003f60 <HAL_UART_Init+0xac>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003efc:	4620      	mov	r0, r4
 8003efe:	f7ff fd13 	bl	8003928 <UART_SetConfig>
 8003f02:	2801      	cmp	r0, #1
 8003f04:	d02a      	beq.n	8003f5c <HAL_UART_Init+0xa8>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f16:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003f1e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003f20:	601a      	str	r2, [r3, #0]
}
 8003f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003f26:	f7ff bf69 	b.w	8003dfc <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003f2a:	4a13      	ldr	r2, [pc, #76]	@ (8003f78 <HAL_UART_Init+0xc4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d0d9      	beq.n	8003ee4 <HAL_UART_Init+0x30>
 8003f30:	f5a2 4274 	sub.w	r2, r2, #62464	@ 0xf400
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d0d5      	beq.n	8003ee4 <HAL_UART_Init+0x30>
 8003f38:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d0d1      	beq.n	8003ee4 <HAL_UART_Init+0x30>
 8003f40:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d0cd      	beq.n	8003ee4 <HAL_UART_Init+0x30>
 8003f48:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d0c9      	beq.n	8003ee4 <HAL_UART_Init+0x30>
 8003f50:	480a      	ldr	r0, [pc, #40]	@ (8003f7c <HAL_UART_Init+0xc8>)
 8003f52:	f240 1131 	movw	r1, #305	@ 0x131
 8003f56:	f000 fb51 	bl	80045fc <assert_failed>
 8003f5a:	e7c3      	b.n	8003ee4 <HAL_UART_Init+0x30>
}
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8003f60:	4620      	mov	r0, r4
 8003f62:	f7ff fe15 	bl	8003b90 <UART_AdvFeatureConfig>
 8003f66:	e7c9      	b.n	8003efc <HAL_UART_Init+0x48>
    huart->Lock = HAL_UNLOCKED;
 8003f68:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f000 fd27 	bl	80049c0 <HAL_UART_MspInit>
 8003f72:	e7ba      	b.n	8003eea <HAL_UART_Init+0x36>
}
 8003f74:	2001      	movs	r0, #1
 8003f76:	4770      	bx	lr
 8003f78:	40013800 	.word	0x40013800
 8003f7c:	080055a0 	.word	0x080055a0

08003f80 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	0000      	movs	r0, r0
	...

08003f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f88:	b500      	push	{lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f8a:	2220      	movs	r2, #32
{
 8003f8c:	b0a7      	sub	sp, #156	@ 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f8e:	2100      	movs	r1, #0
 8003f90:	eb0d 0002 	add.w	r0, sp, r2
 8003f94:	f001 f98a 	bl	80052ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f98:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f9a:	2258      	movs	r2, #88	@ 0x58
 8003f9c:	a810      	add	r0, sp, #64	@ 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f9e:	e9cd 1101 	strd	r1, r1, [sp, #4]
 8003fa2:	e9cd 1103 	strd	r1, r1, [sp, #12]
 8003fa6:	9105      	str	r1, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fa8:	f001 f980 	bl	80052ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003fac:	2001      	movs	r0, #1
 8003fae:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8003fb2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fb6:	2002      	movs	r0, #2
 8003fb8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8003fbc:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fc0:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003fc2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fc6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fc8:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003fca:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fcc:	f7fd fdbe 	bl	8001b4c <HAL_RCC_OscConfig>
 8003fd0:	b108      	cbz	r0, 8003fd6 <SystemClock_Config+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fd4:	e7fe      	b.n	8003fd4 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fd6:	220f      	movs	r2, #15
 8003fd8:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fda:	2102      	movs	r1, #2
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fdc:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003fde:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003fe0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fe4:	e9cd 1302 	strd	r1, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fe8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003fec:	f7fe f922 	bl	8002234 <HAL_RCC_ClockConfig>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	b108      	cbz	r0, 8003ff8 <SystemClock_Config+0x70>
 8003ff4:	b672      	cpsid	i
  while (1)
 8003ff6:	e7fe      	b.n	8003ff6 <SystemClock_Config+0x6e>
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8003ff8:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8004020 <SystemClock_Config+0x98>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM8
 8003ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8004028 <SystemClock_Config+0xa0>)
 8003ffe:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004000:	a810      	add	r0, sp, #64	@ 0x40
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8004002:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004006:	9312      	str	r3, [sp, #72]	@ 0x48
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8004008:	9320      	str	r3, [sp, #128]	@ 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800400a:	f7fe fa57 	bl	80024bc <HAL_RCCEx_PeriphCLKConfig>
 800400e:	b108      	cbz	r0, 8004014 <SystemClock_Config+0x8c>
 8004010:	b672      	cpsid	i
  while (1)
 8004012:	e7fe      	b.n	8004012 <SystemClock_Config+0x8a>
}
 8004014:	b027      	add	sp, #156	@ 0x9c
 8004016:	f85d fb04 	ldr.w	pc, [sp], #4
 800401a:	bf00      	nop
 800401c:	f3af 8000 	nop.w
	...
 8004028:	00302001 	.word	0x00302001

0800402c <main>:
{
 800402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004030:	2400      	movs	r4, #0
{
 8004032:	b095      	sub	sp, #84	@ 0x54
  HAL_Init();
 8004034:	f7fc f91e 	bl	8000274 <HAL_Init>
  SystemClock_Config();
 8004038:	f7ff ffa6 	bl	8003f88 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800403c:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
 8004040:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004044:	4dae      	ldr	r5, [pc, #696]	@ (8004300 <main+0x2d4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004046:	9412      	str	r4, [sp, #72]	@ 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004048:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, ping_drive_Pin|GPIO_PIN_8|LED_out_Pin|GPIO_PIN_10
 800404a:	48ae      	ldr	r0, [pc, #696]	@ (8004304 <main+0x2d8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800404c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004050:	616b      	str	r3, [r5, #20]
 8004052:	696b      	ldr	r3, [r5, #20]
 8004054:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004058:	9306      	str	r3, [sp, #24]
 800405a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800405c:	696b      	ldr	r3, [r5, #20]
 800405e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004062:	616b      	str	r3, [r5, #20]
 8004064:	696b      	ldr	r3, [r5, #20]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800406a:	9307      	str	r3, [sp, #28]
 800406c:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800406e:	696b      	ldr	r3, [r5, #20]
 8004070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004074:	616b      	str	r3, [r5, #20]
 8004076:	696b      	ldr	r3, [r5, #20]
 8004078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407c:	9308      	str	r3, [sp, #32]
 800407e:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004080:	696b      	ldr	r3, [r5, #20]
 8004082:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004086:	616b      	str	r3, [r5, #20]
 8004088:	696b      	ldr	r3, [r5, #20]
 800408a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800408e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004092:	696b      	ldr	r3, [r5, #20]
 8004094:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004098:	616b      	str	r3, [r5, #20]
 800409a:	696b      	ldr	r3, [r5, #20]
 800409c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
  HAL_GPIO_WritePin(GPIOC, ping_drive_Pin|GPIO_PIN_8|LED_out_Pin|GPIO_PIN_10
 80040a0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040a2:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_WritePin(GPIOC, ping_drive_Pin|GPIO_PIN_8|LED_out_Pin|GPIO_PIN_10
 80040a4:	f44f 6174 	mov.w	r1, #3904	@ 0xf40
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  HAL_GPIO_WritePin(GPIOC, ping_drive_Pin|GPIO_PIN_8|LED_out_Pin|GPIO_PIN_10
 80040aa:	f7fd fc37 	bl	800191c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Boot_Charger_GPIO_Port, Boot_Charger_Pin, GPIO_PIN_RESET);
 80040ae:	4622      	mov	r2, r4
 80040b0:	4895      	ldr	r0, [pc, #596]	@ (8004308 <main+0x2dc>)
 80040b2:	2180      	movs	r1, #128	@ 0x80
 80040b4:	f7fd fc32 	bl	800191c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040b8:	2603      	movs	r6, #3
 80040ba:	f243 03bb 	movw	r3, #12475	@ 0x30bb
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040be:	4891      	ldr	r0, [pc, #580]	@ (8004304 <main+0x2d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	9410      	str	r4, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c2:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040c4:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c8:	f7fd fa7e 	bl	80015c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_8
 80040cc:	f649 130b 	movw	r3, #39179	@ 0x990b
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d0:	a90e      	add	r1, sp, #56	@ 0x38
 80040d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d6:	e9cd 640f 	strd	r6, r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_8
 80040da:	930e      	str	r3, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040dc:	f7fd fa74 	bl	80015c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5
 80040e0:	f246 3370 	movw	r3, #25456	@ 0x6370
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e4:	4888      	ldr	r0, [pc, #544]	@ (8004308 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5
 80040e6:	930e      	str	r3, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e8:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ea:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ec:	e9cd 640f 	strd	r6, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f0:	f7fd fa6a 	bl	80015c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040f4:	f44f 6374 	mov.w	r3, #3904	@ 0xf40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040f8:	4882      	ldr	r0, [pc, #520]	@ (8004304 <main+0x2d8>)
 80040fa:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040fc:	e9cd 370e 	strd	r3, r7, [sp, #56]	@ 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004100:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004104:	f7fd fa60 	bl	80015c8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004108:	4880      	ldr	r0, [pc, #512]	@ (800430c <main+0x2e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800410a:	960f      	str	r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800410c:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800410e:	2604      	movs	r6, #4
  GPIO_InitStruct.Pin = Boot_Charger_Pin;
 8004110:	f04f 0880 	mov.w	r8, #128	@ 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004114:	9410      	str	r4, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004116:	960e      	str	r6, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004118:	f7fd fa56 	bl	80015c8 <HAL_GPIO_Init>
  HAL_GPIO_Init(Boot_Charger_GPIO_Port, &GPIO_InitStruct);
 800411c:	487a      	ldr	r0, [pc, #488]	@ (8004308 <main+0x2dc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411e:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(Boot_Charger_GPIO_Port, &GPIO_InitStruct);
 8004120:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004122:	e9cd 740f 	strd	r7, r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pin = Boot_Charger_Pin;
 8004126:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
  HAL_GPIO_Init(Boot_Charger_GPIO_Port, &GPIO_InitStruct);
 800412a:	f7fd fa4d 	bl	80015c8 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800412e:	696b      	ldr	r3, [r5, #20]
 8004130:	f043 0302 	orr.w	r3, r3, #2
 8004134:	616b      	str	r3, [r5, #20]
 8004136:	696b      	ldr	r3, [r5, #20]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	9304      	str	r3, [sp, #16]
 800413e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004140:	696b      	ldr	r3, [r5, #20]
 8004142:	433b      	orrs	r3, r7
 8004144:	616b      	str	r3, [r5, #20]
 8004146:	696b      	ldr	r3, [r5, #20]
  htim3.Instance = TIM3;
 8004148:	4d71      	ldr	r5, [pc, #452]	@ (8004310 <main+0x2e4>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800414a:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800414c:	4622      	mov	r2, r4
 800414e:	4621      	mov	r1, r4
 8004150:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004152:	9305      	str	r3, [sp, #20]
 8004154:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004156:	f7fc ffb1 	bl	80010bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800415a:	200c      	movs	r0, #12
 800415c:	f7fc fff4 	bl	8001148 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8004160:	4622      	mov	r2, r4
 8004162:	4621      	mov	r1, r4
 8004164:	2039      	movs	r0, #57	@ 0x39
 8004166:	f7fc ffa9 	bl	80010bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800416a:	2039      	movs	r0, #57	@ 0x39
 800416c:	f7fc ffec 	bl	8001148 <HAL_NVIC_EnableIRQ>
  htim3.Instance = TIM3;
 8004170:	4b68      	ldr	r3, [pc, #416]	@ (8004314 <main+0x2e8>)
 8004172:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004174:	4628      	mov	r0, r5
  htim3.Init.Period = 52-1;
 8004176:	2333      	movs	r3, #51	@ 0x33
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004178:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
 800417c:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004180:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004184:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004188:	940d      	str	r4, [sp, #52]	@ 0x34
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800418a:	f8c5 8018 	str.w	r8, [r5, #24]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800418e:	612c      	str	r4, [r5, #16]
  htim3.Init.Period = 52-1;
 8004190:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004192:	f7fe ff49 	bl	8003028 <HAL_TIM_Base_Init>
 8004196:	b108      	cbz	r0, 800419c <main+0x170>
 8004198:	b672      	cpsid	i
  while (1)
 800419a:	e7fe      	b.n	800419a <main+0x16e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800419c:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80041a0:	a90e      	add	r1, sp, #56	@ 0x38
 80041a2:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041a4:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80041a8:	f7fe fc60 	bl	8002a6c <HAL_TIM_ConfigClockSource>
 80041ac:	b108      	cbz	r0, 80041b2 <main+0x186>
 80041ae:	b672      	cpsid	i
  while (1)
 80041b0:	e7fe      	b.n	80041b0 <main+0x184>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041b2:	900d      	str	r0, [sp, #52]	@ 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80041b4:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80041b6:	4628      	mov	r0, r5
 80041b8:	a90b      	add	r1, sp, #44	@ 0x2c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80041ba:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80041bc:	f7ff f892 	bl	80032e4 <HAL_TIMEx_MasterConfigSynchronization>
 80041c0:	b108      	cbz	r0, 80041c6 <main+0x19a>
 80041c2:	b672      	cpsid	i
  while (1)
 80041c4:	e7fe      	b.n	80041c4 <main+0x198>
  hopamp2.Instance = OPAMP2;
 80041c6:	4d54      	ldr	r5, [pc, #336]	@ (8004318 <main+0x2ec>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80041c8:	4b54      	ldr	r3, [pc, #336]	@ (800431c <main+0x2f0>)
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80041ca:	6128      	str	r0, [r5, #16]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80041cc:	e9c5 0008 	strd	r0, r0, [r5, #32]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80041d0:	f04f 0b40 	mov.w	fp, #64	@ 0x40
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80041d4:	f04f 0a0c 	mov.w	sl, #12
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO1;
 80041d8:	f44f 3840 	mov.w	r8, #196608	@ 0x30000
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80041dc:	4628      	mov	r0, r5
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80041de:	e9c5 3b00 	strd	r3, fp, [r5]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80041e2:	f8c5 a00c 	str.w	sl, [r5, #12]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO1;
 80041e6:	f8c5 801c 	str.w	r8, [r5, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80041ea:	f7fd fbb1 	bl	8001950 <HAL_OPAMP_Init>
 80041ee:	b988      	cbnz	r0, 8004214 <main+0x1e8>
  hopamp3.Instance = OPAMP3;
 80041f0:	4c4b      	ldr	r4, [pc, #300]	@ (8004320 <main+0x2f4>)
 80041f2:	4b4c      	ldr	r3, [pc, #304]	@ (8004324 <main+0x2f8>)
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80041f4:	6120      	str	r0, [r4, #16]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80041f6:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80041fa:	4620      	mov	r0, r4
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80041fc:	f8c4 b004 	str.w	fp, [r4, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004200:	f8c4 a00c 	str.w	sl, [r4, #12]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO1;
 8004204:	f8c4 801c 	str.w	r8, [r4, #28]
  hopamp3.Instance = OPAMP3;
 8004208:	6023      	str	r3, [r4, #0]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800420a:	f7fd fba1 	bl	8001950 <HAL_OPAMP_Init>
 800420e:	b118      	cbz	r0, 8004218 <main+0x1ec>
 8004210:	b672      	cpsid	i
  while (1)
 8004212:	e7fe      	b.n	8004212 <main+0x1e6>
 8004214:	b672      	cpsid	i
 8004216:	e7fe      	b.n	8004216 <main+0x1ea>
  hopamp4.Instance = OPAMP4;
 8004218:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8004338 <main+0x30c>
 800421c:	4b42      	ldr	r3, [pc, #264]	@ (8004328 <main+0x2fc>)
  hopamp4.Init.Mode = OPAMP_STANDALONE_MODE;
 800421e:	f8c8 0004 	str.w	r0, [r8, #4]
  hopamp4.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8004222:	e9c8 0602 	strd	r0, r6, [r8, #8]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004226:	f8c8 0010 	str.w	r0, [r8, #16]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800422a:	f8c8 0024 	str.w	r0, [r8, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 800422e:	4640      	mov	r0, r8
  hopamp4.Instance = OPAMP4;
 8004230:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8004234:	f7fd fb8c 	bl	8001950 <HAL_OPAMP_Init>
 8004238:	b108      	cbz	r0, 800423e <main+0x212>
 800423a:	b672      	cpsid	i
  while (1)
 800423c:	e7fe      	b.n	800423c <main+0x210>
  htim4.Instance = TIM4;
 800423e:	f8df a0fc 	ldr.w	sl, [pc, #252]	@ 800433c <main+0x310>
 8004242:	4b3a      	ldr	r3, [pc, #232]	@ (800432c <main+0x300>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004244:	900d      	str	r0, [sp, #52]	@ 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004246:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 800424a:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800424e:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004252:	e9ca 0001 	strd	r0, r0, [sl, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004256:	f8ca 0010 	str.w	r0, [sl, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800425a:	f8ca 0018 	str.w	r0, [sl, #24]
  htim4.Instance = TIM4;
 800425e:	f8ca 3000 	str.w	r3, [sl]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004262:	4650      	mov	r0, sl
  htim4.Init.Period = 648;
 8004264:	f44f 7322 	mov.w	r3, #648	@ 0x288
 8004268:	f8ca 300c 	str.w	r3, [sl, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800426c:	f7fe fedc 	bl	8003028 <HAL_TIM_Base_Init>
 8004270:	b108      	cbz	r0, 8004276 <main+0x24a>
 8004272:	b672      	cpsid	i
  while (1)
 8004274:	e7fe      	b.n	8004274 <main+0x248>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004276:	a90e      	add	r1, sp, #56	@ 0x38
 8004278:	4650      	mov	r0, sl
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800427a:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800427e:	f7fe fbf5 	bl	8002a6c <HAL_TIM_ConfigClockSource>
 8004282:	4603      	mov	r3, r0
 8004284:	b108      	cbz	r0, 800428a <main+0x25e>
 8004286:	b672      	cpsid	i
  while (1)
 8004288:	e7fe      	b.n	8004288 <main+0x25c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800428a:	4650      	mov	r0, sl
 800428c:	a90b      	add	r1, sp, #44	@ 0x2c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800428e:	930b      	str	r3, [sp, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004290:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004292:	f7ff f827 	bl	80032e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004296:	4603      	mov	r3, r0
 8004298:	b108      	cbz	r0, 800429e <main+0x272>
 800429a:	b672      	cpsid	i
  while (1)
 800429c:	e7fe      	b.n	800429c <main+0x270>
  ADC_ChannelConfTypeDef sConfig = {0};
 800429e:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 80042a2:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
 80042a6:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
  hadc2.Instance = ADC2;
 80042aa:	4821      	ldr	r0, [pc, #132]	@ (8004330 <main+0x304>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80042ac:	4921      	ldr	r1, [pc, #132]	@ (8004334 <main+0x308>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80042ae:	6083      	str	r3, [r0, #8]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80042b0:	e9c0 730a 	strd	r7, r3, [r0, #40]	@ 0x28
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80042b4:	6103      	str	r3, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80042b6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80042ba:	60c3      	str	r3, [r0, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80042bc:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80042c0:	8303      	strh	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80042c2:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80042c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042c8:	e9c0 1300 	strd	r1, r3, [r0]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80042cc:	6146      	str	r6, [r0, #20]
  hadc2.Init.NbrOfConversion = 1;
 80042ce:	61c7      	str	r7, [r0, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80042d0:	f7fc f894 	bl	80003fc <HAL_ADC_Init>
 80042d4:	b108      	cbz	r0, 80042da <main+0x2ae>
 80042d6:	b672      	cpsid	i
  while (1)
 80042d8:	e7fe      	b.n	80042d8 <main+0x2ac>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80042da:	2300      	movs	r3, #0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80042dc:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  sConfig.Offset = 0;
 80042e0:	9313      	str	r3, [sp, #76]	@ 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80042e2:	2701      	movs	r7, #1
 80042e4:	2308      	movs	r3, #8
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 80042e6:	f04f 0906 	mov.w	r9, #6
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80042ea:	4811      	ldr	r0, [pc, #68]	@ (8004330 <main+0x304>)
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 80042ec:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80042f0:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80042f2:	e9cd 370e 	strd	r3, r7, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80042f6:	f7fc fb8d 	bl	8000a14 <HAL_ADC_ConfigChannel>
 80042fa:	b308      	cbz	r0, 8004340 <main+0x314>
 80042fc:	b672      	cpsid	i
  while (1)
 80042fe:	e7fe      	b.n	80042fe <main+0x2d2>
 8004300:	40021000 	.word	0x40021000
 8004304:	48000800 	.word	0x48000800
 8004308:	48000400 	.word	0x48000400
 800430c:	48000c00 	.word	0x48000c00
 8004310:	200001a0 	.word	0x200001a0
 8004314:	40000400 	.word	0x40000400
 8004318:	200002a0 	.word	0x200002a0
 800431c:	4001003c 	.word	0x4001003c
 8004320:	2000026c 	.word	0x2000026c
 8004324:	40010040 	.word	0x40010040
 8004328:	40010044 	.word	0x40010044
 800432c:	40000800 	.word	0x40000800
 8004330:	2000037c 	.word	0x2000037c
 8004334:	50000100 	.word	0x50000100
 8004338:	20000238 	.word	0x20000238
 800433c:	20000154 	.word	0x20000154
  htim2.Instance = TIM2;
 8004340:	4e9f      	ldr	r6, [pc, #636]	@ (80045c0 <main+0x594>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004342:	900d      	str	r0, [sp, #52]	@ 0x34
  htim2.Instance = TIM2;
 8004344:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004348:	6033      	str	r3, [r6, #0]
  htim2.Init.Period = 312-1;
 800434a:	f240 1337 	movw	r3, #311	@ 0x137
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800434e:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 8004352:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004356:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800435a:	e9c6 0001 	strd	r0, r0, [r6, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800435e:	6130      	str	r0, [r6, #16]
  htim2.Init.Period = 312-1;
 8004360:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004362:	4630      	mov	r0, r6
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004364:	2380      	movs	r3, #128	@ 0x80
 8004366:	61b3      	str	r3, [r6, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004368:	f7fe fe5e 	bl	8003028 <HAL_TIM_Base_Init>
 800436c:	b108      	cbz	r0, 8004372 <main+0x346>
 800436e:	b672      	cpsid	i
  while (1)
 8004370:	e7fe      	b.n	8004370 <main+0x344>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004372:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004376:	a90e      	add	r1, sp, #56	@ 0x38
 8004378:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800437a:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800437c:	f7fe fb76 	bl	8002a6c <HAL_TIM_ConfigClockSource>
 8004380:	b108      	cbz	r0, 8004386 <main+0x35a>
 8004382:	b672      	cpsid	i
  while (1)
 8004384:	e7fe      	b.n	8004384 <main+0x358>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004386:	900d      	str	r0, [sp, #52]	@ 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004388:	f04f 0a20 	mov.w	sl, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800438c:	a90b      	add	r1, sp, #44	@ 0x2c
 800438e:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004390:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004394:	f7fe ffa6 	bl	80032e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004398:	b108      	cbz	r0, 800439e <main+0x372>
 800439a:	b672      	cpsid	i
  while (1)
 800439c:	e7fe      	b.n	800439c <main+0x370>
  hdac1.Instance = DAC1;
 800439e:	f8df b244 	ldr.w	fp, [pc, #580]	@ 80045e4 <main+0x5b8>
 80043a2:	4a88      	ldr	r2, [pc, #544]	@ (80045c4 <main+0x598>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80043a4:	9010      	str	r0, [sp, #64]	@ 0x40
 80043a6:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80043aa:	4658      	mov	r0, fp
  hdac1.Instance = DAC1;
 80043ac:	f8cb 2000 	str.w	r2, [fp]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80043b0:	f7fc fef8 	bl	80011a4 <HAL_DAC_Init>
 80043b4:	4602      	mov	r2, r0
 80043b6:	b108      	cbz	r0, 80043bc <main+0x390>
 80043b8:	b672      	cpsid	i
  while (1)
 80043ba:	e7fe      	b.n	80043ba <main+0x38e>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80043bc:	4658      	mov	r0, fp
 80043be:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80043c0:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80043c4:	f7fc ff12 	bl	80011ec <HAL_DAC_ConfigChannel>
 80043c8:	4603      	mov	r3, r0
 80043ca:	b108      	cbz	r0, 80043d0 <main+0x3a4>
 80043cc:	b672      	cpsid	i
  while (1)
 80043ce:	e7fe      	b.n	80043ce <main+0x3a2>
  huart1.Instance = USART1;
 80043d0:	487d      	ldr	r0, [pc, #500]	@ (80045c8 <main+0x59c>)
  huart1.Init.BaudRate = 115200;
 80043d2:	f8df e214 	ldr.w	lr, [pc, #532]	@ 80045e8 <main+0x5bc>
  huart1.Init.Parity = UART_PARITY_NONE;
 80043d6:	6103      	str	r3, [r0, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043d8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043dc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043e0:	6203      	str	r3, [r0, #32]
  huart1.Init.BaudRate = 115200;
 80043e2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80043e6:	e9c0 e300 	strd	lr, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043ea:	230c      	movs	r3, #12
 80043ec:	6143      	str	r3, [r0, #20]
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80043ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80043f2:	f8c0 a024 	str.w	sl, [r0, #36]	@ 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80043f6:	63c3      	str	r3, [r0, #60]	@ 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043f8:	f7ff fd5c 	bl	8003eb4 <HAL_UART_Init>
 80043fc:	b108      	cbz	r0, 8004402 <main+0x3d6>
 80043fe:	b672      	cpsid	i
  while (1)
 8004400:	e7fe      	b.n	8004400 <main+0x3d4>
  hadc1.Instance = ADC1;
 8004402:	f8df a1e8 	ldr.w	sl, [pc, #488]	@ 80045ec <main+0x5c0>
  ADC_ChannelConfTypeDef sConfig = {0};
 8004406:	9013      	str	r0, [sp, #76]	@ 0x4c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004408:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800440c:	f04f 4ca0 	mov.w	ip, #1342177280	@ 0x50000000
  ADC_MultiModeTypeDef multimode = {0};
 8004410:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8004414:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 8004418:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
 800441c:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004420:	e9ca 700a 	strd	r7, r0, [sl, #40]	@ 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004424:	e9ca c300 	strd	ip, r3, [sl]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004428:	f8ca 0008 	str.w	r0, [sl, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800442c:	f8ca 0010 	str.w	r0, [sl, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004430:	f88a 0020 	strb.w	r0, [sl, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004434:	f8ca 000c 	str.w	r0, [sl, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004438:	f88a 0030 	strb.w	r0, [sl, #48]	@ 0x30
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800443c:	f8aa 0018 	strh.w	r0, [sl, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004440:	f8ca 0034 	str.w	r0, [sl, #52]	@ 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004444:	2304      	movs	r3, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004446:	4650      	mov	r0, sl
  hadc1.Init.NbrOfConversion = 1;
 8004448:	f8ca 701c 	str.w	r7, [sl, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800444c:	f8ca 3014 	str.w	r3, [sl, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004450:	f7fb ffd4 	bl	80003fc <HAL_ADC_Init>
 8004454:	b108      	cbz	r0, 800445a <main+0x42e>
 8004456:	b672      	cpsid	i
  while (1)
 8004458:	e7fe      	b.n	8004458 <main+0x42c>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800445a:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800445c:	a90b      	add	r1, sp, #44	@ 0x2c
 800445e:	4650      	mov	r0, sl
 8004460:	f7fc fd46 	bl	8000ef0 <HAL_ADCEx_MultiModeConfigChannel>
 8004464:	4603      	mov	r3, r0
 8004466:	b108      	cbz	r0, 800446c <main+0x440>
 8004468:	b672      	cpsid	i
  while (1)
 800446a:	e7fe      	b.n	800446a <main+0x43e>
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800446c:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  sConfig.Offset = 0;
 8004470:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004472:	4650      	mov	r0, sl
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004474:	2310      	movs	r3, #16
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004476:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8004478:	e9cd 790f 	strd	r7, r9, [sp, #60]	@ 0x3c
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800447c:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800447e:	f7fc fac9 	bl	8000a14 <HAL_ADC_ConfigChannel>
 8004482:	b108      	cbz	r0, 8004488 <main+0x45c>
 8004484:	b672      	cpsid	i
  while (1)
 8004486:	e7fe      	b.n	8004486 <main+0x45a>
  htim8.Instance = TIM8;
 8004488:	4f50      	ldr	r7, [pc, #320]	@ (80045cc <main+0x5a0>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800448a:	2300      	movs	r3, #0
 800448c:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 8004490:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004494:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004498:	e9c7 3301 	strd	r3, r3, [r7, #4]
  htim8.Init.RepetitionCounter = 0;
 800449c:	e9c7 3304 	strd	r3, r3, [r7, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044a0:	930d      	str	r3, [sp, #52]	@ 0x34
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044a2:	61bb      	str	r3, [r7, #24]
  htim8.Instance = TIM8;
 80044a4:	4b4a      	ldr	r3, [pc, #296]	@ (80045d0 <main+0x5a4>)
 80044a6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80044a8:	4638      	mov	r0, r7
  htim8.Init.Period = 65535;
 80044aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80044b0:	f7fe fdba 	bl	8003028 <HAL_TIM_Base_Init>
 80044b4:	b108      	cbz	r0, 80044ba <main+0x48e>
 80044b6:	b672      	cpsid	i
  while (1)
 80044b8:	e7fe      	b.n	80044b8 <main+0x48c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80044be:	a90e      	add	r1, sp, #56	@ 0x38
 80044c0:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044c2:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80044c4:	f7fe fad2 	bl	8002a6c <HAL_TIM_ConfigClockSource>
 80044c8:	b108      	cbz	r0, 80044ce <main+0x4a2>
 80044ca:	b672      	cpsid	i
  while (1)
 80044cc:	e7fe      	b.n	80044cc <main+0x4a0>
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 80044ce:	2108      	movs	r1, #8
 80044d0:	4638      	mov	r0, r7
 80044d2:	f7fe fe57 	bl	8003184 <HAL_TIM_OnePulse_Init>
 80044d6:	4603      	mov	r3, r0
 80044d8:	b108      	cbz	r0, 80044de <main+0x4b2>
 80044da:	b672      	cpsid	i
  while (1)
 80044dc:	e7fe      	b.n	80044dc <main+0x4b0>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80044de:	a90b      	add	r1, sp, #44	@ 0x2c
 80044e0:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80044e2:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044e6:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80044e8:	f7fe fefc 	bl	80032e4 <HAL_TIMEx_MasterConfigSynchronization>
 80044ec:	b108      	cbz	r0, 80044f2 <main+0x4c6>
 80044ee:	b672      	cpsid	i
  while (1)
 80044f0:	e7fe      	b.n	80044f0 <main+0x4c4>
  hadc4.Instance = ADC4;
 80044f2:	4f38      	ldr	r7, [pc, #224]	@ (80045d4 <main+0x5a8>)
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80044f4:	4a38      	ldr	r2, [pc, #224]	@ (80045d8 <main+0x5ac>)
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80044f6:	60b8      	str	r0, [r7, #8]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80044f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80044fc:	e9c7 2300 	strd	r2, r3, [r7]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8004500:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004504:	f44f 7380 	mov.w	r3, #256	@ 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 8004508:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 800450c:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
 8004510:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8004514:	e9c7 310a 	strd	r3, r1, [r7, #40]	@ 0x28
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004518:	6138      	str	r0, [r7, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800451a:	2304      	movs	r3, #4
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800451c:	f887 0020 	strb.w	r0, [r7, #32]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004520:	60f8      	str	r0, [r7, #12]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8004522:	8338      	strh	r0, [r7, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004524:	6378      	str	r0, [r7, #52]	@ 0x34
  hadc4.Init.NbrOfConversion = 1;
 8004526:	f04f 0901 	mov.w	r9, #1
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800452a:	4638      	mov	r0, r7
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800452c:	617b      	str	r3, [r7, #20]
  hadc4.Init.NbrOfConversion = 1;
 800452e:	f8c7 901c 	str.w	r9, [r7, #28]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8004532:	f887 9030 	strb.w	r9, [r7, #48]	@ 0x30
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8004536:	f7fb ff61 	bl	80003fc <HAL_ADC_Init>
 800453a:	4603      	mov	r3, r0
 800453c:	b108      	cbz	r0, 8004542 <main+0x516>
 800453e:	b672      	cpsid	i
  while (1)
 8004540:	e7fe      	b.n	8004540 <main+0x514>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004542:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  sConfig.Offset = 0;
 8004546:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800454a:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.Channel = ADC_CHANNEL_5;
 800454c:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800454e:	4638      	mov	r0, r7
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004550:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
  sConfig.Channel = ADC_CHANNEL_5;
 8004554:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8004556:	f7fc fa5d 	bl	8000a14 <HAL_ADC_ConfigChannel>
 800455a:	b108      	cbz	r0, 8004560 <main+0x534>
 800455c:	b672      	cpsid	i
  while (1)
 800455e:	e7fe      	b.n	800455e <main+0x532>
  	  unsigned int csr = (unsigned int) hopamp4.Instance->CSR;
 8004560:	f8d8 2000 	ldr.w	r2, [r8]
  	  hopamp2.Instance->CSR |= 1;	// enable op amp!
 8004564:	6828      	ldr	r0, [r5, #0]
  	  unsigned int csr = (unsigned int) hopamp4.Instance->CSR;
 8004566:	6813      	ldr	r3, [r2, #0]
  	  if ((csr & vpsel_mask) != wanted_vpsel)
 8004568:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 80045f0 <main+0x5c4>
    tof_master_main(&hadc4, &htim3, &huart1, &hopamp2, &hopamp3,
 800456c:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 80045f4 <main+0x5c8>
 8004570:	4f15      	ldr	r7, [pc, #84]	@ (80045c8 <main+0x59c>)
 8004572:	4d1a      	ldr	r5, [pc, #104]	@ (80045dc <main+0x5b0>)
  	  if ((csr & vpsel_mask) != wanted_vpsel)
 8004574:	f003 010c 	and.w	r1, r3, #12
 8004578:	2904      	cmp	r1, #4
  		  csr &= ~vpsel_mask;	// reset VP_SEL bits
 800457a:	bf1c      	itt	ne
 800457c:	f023 030c 	bicne.w	r3, r3, #12
  		  csr |= wanted_vpsel;	// VP_SEL = 01 (PB11)
 8004580:	f043 0304 	orrne.w	r3, r3, #4
  	  hopamp4.Instance->CSR = csr;
 8004584:	6013      	str	r3, [r2, #0]
  	  hopamp4.Instance->CSR |= 1;	// enable op amp!
 8004586:	6813      	ldr	r3, [r2, #0]
  	  hopamp3.Instance->CSR |= 1;	// enable op amp!
 8004588:	6821      	ldr	r1, [r4, #0]
  	  hopamp4.Instance->CSR |= 1;	// enable op amp!
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6013      	str	r3, [r2, #0]
  	  hopamp2.Instance->CSR |= 1;	// enable op amp!
 8004590:	6803      	ldr	r3, [r0, #0]
  	  DBGMCU->APB1FZ |= 1;	// stop timer 2 (HIRES_CLK)
 8004592:	4a13      	ldr	r2, [pc, #76]	@ (80045e0 <main+0x5b4>)
  	  hopamp2.Instance->CSR |= 1;	// enable op amp!
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	6003      	str	r3, [r0, #0]
  	  hopamp3.Instance->CSR |= 1;	// enable op amp!
 800459a:	680b      	ldr	r3, [r1, #0]
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	600b      	str	r3, [r1, #0]
  	  DBGMCU->APB1FZ |= 1;	// stop timer 2 (HIRES_CLK)
 80045a2:	6893      	ldr	r3, [r2, #8]
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6093      	str	r3, [r2, #8]
    tof_master_main(&hadc4, &htim3, &huart1, &hopamp2, &hopamp3,
 80045aa:	e9cd 8601 	strd	r8, r6, [sp, #4]
 80045ae:	4809      	ldr	r0, [pc, #36]	@ (80045d4 <main+0x5a8>)
 80045b0:	9400      	str	r4, [sp, #0]
 80045b2:	464b      	mov	r3, r9
 80045b4:	463a      	mov	r2, r7
 80045b6:	4629      	mov	r1, r5
 80045b8:	f000 fe38 	bl	800522c <tof_master_main>
  while (1)
 80045bc:	e7f5      	b.n	80045aa <main+0x57e>
 80045be:	bf00      	nop
 80045c0:	200001ec 	.word	0x200001ec
 80045c4:	40007400 	.word	0x40007400
 80045c8:	2000003c 	.word	0x2000003c
 80045cc:	20000108 	.word	0x20000108
 80045d0:	40013400 	.word	0x40013400
 80045d4:	2000032c 	.word	0x2000032c
 80045d8:	50000500 	.word	0x50000500
 80045dc:	200001a0 	.word	0x200001a0
 80045e0:	e0042000 	.word	0xe0042000
 80045e4:	200002d4 	.word	0x200002d4
 80045e8:	40013800 	.word	0x40013800
 80045ec:	200003cc 	.word	0x200003cc
 80045f0:	200000c4 	.word	0x200000c4
 80045f4:	200002a0 	.word	0x200002a0

080045f8 <Error_Handler>:
 80045f8:	b672      	cpsid	i
  while (1)
 80045fa:	e7fe      	b.n	80045fa <Error_Handler+0x2>

080045fc <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop

08004600 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004600:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <HAL_MspInit+0x30>)
 8004602:	699a      	ldr	r2, [r3, #24]
 8004604:	f042 0201 	orr.w	r2, r2, #1
{
 8004608:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800460a:	619a      	str	r2, [r3, #24]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	f002 0201 	and.w	r2, r2, #1
 8004612:	9200      	str	r2, [sp, #0]
 8004614:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800461c:	61da      	str	r2, [r3, #28]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8004628:	2005      	movs	r0, #5
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800462a:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800462c:	f7fc bd28 	b.w	8001080 <HAL_NVIC_SetPriorityGrouping>
 8004630:	40021000 	.word	0x40021000

08004634 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004634:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8004636:	6803      	ldr	r3, [r0, #0]
{
 8004638:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800463a:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800463c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004640:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004644:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8004648:	940a      	str	r4, [sp, #40]	@ 0x28
  if(hadc->Instance==ADC1)
 800464a:	d021      	beq.n	8004690 <HAL_ADC_MspInit+0x5c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800464c:	4a45      	ldr	r2, [pc, #276]	@ (8004764 <HAL_ADC_MspInit+0x130>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <HAL_ADC_MspInit+0x28>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC4)
 8004652:	4a45      	ldr	r2, [pc, #276]	@ (8004768 <HAL_ADC_MspInit+0x134>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d04c      	beq.n	80046f2 <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8004658:	b00c      	add	sp, #48	@ 0x30
 800465a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 800465c:	4a43      	ldr	r2, [pc, #268]	@ (800476c <HAL_ADC_MspInit+0x138>)
 800465e:	6813      	ldr	r3, [r2, #0]
 8004660:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004662:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004664:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004666:	d039      	beq.n	80046dc <HAL_ADC_MspInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004668:	4b41      	ldr	r3, [pc, #260]	@ (8004770 <HAL_ADC_MspInit+0x13c>)
    HAL_GPIO_Init(Battery_Sense_In_GPIO_Port, &GPIO_InitStruct);
 800466a:	4842      	ldr	r0, [pc, #264]	@ (8004774 <HAL_ADC_MspInit+0x140>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800466c:	695a      	ldr	r2, [r3, #20]
 800466e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8004672:	615a      	str	r2, [r3, #20]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800467a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = Battery_Sense_In_Pin;
 800467c:	2404      	movs	r4, #4
 800467e:	2503      	movs	r5, #3
    HAL_GPIO_Init(Battery_Sense_In_GPIO_Port, &GPIO_InitStruct);
 8004680:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = Battery_Sense_In_Pin;
 8004682:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004686:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(Battery_Sense_In_GPIO_Port, &GPIO_InitStruct);
 8004688:	f7fc ff9e 	bl	80015c8 <HAL_GPIO_Init>
}
 800468c:	b00c      	add	sp, #48	@ 0x30
 800468e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004690:	4a36      	ldr	r2, [pc, #216]	@ (800476c <HAL_ADC_MspInit+0x138>)
 8004692:	6813      	ldr	r3, [r2, #0]
 8004694:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004696:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004698:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800469a:	d014      	beq.n	80046c6 <HAL_ADC_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800469c:	4b34      	ldr	r3, [pc, #208]	@ (8004770 <HAL_ADC_MspInit+0x13c>)
 800469e:	695a      	ldr	r2, [r3, #20]
 80046a0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80046a4:	615a      	str	r2, [r3, #20]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = Thermistor_Pin;
 80046ae:	2404      	movs	r4, #4
 80046b0:	2503      	movs	r5, #3
    HAL_GPIO_Init(Thermistor_GPIO_Port, &GPIO_InitStruct);
 80046b2:	a906      	add	r1, sp, #24
 80046b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = Thermistor_Pin;
 80046b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046bc:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(Thermistor_GPIO_Port, &GPIO_InitStruct);
 80046be:	f7fc ff83 	bl	80015c8 <HAL_GPIO_Init>
}
 80046c2:	b00c      	add	sp, #48	@ 0x30
 80046c4:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 80046c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004770 <HAL_ADC_MspInit+0x13c>)
 80046c8:	695a      	ldr	r2, [r3, #20]
 80046ca:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80046ce:	615a      	str	r2, [r3, #20]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	9b00      	ldr	r3, [sp, #0]
 80046da:	e7df      	b.n	800469c <HAL_ADC_MspInit+0x68>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80046dc:	4b24      	ldr	r3, [pc, #144]	@ (8004770 <HAL_ADC_MspInit+0x13c>)
 80046de:	695a      	ldr	r2, [r3, #20]
 80046e0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80046e4:	615a      	str	r2, [r3, #20]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ec:	9302      	str	r3, [sp, #8]
 80046ee:	9b02      	ldr	r3, [sp, #8]
 80046f0:	e7ba      	b.n	8004668 <HAL_ADC_MspInit+0x34>
    __HAL_RCC_ADC34_CLK_ENABLE();
 80046f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004770 <HAL_ADC_MspInit+0x13c>)
    hdma_adc4.Instance = DMA2_Channel2;
 80046f4:	4e20      	ldr	r6, [pc, #128]	@ (8004778 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 80046f6:	695a      	ldr	r2, [r3, #20]
 80046f8:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80046fc:	615a      	str	r2, [r3, #20]
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8004704:	9204      	str	r2, [sp, #16]
 8004706:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004708:	695a      	ldr	r2, [r3, #20]
 800470a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800470e:	615a      	str	r2, [r3, #20]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004716:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = Rcv_Siganl_In_Pin;
 8004718:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    HAL_GPIO_Init(Rcv_Siganl_In_GPIO_Port, &GPIO_InitStruct);
 800471c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = Rcv_Siganl_In_Pin;
 800471e:	2303      	movs	r3, #3
 8004720:	4605      	mov	r5, r0
    HAL_GPIO_Init(Rcv_Siganl_In_GPIO_Port, &GPIO_InitStruct);
 8004722:	4816      	ldr	r0, [pc, #88]	@ (800477c <HAL_ADC_MspInit+0x148>)
    GPIO_InitStruct.Pin = Rcv_Siganl_In_Pin;
 8004724:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004728:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(Rcv_Siganl_In_GPIO_Port, &GPIO_InitStruct);
 800472a:	f7fc ff4d 	bl	80015c8 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 800472e:	4b14      	ldr	r3, [pc, #80]	@ (8004780 <HAL_ADC_MspInit+0x14c>)
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8004730:	60b4      	str	r4, [r6, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8004732:	2280      	movs	r2, #128	@ 0x80
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004734:	e9c6 3400 	strd	r3, r4, [r6]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004738:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800473c:	e9c6 2303 	strd	r2, r3, [r6, #12]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004740:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004744:	2220      	movs	r2, #32
    hdma_adc4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004746:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800474a:	4630      	mov	r0, r6
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800474c:	e9c6 1205 	strd	r1, r2, [r6, #20]
    hdma_adc4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004750:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8004752:	f7fc fd9d 	bl	8001290 <HAL_DMA_Init>
 8004756:	b910      	cbnz	r0, 800475e <HAL_ADC_MspInit+0x12a>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8004758:	63ae      	str	r6, [r5, #56]	@ 0x38
 800475a:	6275      	str	r5, [r6, #36]	@ 0x24
}
 800475c:	e77c      	b.n	8004658 <HAL_ADC_MspInit+0x24>
      Error_Handler();
 800475e:	f7ff ff4b 	bl	80045f8 <Error_Handler>
 8004762:	e7f9      	b.n	8004758 <HAL_ADC_MspInit+0x124>
 8004764:	50000100 	.word	0x50000100
 8004768:	50000500 	.word	0x50000500
 800476c:	2000041c 	.word	0x2000041c
 8004770:	40021000 	.word	0x40021000
 8004774:	48000800 	.word	0x48000800
 8004778:	200002e8 	.word	0x200002e8
 800477c:	48000400 	.word	0x48000400
 8004780:	4002041c 	.word	0x4002041c
 8004784:	00000000 	.word	0x00000000

08004788 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004788:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 800478a:	4a1b      	ldr	r2, [pc, #108]	@ (80047f8 <HAL_DAC_MspInit+0x70>)
 800478c:	6801      	ldr	r1, [r0, #0]
{
 800478e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004790:	2300      	movs	r3, #0
  if(hdac->Instance==DAC1)
 8004792:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004794:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004798:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800479c:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC1)
 800479e:	d002      	beq.n	80047a6 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80047a0:	b009      	add	sp, #36	@ 0x24
 80047a2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 80047a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047aa:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80047ae:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80047f0 <HAL_DAC_MspInit+0x68>
    __HAL_RCC_DAC1_CLK_ENABLE();
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80047b8:	61da      	str	r2, [r3, #28]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 80047c0:	9200      	str	r2, [sp, #0]
 80047c2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047c4:	695a      	ldr	r2, [r3, #20]
 80047c6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80047ca:	615a      	str	r2, [r3, #20]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d4:	a902      	add	r1, sp, #8
 80047d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80047da:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047de:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047e0:	f7fc fef2 	bl	80015c8 <HAL_GPIO_Init>
}
 80047e4:	b009      	add	sp, #36	@ 0x24
 80047e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80047ea:	bf00      	nop
 80047ec:	f3af 8000 	nop.w
 80047f0:	00000010 	.word	0x00000010
 80047f4:	00000003 	.word	0x00000003
 80047f8:	40007400 	.word	0x40007400
 80047fc:	00000000 	.word	0x00000000

08004800 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004800:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP2)
 8004802:	6802      	ldr	r2, [r0, #0]
 8004804:	4934      	ldr	r1, [pc, #208]	@ (80048d8 <HAL_OPAMP_MspInit+0xd8>)
{
 8004806:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004808:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP2)
 800480a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800480c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004810:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004814:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP2)
 8004816:	d008      	beq.n	800482a <HAL_OPAMP_MspInit+0x2a>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 8004818:	4b30      	ldr	r3, [pc, #192]	@ (80048dc <HAL_OPAMP_MspInit+0xdc>)
 800481a:	429a      	cmp	r2, r3
 800481c:	d01e      	beq.n	800485c <HAL_OPAMP_MspInit+0x5c>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP4)
 800481e:	4b30      	ldr	r3, [pc, #192]	@ (80048e0 <HAL_OPAMP_MspInit+0xe0>)
 8004820:	429a      	cmp	r2, r3
 8004822:	d033      	beq.n	800488c <HAL_OPAMP_MspInit+0x8c>
  /* USER CODE BEGIN OPAMP4_MspInit 1 */

  /* USER CODE END OPAMP4_MspInit 1 */
  }

}
 8004824:	b00b      	add	sp, #44	@ 0x2c
 8004826:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800482a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800482e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004832:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 80048c0 <HAL_OPAMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800483c:	615a      	str	r2, [r3, #20]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004844:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004846:	a904      	add	r1, sp, #16
 8004848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800484c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004850:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004852:	f7fc feb9 	bl	80015c8 <HAL_GPIO_Init>
}
 8004856:	b00b      	add	sp, #44	@ 0x2c
 8004858:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800485c:	f503 3387 	add.w	r3, r3, #69120	@ 0x10e00
 8004860:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8004864:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004866:	481f      	ldr	r0, [pc, #124]	@ (80048e4 <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004868:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800486c:	615a      	str	r2, [r3, #20]
 800486e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004870:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80048c8 <HAL_OPAMP_MspInit+0xc8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004874:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004878:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800487a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800487c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004880:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004882:	f7fc fea1 	bl	80015c8 <HAL_GPIO_Init>
}
 8004886:	b00b      	add	sp, #44	@ 0x2c
 8004888:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800488c:	f503 3387 	add.w	r3, r3, #69120	@ 0x10e00
 8004890:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004894:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004896:	4813      	ldr	r0, [pc, #76]	@ (80048e4 <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004898:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800489c:	615a      	str	r2, [r3, #20]
 800489e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80048a0:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80048d0 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048a8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048aa:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80048ac:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048b0:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b2:	f7fc fe89 	bl	80015c8 <HAL_GPIO_Init>
}
 80048b6:	b00b      	add	sp, #44	@ 0x2c
 80048b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80048bc:	f3af 8000 	nop.w
 80048c0:	000000e0 	.word	0x000000e0
 80048c4:	00000003 	.word	0x00000003
 80048c8:	00000007 	.word	0x00000007
 80048cc:	00000003 	.word	0x00000003
 80048d0:	00001c00 	.word	0x00001c00
 80048d4:	00000003 	.word	0x00000003
 80048d8:	4001003c 	.word	0x4001003c
 80048dc:	40010040 	.word	0x40010040
 80048e0:	40010044 	.word	0x40010044
 80048e4:	48000400 	.word	0x48000400

080048e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048e8:	b530      	push	{r4, r5, lr}
  if(htim_base->Instance==TIM2)
 80048ea:	6803      	ldr	r3, [r0, #0]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
{
 80048f0:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM2)
 80048f2:	d022      	beq.n	800493a <HAL_TIM_Base_MspInit+0x52>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80048f4:	4a2c      	ldr	r2, [pc, #176]	@ (80049a8 <HAL_TIM_Base_MspInit+0xc0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d007      	beq.n	800490a <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80048fa:	4a2c      	ldr	r2, [pc, #176]	@ (80049ac <HAL_TIM_Base_MspInit+0xc4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d010      	beq.n	8004922 <HAL_TIM_Base_MspInit+0x3a>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 8004900:	4a2b      	ldr	r2, [pc, #172]	@ (80049b0 <HAL_TIM_Base_MspInit+0xc8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d041      	beq.n	800498a <HAL_TIM_Base_MspInit+0xa2>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004906:	b005      	add	sp, #20
 8004908:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800490a:	4b2a      	ldr	r3, [pc, #168]	@ (80049b4 <HAL_TIM_Base_MspInit+0xcc>)
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	f042 0202 	orr.w	r2, r2, #2
 8004912:	61da      	str	r2, [r3, #28]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	9301      	str	r3, [sp, #4]
 800491c:	9b01      	ldr	r3, [sp, #4]
}
 800491e:	b005      	add	sp, #20
 8004920:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004922:	4b24      	ldr	r3, [pc, #144]	@ (80049b4 <HAL_TIM_Base_MspInit+0xcc>)
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	f042 0204 	orr.w	r2, r2, #4
 800492a:	61da      	str	r2, [r3, #28]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	9302      	str	r3, [sp, #8]
 8004934:	9b02      	ldr	r3, [sp, #8]
}
 8004936:	b005      	add	sp, #20
 8004938:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800493a:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    hdma_tim2_up.Instance = DMA1_Channel2;
 800493e:	4d1e      	ldr	r5, [pc, #120]	@ (80049b8 <HAL_TIM_Base_MspInit+0xd0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004940:	69da      	ldr	r2, [r3, #28]
    hdma_tim2_up.Instance = DMA1_Channel2;
 8004942:	491e      	ldr	r1, [pc, #120]	@ (80049bc <HAL_TIM_Base_MspInit+0xd4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004944:	f042 0201 	orr.w	r2, r2, #1
 8004948:	61da      	str	r2, [r3, #28]
 800494a:	69db      	ldr	r3, [r3, #28]
    hdma_tim2_up.Instance = DMA1_Channel2;
 800494c:	6029      	str	r1, [r5, #0]
    __HAL_RCC_TIM2_CLK_ENABLE();
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	9300      	str	r3, [sp, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004954:	2110      	movs	r1, #16
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8004956:	2300      	movs	r3, #0
 8004958:	e9c5 1301 	strd	r1, r3, [r5, #4]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 800495c:	2280      	movs	r2, #128	@ 0x80
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800495e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004962:	e9c5 2303 	strd	r2, r3, [r5, #12]
 8004966:	4604      	mov	r4, r0
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004968:	f44f 6100 	mov.w	r1, #2048	@ 0x800
    __HAL_RCC_TIM2_CLK_ENABLE();
 800496c:	9800      	ldr	r0, [sp, #0]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800496e:	2220      	movs	r2, #32
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
 8004970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8004974:	4628      	mov	r0, r5
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004976:	e9c5 1205 	strd	r1, r2, [r5, #20]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
 800497a:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 800497c:	f7fc fc88 	bl	8001290 <HAL_DMA_Init>
 8004980:	b978      	cbnz	r0, 80049a2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8004982:	6225      	str	r5, [r4, #32]
 8004984:	626c      	str	r4, [r5, #36]	@ 0x24
}
 8004986:	b005      	add	sp, #20
 8004988:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM8_CLK_ENABLE();
 800498a:	4b0a      	ldr	r3, [pc, #40]	@ (80049b4 <HAL_TIM_Base_MspInit+0xcc>)
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004992:	619a      	str	r2, [r3, #24]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800499a:	9303      	str	r3, [sp, #12]
 800499c:	9b03      	ldr	r3, [sp, #12]
}
 800499e:	b005      	add	sp, #20
 80049a0:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80049a2:	f7ff fe29 	bl	80045f8 <Error_Handler>
 80049a6:	e7ec      	b.n	8004982 <HAL_TIM_Base_MspInit+0x9a>
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40000800 	.word	0x40000800
 80049b0:	40013400 	.word	0x40013400
 80049b4:	40021000 	.word	0x40021000
 80049b8:	200000c4 	.word	0x200000c4
 80049bc:	4002001c 	.word	0x4002001c

080049c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049c0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 80049c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004a40 <HAL_UART_MspInit+0x80>)
 80049c4:	6801      	ldr	r1, [r0, #0]
{
 80049c6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c8:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 80049ca:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049cc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80049d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80049d4:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART1)
 80049d6:	d001      	beq.n	80049dc <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80049d8:	b008      	add	sp, #32
 80049da:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80049dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049e0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80049e4:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8004a38 <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART1_CLK_ENABLE();
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049ee:	619a      	str	r2, [r3, #24]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80049f6:	9200      	str	r2, [sp, #0]
 80049f8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fa:	695a      	ldr	r2, [r3, #20]
 80049fc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004a00:	615a      	str	r2, [r3, #20]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a08:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a0a:	2403      	movs	r4, #3
 8004a0c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a0e:	a902      	add	r1, sp, #8
 8004a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a14:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a18:	e9cd 4305 	strd	r4, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a1c:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a1e:	f7fc fdd3 	bl	80015c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 3);
 8004a22:	4622      	mov	r2, r4
 8004a24:	4621      	mov	r1, r4
 8004a26:	2025      	movs	r0, #37	@ 0x25
 8004a28:	f7fc fb48 	bl	80010bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a2c:	2025      	movs	r0, #37	@ 0x25
 8004a2e:	f7fc fb8b 	bl	8001148 <HAL_NVIC_EnableIRQ>
}
 8004a32:	b008      	add	sp, #32
 8004a34:	bd10      	pop	{r4, pc}
 8004a36:	bf00      	nop
 8004a38:	00000600 	.word	0x00000600
 8004a3c:	00000002 	.word	0x00000002
 8004a40:	40013800 	.word	0x40013800

08004a44 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a44:	f7fb bc28 	b.w	8000298 <HAL_IncTick>

08004a48 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8004a48:	4801      	ldr	r0, [pc, #4]	@ (8004a50 <DMA1_Channel2_IRQHandler+0x8>)
 8004a4a:	f7fc bd73 	b.w	8001534 <HAL_DMA_IRQHandler>
 8004a4e:	bf00      	nop
 8004a50:	200000c4 	.word	0x200000c4

08004a54 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a54:	4801      	ldr	r0, [pc, #4]	@ (8004a5c <USART1_IRQHandler+0x8>)
 8004a56:	f7fe bdd3 	b.w	8003600 <HAL_UART_IRQHandler>
 8004a5a:	bf00      	nop
 8004a5c:	2000003c 	.word	0x2000003c

08004a60 <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8004a60:	4801      	ldr	r0, [pc, #4]	@ (8004a68 <DMA2_Channel2_IRQHandler+0x8>)
 8004a62:	f7fc bd67 	b.w	8001534 <HAL_DMA_IRQHandler>
 8004a66:	bf00      	nop
 8004a68:	200002e8 	.word	0x200002e8

08004a6c <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a6c:	4815      	ldr	r0, [pc, #84]	@ (8004ac4 <SystemInit+0x58>)
#endif

/* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004a6e:	4b16      	ldr	r3, [pc, #88]	@ (8004ac8 <SystemInit+0x5c>)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a70:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004a74:	4a15      	ldr	r2, [pc, #84]	@ (8004acc <SystemInit+0x60>)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a76:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
{
 8004a7a:	b410      	push	{r4}
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a7c:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
  RCC->CR |= 0x00000001U;
 8004a80:	6818      	ldr	r0, [r3, #0]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004a82:	4913      	ldr	r1, [pc, #76]	@ (8004ad0 <SystemInit+0x64>)
  RCC->CR |= 0x00000001U;
 8004a84:	f040 0001 	orr.w	r0, r0, #1
 8004a88:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 8004a8a:	685c      	ldr	r4, [r3, #4]
 8004a8c:	4022      	ands	r2, r4
 8004a8e:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8004a90:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a92:	f85d 4b04 	ldr.w	r4, [sp], #4
  RCC->CR &= 0xFEF6FFFFU;
 8004a96:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8004a9a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004a9e:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004aa6:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	f422 02fe 	bic.w	r2, r2, #8323072	@ 0x7f0000
 8004aae:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab2:	f022 020f 	bic.w	r2, r2, #15
 8004ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004ab8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  RCC->CIR = 0x00000000U;
 8004aba:	2000      	movs	r0, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004abc:	4011      	ands	r1, r2
 8004abe:	6319      	str	r1, [r3, #48]	@ 0x30
  RCC->CIR = 0x00000000U;
 8004ac0:	6098      	str	r0, [r3, #8]
}
 8004ac2:	4770      	bx	lr
 8004ac4:	e000ed00 	.word	0xe000ed00
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	f87fc00c 	.word	0xf87fc00c
 8004ad0:	ff00fccc 	.word	0xff00fccc

08004ad4 <_ZN11IndexInfoTXC1EP20__UART_HandleTypeDef>:

#include "main.h"
#include "index_info_tx.h"

IndexInfoTX :: IndexInfoTX(UART_HandleTypeDef* p_huart) {
    this->p_huart = p_huart;
 8004ad4:	6001      	str	r1, [r0, #0]
}
 8004ad6:	4770      	bx	lr

08004ad8 <_ZN11IndexInfoTX14transmit_err_1Eii>:
/*
Args:
 - buffer index
 - index prefix
*/
void IndexInfoTX :: transmit_err_1(int buf_idx, int pre_idx) {
 8004ad8:	4603      	mov	r3, r0
    send_buf[0] = IdxInfoHeader::ERR_1;
    *((uint16_t*)(send_buf + 1)) = (uint16_t) buf_idx;
    *((uint16_t*)(send_buf + 3)) = (uint16_t) pre_idx;
    send_buf[5] = 0;
    send_buf[6] = 0;
	HAL_UART_Transmit_IT(p_huart, send_buf, IITX_PACKET_LEN);
 8004ada:	4684      	mov	ip, r0
    send_buf[0] = IdxInfoHeader::ERR_1;
 8004adc:	20f8      	movs	r0, #248	@ 0xf8
 8004ade:	7118      	strb	r0, [r3, #4]
    send_buf[5] = 0;
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	f8a3 0009 	strh.w	r0, [r3, #9]
	HAL_UART_Transmit_IT(p_huart, send_buf, IITX_PACKET_LEN);
 8004ae6:	f85c 0b04 	ldr.w	r0, [ip], #4
    *((uint16_t*)(send_buf + 1)) = (uint16_t) buf_idx;
 8004aea:	f8a3 1005 	strh.w	r1, [r3, #5]
    *((uint16_t*)(send_buf + 3)) = (uint16_t) pre_idx;
 8004aee:	f8a3 2007 	strh.w	r2, [r3, #7]
	HAL_UART_Transmit_IT(p_huart, send_buf, IITX_PACKET_LEN);
 8004af2:	4661      	mov	r1, ip
 8004af4:	2207      	movs	r2, #7
 8004af6:	f7fe bd3f 	b.w	8003578 <HAL_UART_Transmit_IT>
 8004afa:	bf00      	nop

08004afc <_ZN15MaxPeakDetectorC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDefP11IndexInfoTX>:
    search_threshold_reduction = 5; 
    search_window = 200;
    dead_zone_len = 4000;
    search_threshold = 2500;
*/
MaxPeakDetector :: MaxPeakDetector(ADC_HandleTypeDef* p_hadc, TIM_HandleTypeDef* p_htim, IndexInfoTX* p_index_info_tx) {
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	460d      	mov	r5, r1
    this->p_hadc = p_hadc;
    this->p_htim = p_htim;
    this->p_index_info_tx = p_index_info_tx;

	//initialise search sub-state:
	search_sub_state = MPDSearchState::FIND_SIGNAL;
 8004b00:	2100      	movs	r1, #0
 8004b02:	e9c0 3102 	strd	r3, r1, [r0, #8]
    //initialise start index of adc buffer (start half way through DMA will start at beginning):
    cur_idx = BUF_LEN/2;

    //set default parameter values:
    min_aid = false;
    search_threshold_reduction = 5; 
 8004b06:	f04f 33ff 	mov.w	r3, #4294967295
    this->p_htim = p_htim;
 8004b0a:	e9c0 5200 	strd	r5, r2, [r0]
    search_threshold_reduction = 5; 
 8004b0e:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
MaxPeakDetector :: MaxPeakDetector(ADC_HandleTypeDef* p_hadc, TIM_HandleTypeDef* p_htim, IndexInfoTX* p_index_info_tx) {
 8004b12:	4616      	mov	r6, r2
    search_threshold_reduction = 5; 
 8004b14:	2364      	movs	r3, #100	@ 0x64
 8004b16:	2205      	movs	r2, #5
 8004b18:	e9c0 110c 	strd	r1, r1, [r0, #48]	@ 0x30
 8004b1c:	e9c0 1110 	strd	r1, r1, [r0, #64]	@ 0x40
 8004b20:	e9c0 1112 	strd	r1, r1, [r0, #72]	@ 0x48
 8004b24:	e9c0 2305 	strd	r2, r3, [r0, #20]
    min_aid = false;
 8004b28:	7401      	strb	r1, [r0, #16]
    search_threshold_reduction = 5; 
 8004b2a:	6241      	str	r1, [r0, #36]	@ 0x24
 8004b2c:	6381      	str	r1, [r0, #56]	@ 0x38
MaxPeakDetector :: MaxPeakDetector(ADC_HandleTypeDef* p_hadc, TIM_HandleTypeDef* p_htim, IndexInfoTX* p_index_info_tx) {
 8004b2e:	4604      	mov	r4, r0
    search_threshold_reduction = 5; 
 8004b30:	f640 0334 	movw	r3, #2100	@ 0x834
 8004b34:	f243 40bc 	movw	r0, #13500	@ 0x34bc
 8004b38:	e9c4 0307 	strd	r0, r3, [r4, #28]
    window_count = 0;
    dead_zone_count = 0;

	//zero initialise the adc buffer:
	for (int i = 0; i < BUF_LEN; i++) {
		buf[i] = 0;
 8004b3c:	4f0b      	ldr	r7, [pc, #44]	@ (8004b6c <_ZN15MaxPeakDetectorC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDefP11IndexInfoTX+0x70>)
    search_threshold_reduction = 5; 
 8004b3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b42:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8004b44:	f242 3328 	movw	r3, #9000	@ 0x2328
 8004b48:	6523      	str	r3, [r4, #80]	@ 0x50
		buf[i] = 0;
 8004b4a:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8004b4e:	4638      	mov	r0, r7
 8004b50:	f000 fbac 	bl	80052ac <memset>
	}

	//start ADC timer
	HAL_TIM_Base_Start(p_htim);
 8004b54:	4630      	mov	r0, r6
 8004b56:	f7fd ff1b 	bl	8002990 <HAL_TIM_Base_Start>
	// Start DMA
	HAL_ADC_Start_DMA(p_hadc, (uint32_t*)buf, BUF_LEN);
 8004b5a:	f244 6250 	movw	r2, #18000	@ 0x4650
 8004b5e:	4639      	mov	r1, r7
 8004b60:	4628      	mov	r0, r5
 8004b62:	f7fb fe95 	bl	8000890 <HAL_ADC_Start_DMA>
}
 8004b66:	4620      	mov	r0, r4
 8004b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000424 	.word	0x20000424

08004b70 <_ZN15MaxPeakDetector11search_loopEv>:
    last_peak_pfx = -1;
    return tmsp;
}


void MaxPeakDetector :: search_loop() {
 8004b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b72:	4946      	ldr	r1, [pc, #280]	@ (8004c8c <_ZN15MaxPeakDetector11search_loopEv+0x11c>)
 8004b74:	4d46      	ldr	r5, [pc, #280]	@ (8004c90 <_ZN15MaxPeakDetector11search_loopEv+0x120>)
    int peak_found = false;

	while (1) {
		cur_val = buf[cur_idx];

		switch (search_sub_state)
 8004b76:	68c2      	ldr	r2, [r0, #12]
		cur_val = buf[cur_idx];
 8004b78:	6d03      	ldr	r3, [r0, #80]	@ 0x50
		switch (search_sub_state)
 8004b7a:	2a01      	cmp	r2, #1
		cur_val = buf[cur_idx];
 8004b7c:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
		switch (search_sub_state)
 8004b80:	d02f      	beq.n	8004be2 <_ZN15MaxPeakDetector11search_loopEv+0x72>
 8004b82:	2a02      	cmp	r2, #2
 8004b84:	d01a      	beq.n	8004bbc <_ZN15MaxPeakDetector11search_loopEv+0x4c>
 8004b86:	b942      	cbnz	r2, 8004b9a <_ZN15MaxPeakDetector11search_loopEv+0x2a>
		{	
			case MPDSearchState::FIND_SIGNAL: //------------------------------------------------------------------
				if (cur_val > search_threshold) {
 8004b88:	6a02      	ldr	r2, [r0, #32]
 8004b8a:	42a2      	cmp	r2, r4
					search_sub_state = MPDSearchState::FIND_WINDOW_MAX;
 8004b8c:	bfb8      	it	lt
 8004b8e:	2201      	movlt	r2, #1
				}

				cur_idx += 3;
 8004b90:	f103 0303 	add.w	r3, r3, #3
					search_sub_state = MPDSearchState::FIND_WINDOW_MAX;
 8004b94:	bfb8      	it	lt
 8004b96:	60c2      	strlt	r2, [r0, #12]
				cur_idx += 3;
 8004b98:	6503      	str	r3, [r0, #80]	@ 0x50
		// conditions to escape search mode
        if (peak_found) { // we found a peak and need to terminate
            peak_found = false;
            global_state = MPDState::IDLE;
			break;
		} else if ((global_state == MPDState::PROC_BUF_1ST_HLF) && (cur_idx >= (BUF_LEN/2))) {
 8004b9a:	680b      	ldr	r3, [r1, #0]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d006      	beq.n	8004bae <_ZN15MaxPeakDetector11search_loopEv+0x3e>
			global_state = MPDState::IDLE;
			break;
		} else if (global_state == MPDState::PROC_BUF_2ND_HLF && (cur_idx >= (BUF_LEN))) {
 8004ba0:	680b      	ldr	r3, [r1, #0]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d04f      	beq.n	8004c46 <_ZN15MaxPeakDetector11search_loopEv+0xd6>
			global_state = MPDState::IDLE;
			cur_idx = 0;
			break;
		} else if (global_state == MPDState::ERROR_1) {
 8004ba6:	680b      	ldr	r3, [r1, #0]
 8004ba8:	2b03      	cmp	r3, #3
 8004baa:	d1e4      	bne.n	8004b76 <_ZN15MaxPeakDetector11search_loopEv+0x6>
			break;
		} 
	} //while

}
 8004bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if ((global_state == MPDState::PROC_BUF_1ST_HLF) && (cur_idx >= (BUF_LEN/2))) {
 8004bae:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004bb0:	f242 3327 	movw	r3, #8999	@ 0x2327
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	dc65      	bgt.n	8004c84 <_ZN15MaxPeakDetector11search_loopEv+0x114>
		} else if (global_state == MPDState::PROC_BUF_2ND_HLF && (cur_idx >= (BUF_LEN))) {
 8004bb8:	680b      	ldr	r3, [r1, #0]
 8004bba:	e7f4      	b.n	8004ba6 <_ZN15MaxPeakDetector11search_loopEv+0x36>
                if (dead_zone_len > 0) {
 8004bbc:	69c2      	ldr	r2, [r0, #28]
 8004bbe:	2a00      	cmp	r2, #0
 8004bc0:	dd54      	ble.n	8004c6c <_ZN15MaxPeakDetector11search_loopEv+0xfc>
                    cur_idx = (cur_idx + dead_zone_len) % BUF_LEN;
 8004bc2:	4c34      	ldr	r4, [pc, #208]	@ (8004c94 <_ZN15MaxPeakDetector11search_loopEv+0x124>)
 8004bc4:	4413      	add	r3, r2
 8004bc6:	fb84 2403 	smull	r2, r4, r4, r3
 8004bca:	17da      	asrs	r2, r3, #31
 8004bcc:	ebc2 3264 	rsb	r2, r2, r4, asr #13
 8004bd0:	f244 6450 	movw	r4, #18000	@ 0x4650
 8004bd4:	fb04 3212 	mls	r2, r4, r2, r3
                search_sub_state = MPDSearchState::FIND_SIGNAL;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	6502      	str	r2, [r0, #80]	@ 0x50
 8004bdc:	60c3      	str	r3, [r0, #12]
            global_state = MPDState::IDLE;
 8004bde:	600b      	str	r3, [r1, #0]
}
 8004be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				window_count++;
 8004be2:	6c82      	ldr	r2, [r0, #72]	@ 0x48
				if (window_count > search_window) { // window is complete
 8004be4:	6987      	ldr	r7, [r0, #24]
                        last_peak_val = tentative_max_val;
 8004be6:	6b06      	ldr	r6, [r0, #48]	@ 0x30
				window_count++;
 8004be8:	3201      	adds	r2, #1
				if (window_count > search_window) { // window is complete
 8004bea:	42ba      	cmp	r2, r7
				window_count++;
 8004bec:	6482      	str	r2, [r0, #72]	@ 0x48
				if (window_count > search_window) { // window is complete
 8004bee:	dd33      	ble.n	8004c58 <_ZN15MaxPeakDetector11search_loopEv+0xe8>
                    if (min_aid) {
 8004bf0:	7c02      	ldrb	r2, [r0, #16]
                        Timestamp max_tmsp(tentative_max_idx, tentative_max_pfx);
 8004bf2:	e9d0 740d 	ldrd	r7, r4, [r0, #52]	@ 0x34
                    if (min_aid) {
 8004bf6:	b1b2      	cbz	r2, 8004c26 <_ZN15MaxPeakDetector11search_loopEv+0xb6>

/*
* Returns the total timestamp integer from the Timestamp object
*/
int Timestamp::get_total(void) {
    return idx + BUF_LEN*pfx;
 8004bf8:	f244 6c50 	movw	ip, #18000	@ 0x4650
 8004bfc:	fb0c 7704 	mla	r7, ip, r4, r7
 8004c00:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004c02:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004c04:	fb0c 2204 	mla	r2, ip, r4, r2
                        Timestamp average_tmsp = Timestamp::from_total((min_tmsp.get_total() + max_tmsp.get_total())/2);
 8004c08:	443a      	add	r2, r7
 8004c0a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31

/*
* Returns a timestamp object from the total timestamp integer
*/
Timestamp Timestamp::from_total(int total_timestamp) {
    return Timestamp(total_timestamp % BUF_LEN, total_timestamp / BUF_LEN);
 8004c0e:	4c21      	ldr	r4, [pc, #132]	@ (8004c94 <_ZN15MaxPeakDetector11search_loopEv+0x124>)
                        Timestamp average_tmsp = Timestamp::from_total((min_tmsp.get_total() + max_tmsp.get_total())/2);
 8004c10:	ea4f 0e62 	mov.w	lr, r2, asr #1
    return Timestamp(total_timestamp % BUF_LEN, total_timestamp / BUF_LEN);
 8004c14:	fb84 740e 	smull	r7, r4, r4, lr
 8004c18:	17d2      	asrs	r2, r2, #31
 8004c1a:	ebc2 3764 	rsb	r7, r2, r4, asr #13
 8004c1e:	fb0c e717 	mls	r7, ip, r7, lr
 8004c22:	ebc2 3464 	rsb	r4, r2, r4, asr #13
					tentative_max_val = 0;
 8004c26:	2200      	movs	r2, #0
					tentative_max_idx = 0;
 8004c28:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
					tentative_min_idx = 0;
 8004c2c:	e9c0 2210 	strd	r2, r2, [r0, #64]	@ 0x40
					tentative_max_pfx = 0;
 8004c30:	6382      	str	r2, [r0, #56]	@ 0x38
					window_count = 0;
 8004c32:	6482      	str	r2, [r0, #72]	@ 0x48
					search_sub_state = MPDSearchState::DEAD_ZONE;
 8004c34:	2202      	movs	r2, #2
 8004c36:	60c2      	str	r2, [r0, #12]
                    tentative_min_val = 4096;
 8004c38:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
                        last_peak_idx = average_tmsp.idx;
 8004c3c:	e9c0 6709 	strd	r6, r7, [r0, #36]	@ 0x24
                        last_peak_pfx = average_tmsp.pfx;
 8004c40:	62c4      	str	r4, [r0, #44]	@ 0x2c
                    tentative_min_val = 4096;
 8004c42:	63c2      	str	r2, [r0, #60]	@ 0x3c
					search_sub_state = MPDSearchState::DEAD_ZONE;
 8004c44:	e00f      	b.n	8004c66 <_ZN15MaxPeakDetector11search_loopEv+0xf6>
		} else if (global_state == MPDState::PROC_BUF_2ND_HLF && (cur_idx >= (BUF_LEN))) {
 8004c46:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004c48:	f244 634f 	movw	r3, #17999	@ 0x464f
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	ddaa      	ble.n	8004ba6 <_ZN15MaxPeakDetector11search_loopEv+0x36>
			global_state = MPDState::IDLE;
 8004c50:	2300      	movs	r3, #0
 8004c52:	600b      	str	r3, [r1, #0]
			cur_idx = 0;
 8004c54:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8004c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
				} else if (cur_val > tentative_max_val) { //new max
 8004c58:	42b4      	cmp	r4, r6
 8004c5a:	dd0a      	ble.n	8004c72 <_ZN15MaxPeakDetector11search_loopEv+0x102>
					tentative_max_pfx = cur_pfx;
 8004c5c:	4a0e      	ldr	r2, [pc, #56]	@ (8004c98 <_ZN15MaxPeakDetector11search_loopEv+0x128>)
					tentative_max_val = cur_val;
 8004c5e:	6304      	str	r4, [r0, #48]	@ 0x30
					tentative_max_pfx = cur_pfx;
 8004c60:	6812      	ldr	r2, [r2, #0]
					tentative_max_idx = cur_idx;
 8004c62:	6343      	str	r3, [r0, #52]	@ 0x34
					tentative_max_pfx = cur_pfx;
 8004c64:	6382      	str	r2, [r0, #56]	@ 0x38
				cur_idx++;
 8004c66:	3301      	adds	r3, #1
 8004c68:	6503      	str	r3, [r0, #80]	@ 0x50
				break;
 8004c6a:	e796      	b.n	8004b9a <_ZN15MaxPeakDetector11search_loopEv+0x2a>
                    cur_idx = BUF_LEN;
 8004c6c:	f244 6250 	movw	r2, #18000	@ 0x4650
 8004c70:	e7b2      	b.n	8004bd8 <_ZN15MaxPeakDetector11search_loopEv+0x68>
				} else if (cur_val < tentative_min_val) { //new min
 8004c72:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004c74:	42a2      	cmp	r2, r4
 8004c76:	ddf6      	ble.n	8004c66 <_ZN15MaxPeakDetector11search_loopEv+0xf6>
					tentative_min_pfx = cur_pfx;
 8004c78:	4a07      	ldr	r2, [pc, #28]	@ (8004c98 <_ZN15MaxPeakDetector11search_loopEv+0x128>)
                    tentative_min_val = cur_val;
 8004c7a:	63c4      	str	r4, [r0, #60]	@ 0x3c
					tentative_min_pfx = cur_pfx;
 8004c7c:	6812      	ldr	r2, [r2, #0]
					tentative_min_idx = cur_idx;
 8004c7e:	6403      	str	r3, [r0, #64]	@ 0x40
					tentative_min_pfx = cur_pfx;
 8004c80:	6442      	str	r2, [r0, #68]	@ 0x44
 8004c82:	e7f0      	b.n	8004c66 <_ZN15MaxPeakDetector11search_loopEv+0xf6>
			global_state = MPDState::IDLE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	600b      	str	r3, [r1, #0]
}
 8004c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	2000000c 	.word	0x2000000c
 8004c90:	20000424 	.word	0x20000424
 8004c94:	7482296b 	.word	0x7482296b
 8004c98:	20000420 	.word	0x20000420

08004c9c <_ZN15MaxPeakDetector11detect_peakEv>:
Timestamp MaxPeakDetector :: detect_peak() {
 8004c9c:	b570      	push	{r4, r5, r6, lr}
    switch (global_state)
 8004c9e:	4d29      	ldr	r5, [pc, #164]	@ (8004d44 <_ZN15MaxPeakDetector11detect_peakEv+0xa8>)
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	2b02      	cmp	r3, #2
Timestamp MaxPeakDetector :: detect_peak() {
 8004ca4:	4606      	mov	r6, r0
 8004ca6:	460c      	mov	r4, r1
    switch (global_state)
 8004ca8:	d039      	beq.n	8004d1e <_ZN15MaxPeakDetector11detect_peakEv+0x82>
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d012      	beq.n	8004cd4 <_ZN15MaxPeakDetector11detect_peakEv+0x38>
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d13d      	bne.n	8004d2e <_ZN15MaxPeakDetector11detect_peakEv+0x92>
            if (cur_idx < BUF_LEN/2) {
 8004cb2:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004cb4:	f242 3327 	movw	r3, #8999	@ 0x2327
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	dd35      	ble.n	8004d28 <_ZN15MaxPeakDetector11detect_peakEv+0x8c>
    Timestamp tmsp(last_peak_idx, last_peak_pfx);
 8004cbc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004cbe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
                global_state = MPDState::IDLE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	602b      	str	r3, [r5, #0]
    last_peak_idx = -1;
 8004cc4:	f04f 33ff 	mov.w	r3, #4294967295
    this->idx = idx;
 8004cc8:	e9c6 2100 	strd	r2, r1, [r6]
    last_peak_idx = -1;
 8004ccc:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
}
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	bd70      	pop	{r4, r5, r6, pc}
    (*p_index_info_tx).transmit_err_1(cur_idx, cur_pfx); //send error notification
 8004cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d48 <_ZN15MaxPeakDetector11detect_peakEv+0xac>)
 8004cd6:	68a0      	ldr	r0, [r4, #8]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	6d09      	ldr	r1, [r1, #80]	@ 0x50
 8004cdc:	f7ff fefc 	bl	8004ad8 <_ZN11IndexInfoTX14transmit_err_1Eii>
    if (cur_idx > BUF_LEN/2) {
 8004ce0:	6d21      	ldr	r1, [r4, #80]	@ 0x50
	global_state = MPDState::IDLE; // then skip this half buffer and try on the next
 8004ce2:	2300      	movs	r3, #0
    if (cur_idx > BUF_LEN/2) {
 8004ce4:	f242 3228 	movw	r2, #9000	@ 0x2328
        cur_idx = BUF_LEN/2;
 8004ce8:	4291      	cmp	r1, r2
 8004cea:	bfd8      	it	le
 8004cec:	461a      	movle	r2, r3
 8004cee:	6522      	str	r2, [r4, #80]	@ 0x50
    tentative_min_val = 4096;
 8004cf0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
}
 8004cf4:	f04f 32ff 	mov.w	r2, #4294967295
    tentative_min_val = 4096;
 8004cf8:	e9c4 310e 	strd	r3, r1, [r4, #56]	@ 0x38
    tentative_max_idx = 0;
 8004cfc:	e9c4 330c 	strd	r3, r3, [r4, #48]	@ 0x30
    tentative_min_pfx = 0;
 8004d00:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
    dead_zone_count = 0;
 8004d04:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
	global_state = MPDState::IDLE; // then skip this half buffer and try on the next
 8004d08:	602b      	str	r3, [r5, #0]
	search_sub_state = MPDSearchState::FIND_SIGNAL;
 8004d0a:	60e3      	str	r3, [r4, #12]
}
 8004d0c:	4611      	mov	r1, r2
    last_peak_idx = -1;
 8004d0e:	f04f 33ff 	mov.w	r3, #4294967295
    this->idx = idx;
 8004d12:	e9c6 2100 	strd	r2, r1, [r6]
    last_peak_idx = -1;
 8004d16:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
}
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	bd70      	pop	{r4, r5, r6, pc}
            if (cur_idx >= BUF_LEN/2) {
 8004d1e:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004d20:	f242 3327 	movw	r3, #8999	@ 0x2327
 8004d24:	429a      	cmp	r2, r3
 8004d26:	ddc9      	ble.n	8004cbc <_ZN15MaxPeakDetector11detect_peakEv+0x20>
                search_loop();
 8004d28:	4620      	mov	r0, r4
 8004d2a:	f7ff ff21 	bl	8004b70 <_ZN15MaxPeakDetector11search_loopEv>
    Timestamp tmsp(last_peak_idx, last_peak_pfx);
 8004d2e:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
    last_peak_idx = -1;
 8004d32:	f04f 33ff 	mov.w	r3, #4294967295
    this->idx = idx;
 8004d36:	e9c6 2100 	strd	r2, r1, [r6]
    last_peak_idx = -1;
 8004d3a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
}
 8004d3e:	4630      	mov	r0, r6
 8004d40:	bd70      	pop	{r4, r5, r6, pc}
 8004d42:	bf00      	nop
 8004d44:	2000000c 	.word	0x2000000c
 8004d48:	20000420 	.word	0x20000420

08004d4c <HAL_ADC_ConvHalfCpltCallback>:
    MaxPeakDetector::cur_pfx = (MaxPeakDetector::cur_pfx + 1)%(0x8000); //roll-over after 0x7FFF to fit packet needs
 8004d4c:	490c      	ldr	r1, [pc, #48]	@ (8004d80 <HAL_ADC_ConvHalfCpltCallback+0x34>)
		switch (MaxPeakDetector::global_state)
 8004d4e:	480d      	ldr	r0, [pc, #52]	@ (8004d84 <HAL_ADC_ConvHalfCpltCallback+0x38>)
    MaxPeakDetector::cur_pfx = (MaxPeakDetector::cur_pfx + 1)%(0x8000); //roll-over after 0x7FFF to fit packet needs
 8004d50:	680b      	ldr	r3, [r1, #0]
 8004d52:	3301      	adds	r3, #1
 8004d54:	425a      	negs	r2, r3
 8004d56:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004d5a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004d5e:	bf58      	it	pl
 8004d60:	4253      	negpl	r3, r2
 8004d62:	600b      	str	r3, [r1, #0]
		switch (MaxPeakDetector::global_state)
 8004d64:	6803      	ldr	r3, [r0, #0]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d003      	beq.n	8004d72 <HAL_ADC_ConvHalfCpltCallback+0x26>
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d001      	beq.n	8004d72 <HAL_ADC_ConvHalfCpltCallback+0x26>
 8004d6e:	b11b      	cbz	r3, 8004d78 <HAL_ADC_ConvHalfCpltCallback+0x2c>
 8004d70:	4770      	bx	lr
				MaxPeakDetector::global_state = MPDState::ERROR_1;
 8004d72:	2303      	movs	r3, #3
 8004d74:	6003      	str	r3, [r0, #0]
				break;
 8004d76:	4770      	bx	lr
				MaxPeakDetector::global_state = MPDState::PROC_BUF_1ST_HLF;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	6003      	str	r3, [r0, #0]
}
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	20000420 	.word	0x20000420
 8004d84:	2000000c 	.word	0x2000000c

08004d88 <HAL_ADC_ConvCpltCallback>:
		switch (MaxPeakDetector::global_state)
 8004d88:	4a06      	ldr	r2, [pc, #24]	@ (8004da4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8004d8a:	6813      	ldr	r3, [r2, #0]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d003      	beq.n	8004d98 <HAL_ADC_ConvCpltCallback+0x10>
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d001      	beq.n	8004d98 <HAL_ADC_ConvCpltCallback+0x10>
 8004d94:	b11b      	cbz	r3, 8004d9e <HAL_ADC_ConvCpltCallback+0x16>
 8004d96:	4770      	bx	lr
				MaxPeakDetector::global_state = MPDState::ERROR_1;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	6013      	str	r3, [r2, #0]
				break;
 8004d9c:	4770      	bx	lr
				MaxPeakDetector::global_state = MPDState::PROC_BUF_2ND_HLF;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	6013      	str	r3, [r2, #0]
}
 8004da2:	4770      	bx	lr
 8004da4:	2000000c 	.word	0x2000000c

08004da8 <_ZN13PGA_cascade_2C1EP19OPAMP_HandleTypeDefS1_>:



PGA_cascade_2::PGA_cascade_2(OPAMP_HandleTypeDef* p_opamp_1, OPAMP_HandleTypeDef* p_opamp_2) {
    pga1.p_hopamp = p_opamp_1;
    pga2.p_hopamp = p_opamp_2;
 8004da8:	e9c0 1200 	strd	r1, r2, [r0]
}
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop

08004db0 <_ZN13PGA_cascade_27setGainEi>:
   8   |   256

Indexes not in [2,8] will be ignored.
*/
void PGA_cascade_2::setGain(int index) {
    switch (index)
 8004db0:	3902      	subs	r1, #2
 8004db2:	2906      	cmp	r1, #6
 8004db4:	d819      	bhi.n	8004dea <_ZN13PGA_cascade_27setGainEi+0x3a>
 8004db6:	e8df f001 	tbb	[pc, r1]
 8004dba:	2e19      	.short	0x2e19
 8004dbc:	705b4f3a 	.word	0x705b4f3a
 8004dc0:	04          	.byte	0x04
 8004dc1:	00          	.byte	0x00
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004dc2:	e9d0 2300 	ldrd	r2, r3, [r0]
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6811      	ldr	r1, [r2, #0]
 8004dcc:	f441 3170 	orr.w	r1, r1, #245760	@ 0x3c000
 8004dd0:	6011      	str	r1, [r2, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_16;
 8004dd2:	6811      	ldr	r1, [r2, #0]
 8004dd4:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8004dd8:	6011      	str	r1, [r2, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	f442 3270 	orr.w	r2, r2, #245760	@ 0x3c000
 8004de0:	601a      	str	r2, [r3, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_16;
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004de8:	601a      	str	r2, [r3, #0]
        break;
    
    default:
        break;
    }
}
 8004dea:	4770      	bx	lr
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004dec:	e9d0 2300 	ldrd	r2, r3, [r0]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6811      	ldr	r1, [r2, #0]
 8004df6:	f441 3170 	orr.w	r1, r1, #245760	@ 0x3c000
 8004dfa:	6011      	str	r1, [r2, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_2;
 8004dfc:	6811      	ldr	r1, [r2, #0]
 8004dfe:	f421 3170 	bic.w	r1, r1, #245760	@ 0x3c000
	    p_hopamp->Instance->CSR &= MY_GAIN_4;
 8004e02:	6011      	str	r1, [r2, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	f442 3270 	orr.w	r2, r2, #245760	@ 0x3c000
 8004e0a:	601a      	str	r2, [r3, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_2;
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	f422 3270 	bic.w	r2, r2, #245760	@ 0x3c000
 8004e12:	601a      	str	r2, [r3, #0]
        break;
 8004e14:	4770      	bx	lr
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e16:	e9d0 2300 	ldrd	r2, r3, [r0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e1a:	6812      	ldr	r2, [r2, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e1c:	681b      	ldr	r3, [r3, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e1e:	6811      	ldr	r1, [r2, #0]
 8004e20:	f441 3170 	orr.w	r1, r1, #245760	@ 0x3c000
 8004e24:	6011      	str	r1, [r2, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_4;
 8004e26:	6811      	ldr	r1, [r2, #0]
 8004e28:	f421 3160 	bic.w	r1, r1, #229376	@ 0x38000
 8004e2c:	e7e9      	b.n	8004e02 <_ZN13PGA_cascade_27setGainEi+0x52>
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e2e:	e9d0 2300 	ldrd	r2, r3, [r0]
 8004e32:	6812      	ldr	r2, [r2, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6811      	ldr	r1, [r2, #0]
 8004e38:	f441 3170 	orr.w	r1, r1, #245760	@ 0x3c000
 8004e3c:	6011      	str	r1, [r2, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_4;
 8004e3e:	6811      	ldr	r1, [r2, #0]
 8004e40:	f421 3160 	bic.w	r1, r1, #229376	@ 0x38000
	    p_hopamp->Instance->CSR &= MY_GAIN_8;
 8004e44:	6011      	str	r1, [r2, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	f442 3270 	orr.w	r2, r2, #245760	@ 0x3c000
 8004e4c:	601a      	str	r2, [r3, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_4;
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	f422 3260 	bic.w	r2, r2, #229376	@ 0x38000
 8004e54:	601a      	str	r2, [r3, #0]
        break;
 8004e56:	4770      	bx	lr
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e58:	e9d0 2300 	ldrd	r2, r3, [r0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e5c:	6812      	ldr	r2, [r2, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e5e:	681b      	ldr	r3, [r3, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e60:	6811      	ldr	r1, [r2, #0]
 8004e62:	f441 3170 	orr.w	r1, r1, #245760	@ 0x3c000
 8004e66:	6011      	str	r1, [r2, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_8;
 8004e68:	6811      	ldr	r1, [r2, #0]
 8004e6a:	f421 3150 	bic.w	r1, r1, #212992	@ 0x34000
 8004e6e:	e7e9      	b.n	8004e44 <_ZN13PGA_cascade_27setGainEi+0x94>
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e70:	e9d0 2300 	ldrd	r2, r3, [r0]
 8004e74:	6812      	ldr	r2, [r2, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6811      	ldr	r1, [r2, #0]
 8004e7a:	f441 3170 	orr.w	r1, r1, #245760	@ 0x3c000
 8004e7e:	6011      	str	r1, [r2, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_8;
 8004e80:	6811      	ldr	r1, [r2, #0]
 8004e82:	f421 3150 	bic.w	r1, r1, #212992	@ 0x34000
	    p_hopamp->Instance->CSR &= MY_GAIN_16;
 8004e86:	6011      	str	r1, [r2, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	f442 3270 	orr.w	r2, r2, #245760	@ 0x3c000
 8004e8e:	601a      	str	r2, [r3, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_8;
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	f422 3250 	bic.w	r2, r2, #212992	@ 0x34000
 8004e96:	601a      	str	r2, [r3, #0]
        break;
 8004e98:	4770      	bx	lr
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e9a:	e9d0 2300 	ldrd	r2, r3, [r0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004e9e:	6812      	ldr	r2, [r2, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004ea0:	681b      	ldr	r3, [r3, #0]
        p_hopamp->Instance->CSR |= MY_GAIN_MASK;
 8004ea2:	6811      	ldr	r1, [r2, #0]
 8004ea4:	f441 3170 	orr.w	r1, r1, #245760	@ 0x3c000
 8004ea8:	6011      	str	r1, [r2, #0]
	    p_hopamp->Instance->CSR &= MY_GAIN_16;
 8004eaa:	6811      	ldr	r1, [r2, #0]
 8004eac:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8004eb0:	e7e9      	b.n	8004e86 <_ZN13PGA_cascade_27setGainEi+0xd6>
 8004eb2:	bf00      	nop

08004eb4 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef>:




void first_half_written_callback(DMA_HandleTypeDef *hdma) {
    if (PingOut::debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);} 
 8004eb4:	4b24      	ldr	r3, [pc, #144]	@ (8004f48 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x94>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
void first_half_written_callback(DMA_HandleTypeDef *hdma) {
 8004eb8:	b510      	push	{r4, lr}
    if (PingOut::debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);} 
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d13d      	bne.n	8004f3a <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x86>
    PingOut::cur_out_pfx = (PingOut::cur_out_pfx + 1)%(0x8000); //roll-over after 0x7FFF to match peak detector
 8004ebe:	4a23      	ldr	r2, [pc, #140]	@ (8004f4c <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x98>)
    PingOut::po_state = POState::FIRST_HLF_FREE;
 8004ec0:	4823      	ldr	r0, [pc, #140]	@ (8004f50 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x9c>)
    PingOut::cur_out_pfx = (PingOut::cur_out_pfx + 1)%(0x8000); //roll-over after 0x7FFF to match peak detector
 8004ec2:	6813      	ldr	r3, [r2, #0]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	4259      	negs	r1, r3
 8004ec8:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8004ecc:	f3c3 030e 	ubfx	r3, r3, #0, #15
    PingOut::po_state = POState::FIRST_HLF_FREE;
 8004ed0:	f04f 0400 	mov.w	r4, #0
    PingOut::cur_out_pfx = (PingOut::cur_out_pfx + 1)%(0x8000); //roll-over after 0x7FFF to match peak detector
 8004ed4:	bf58      	it	pl
 8004ed6:	424b      	negpl	r3, r1
    if (PingOut::time_to_clear < 2) {
 8004ed8:	491e      	ldr	r1, [pc, #120]	@ (8004f54 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0xa0>)
    PingOut::cur_out_pfx = (PingOut::cur_out_pfx + 1)%(0x8000); //roll-over after 0x7FFF to match peak detector
 8004eda:	6013      	str	r3, [r2, #0]
    PingOut::po_state = POState::FIRST_HLF_FREE;
 8004edc:	6004      	str	r4, [r0, #0]
    if (PingOut::time_to_clear < 2) {
 8004ede:	680b      	ldr	r3, [r1, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	dc02      	bgt.n	8004eea <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x36>
        PingOut::time_to_clear++;
 8004ee4:	680b      	ldr	r3, [r1, #0]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	600b      	str	r3, [r1, #0]
    }
    
    //periodic scheduling
    if ((PingOut::cur_out_pfx%PingOut::schedule_period) == 0)
 8004eea:	491b      	ldr	r1, [pc, #108]	@ (8004f58 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0xa4>)
 8004eec:	6813      	ldr	r3, [r2, #0]
 8004eee:	680a      	ldr	r2, [r1, #0]
 8004ef0:	fb93 f1f2 	sdiv	r1, r3, r2
 8004ef4:	fb02 3311 	mls	r3, r2, r1, r3
 8004ef8:	b913      	cbnz	r3, 8004f00 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x4c>
    {
        PingOut::time_to_schedule_period = true;
 8004efa:	4b18      	ldr	r3, [pc, #96]	@ (8004f5c <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0xa8>)
 8004efc:	2201      	movs	r2, #1
 8004efe:	701a      	strb	r2, [r3, #0]
    }
    
    //datapacket impulses scheduling
    if(PingOut::datapacket_index>-1 && PingOut::datapacket_index<15){
 8004f00:	4b17      	ldr	r3, [pc, #92]	@ (8004f60 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0xac>)
 8004f02:	781a      	ldrb	r2, [r3, #0]
 8004f04:	781a      	ldrb	r2, [r3, #0]
 8004f06:	2a0e      	cmp	r2, #14
    	if(PingOut::datapacket_index==0) {
 8004f08:	781a      	ldrb	r2, [r3, #0]
    if(PingOut::datapacket_index>-1 && PingOut::datapacket_index<15){
 8004f0a:	d808      	bhi.n	8004f1e <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x6a>
    	if(PingOut::datapacket_index==0) {
 8004f0c:	b97a      	cbnz	r2, 8004f2e <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x7a>
			PingOut::time_to_schedule_databit = true;
		}
		else if (PingOut::codeword[PingOut::datapacket_index]){
			PingOut::time_to_schedule_databit = true;
 8004f0e:	4a15      	ldr	r2, [pc, #84]	@ (8004f64 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0xb0>)
 8004f10:	2101      	movs	r1, #1
 8004f12:	7011      	strb	r1, [r2, #0]
		}
    	PingOut::datapacket_index+=1;
 8004f14:	781a      	ldrb	r2, [r3, #0]
 8004f16:	3201      	adds	r2, #1
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	701a      	strb	r2, [r3, #0]
    }
	else if(PingOut::datapacket_index==15){
		PingOut::time_to_schedule_databit = true;
		PingOut::datapacket_index=-1;
	}
}
 8004f1c:	bd10      	pop	{r4, pc}
	else if(PingOut::datapacket_index==15){
 8004f1e:	2a0f      	cmp	r2, #15
 8004f20:	d1fc      	bne.n	8004f1c <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x68>
		PingOut::time_to_schedule_databit = true;
 8004f22:	4910      	ldr	r1, [pc, #64]	@ (8004f64 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0xb0>)
 8004f24:	2001      	movs	r0, #1
		PingOut::datapacket_index=-1;
 8004f26:	22ff      	movs	r2, #255	@ 0xff
		PingOut::time_to_schedule_databit = true;
 8004f28:	7008      	strb	r0, [r1, #0]
		PingOut::datapacket_index=-1;
 8004f2a:	701a      	strb	r2, [r3, #0]
}
 8004f2c:	bd10      	pop	{r4, pc}
		else if (PingOut::codeword[PingOut::datapacket_index]){
 8004f2e:	781a      	ldrb	r2, [r3, #0]
 8004f30:	490d      	ldr	r1, [pc, #52]	@ (8004f68 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0xb4>)
 8004f32:	5c8a      	ldrb	r2, [r1, r2]
 8004f34:	2a00      	cmp	r2, #0
 8004f36:	d0ed      	beq.n	8004f14 <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x60>
 8004f38:	e7e9      	b.n	8004f0e <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0x5a>
    if (PingOut::debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);} 
 8004f3a:	480c      	ldr	r0, [pc, #48]	@ (8004f6c <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0xb8>)
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004f42:	f7fc fceb 	bl	800191c <HAL_GPIO_WritePin>
 8004f46:	e7ba      	b.n	8004ebe <_Z27first_half_written_callbackP19__DMA_HandleTypeDef+0xa>
 8004f48:	200090c4 	.word	0x200090c4
 8004f4c:	200090dc 	.word	0x200090dc
 8004f50:	20000018 	.word	0x20000018
 8004f54:	20000014 	.word	0x20000014
 8004f58:	200090d8 	.word	0x200090d8
 8004f5c:	200090c6 	.word	0x200090c6
 8004f60:	20000010 	.word	0x20000010
 8004f64:	200090c5 	.word	0x200090c5
 8004f68:	200090c8 	.word	0x200090c8
 8004f6c:	48000800 	.word	0x48000800

08004f70 <_Z27secnd_half_written_callbackP19__DMA_HandleTypeDef>:

void secnd_half_written_callback(DMA_HandleTypeDef *hdma) {
 8004f70:	b508      	push	{r3, lr}
    if (PingOut::debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);} 
 8004f72:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa0 <_Z27secnd_half_written_callbackP19__DMA_HandleTypeDef+0x30>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	b95b      	cbnz	r3, 8004f90 <_Z27secnd_half_written_callbackP19__DMA_HandleTypeDef+0x20>
    PingOut::po_state = POState::SECND_HLF_FREE;
 8004f78:	4a0a      	ldr	r2, [pc, #40]	@ (8004fa4 <_Z27secnd_half_written_callbackP19__DMA_HandleTypeDef+0x34>)
    if (PingOut::time_to_clear < 2) {
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa8 <_Z27secnd_half_written_callbackP19__DMA_HandleTypeDef+0x38>)
    PingOut::po_state = POState::SECND_HLF_FREE;
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	6011      	str	r1, [r2, #0]
    if (PingOut::time_to_clear < 2) {
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	428a      	cmp	r2, r1
 8004f84:	dd00      	ble.n	8004f88 <_Z27secnd_half_written_callbackP19__DMA_HandleTypeDef+0x18>
        PingOut::time_to_clear++;
    }
    
}
 8004f86:	bd08      	pop	{r3, pc}
        PingOut::time_to_clear++;
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	440a      	add	r2, r1
 8004f8c:	601a      	str	r2, [r3, #0]
}
 8004f8e:	bd08      	pop	{r3, pc}
    if (PingOut::debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);} 
 8004f90:	4806      	ldr	r0, [pc, #24]	@ (8004fac <_Z27secnd_half_written_callbackP19__DMA_HandleTypeDef+0x3c>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004f98:	f7fc fcc0 	bl	800191c <HAL_GPIO_WritePin>
 8004f9c:	e7ec      	b.n	8004f78 <_Z27secnd_half_written_callbackP19__DMA_HandleTypeDef+0x8>
 8004f9e:	bf00      	nop
 8004fa0:	200090c4 	.word	0x200090c4
 8004fa4:	20000018 	.word	0x20000018
 8004fa8:	20000014 	.word	0x20000014
 8004fac:	48000800 	.word	0x48000800

08004fb0 <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef>:
PingOut :: PingOut(DMA_HandleTypeDef* p_hdma_tim2_up, TIM_HandleTypeDef* p_htim2) {
 8004fb0:	b570      	push	{r4, r5, r6, lr}
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	4608      	mov	r0, r1
 8004fb6:	4616      	mov	r6, r2
    p_hdma_tim2_up->XferCpltCallback =     secnd_half_written_callback;
 8004fb8:	4a16      	ldr	r2, [pc, #88]	@ (8005014 <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef+0x64>)
 8004fba:	6282      	str	r2, [r0, #40]	@ 0x28
    peak_count = 4;
 8004fbc:	2204      	movs	r2, #4
    scheduled_idx = -1;
 8004fbe:	f04f 33ff 	mov.w	r3, #4294967295
    peak_count = 4;
 8004fc2:	61aa      	str	r2, [r5, #24]
 8004fc4:	2206      	movs	r2, #6
    scheduled_idx = -1;
 8004fc6:	e9c5 3302 	strd	r3, r3, [r5, #8]
    peak_count = 4;
 8004fca:	61ea      	str	r2, [r5, #28]
    clear_idx = -1;
 8004fcc:	612b      	str	r3, [r5, #16]
    periodic_schedule_enable = false;
 8004fce:	2200      	movs	r2, #0
    codeword[0]=true;
 8004fd0:	4b11      	ldr	r3, [pc, #68]	@ (8005018 <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef+0x68>)
    periodic_schedule_enable = false;
 8004fd2:	752a      	strb	r2, [r5, #20]
    codeword[0]=true;
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	701a      	strb	r2, [r3, #0]
    codeword[15]=true;
 8004fd8:	73da      	strb	r2, [r3, #15]
    this->p_htim2 = p_htim2;
 8004fda:	e9c5 0600 	strd	r0, r6, [r5]
 8004fde:	4b0f      	ldr	r3, [pc, #60]	@ (800501c <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef+0x6c>)
    p_hdma_tim2_up->XferHalfCpltCallback = first_half_written_callback;
 8004fe0:	490f      	ldr	r1, [pc, #60]	@ (8005020 <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef+0x70>)
 8004fe2:	4c10      	ldr	r4, [pc, #64]	@ (8005024 <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef+0x74>)
 8004fe4:	62c1      	str	r1, [r0, #44]	@ 0x2c
		out_buf[i] = BSRR_PC6_RESET_MASK;
 8004fe6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004fea:	1d19      	adds	r1, r3, #4
 8004fec:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int i = 0; i < OUT_BUF_LEN; i++) {
 8004ff0:	42a3      	cmp	r3, r4
 8004ff2:	d1fb      	bne.n	8004fec <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef+0x3c>
	HAL_DMA_Start_IT(p_hdma_tim2_up, 
 8004ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8005028 <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef+0x78>)
 8004ff6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004ffa:	f7fc fa05 	bl	8001408 <HAL_DMA_Start_IT>
    HAL_TIM_Base_Start(p_htim2);
 8004ffe:	4630      	mov	r0, r6
 8005000:	f7fd fcc6 	bl	8002990 <HAL_TIM_Base_Start>
	TIM2->DIER |= (1<<8); //set UDE bit (update dma request enable)
 8005004:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
}
 8005008:	4628      	mov	r0, r5
	TIM2->DIER |= (1<<8); //set UDE bit (update dma request enable)
 800500a:	68d3      	ldr	r3, [r2, #12]
 800500c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005010:	60d3      	str	r3, [r2, #12]
}
 8005012:	bd70      	pop	{r4, r5, r6, pc}
 8005014:	08004f71 	.word	0x08004f71
 8005018:	200090c8 	.word	0x200090c8
 800501c:	200090dc 	.word	0x200090dc
 8005020:	08004eb5 	.word	0x08004eb5
 8005024:	2000bfbc 	.word	0x2000bfbc
 8005028:	48000818 	.word	0x48000818

0800502c <_ZN7PingOut13schedule_pingEii>:
    scheduled_idx = idx/samples_per_half_period;
 800502c:	69c3      	ldr	r3, [r0, #28]
    scheduled_pfx = pfx;
 800502e:	60c2      	str	r2, [r0, #12]
    scheduled_idx = idx/samples_per_half_period;
 8005030:	fb91 f1f3 	sdiv	r1, r1, r3
 8005034:	6081      	str	r1, [r0, #8]
}
 8005036:	4770      	bx	lr

08005038 <_ZN7PingOut3setEi>:
void PingOut::set(int out_idx) {
 8005038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);}
 800503c:	4c27      	ldr	r4, [pc, #156]	@ (80050dc <_ZN7PingOut3setEi+0xa4>)
 800503e:	f894 8000 	ldrb.w	r8, [r4]
void PingOut::set(int out_idx) {
 8005042:	4607      	mov	r7, r0
 8005044:	460e      	mov	r6, r1
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);}
 8005046:	f1b8 0f00 	cmp.w	r8, #0
 800504a:	d128      	bne.n	800509e <_ZN7PingOut3setEi+0x66>
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 800504c:	6985      	ldr	r5, [r0, #24]
 800504e:	006d      	lsls	r5, r5, #1
 8005050:	2d00      	cmp	r5, #0
 8005052:	dd38      	ble.n	80050c6 <_ZN7PingOut3setEi+0x8e>
 8005054:	f8df a090 	ldr.w	sl, [pc, #144]	@ 80050e8 <_ZN7PingOut3setEi+0xb0>
 8005058:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80050ec <_ZN7PingOut3setEi+0xb4>
void PingOut::set(int out_idx) {
 800505c:	2300      	movs	r3, #0
        out_buf[out_idx + i] = BSRR_PC6_SET_MASK;
 800505e:	2040      	movs	r0, #64	@ 0x40
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 8005060:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8005064:	1c9a      	adds	r2, r3, #2
 8005066:	fb89 c402 	smull	ip, r4, r9, r2
 800506a:	ea4f 7ee2 	mov.w	lr, r2, asr #31
        out_buf[out_idx + i] = BSRR_PC6_SET_MASK;
 800506e:	eb06 0c03 	add.w	ip, r6, r3
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 8005072:	ebce 13a4 	rsb	r3, lr, r4, asr #6
 8005076:	fb01 2313 	mls	r3, r1, r3, r2
 800507a:	42ab      	cmp	r3, r5
        out_buf[out_idx + i] = BSRR_PC6_SET_MASK;
 800507c:	f84a 002c 	str.w	r0, [sl, ip, lsl #2]
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 8005080:	dbf0      	blt.n	8005064 <_ZN7PingOut3setEi+0x2c>
    time_to_clear = 0;
 8005082:	4817      	ldr	r0, [pc, #92]	@ (80050e0 <_ZN7PingOut3setEi+0xa8>)
    clear_idx = scheduled_idx;
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	6139      	str	r1, [r7, #16]
    scheduled_idx = -1;
 8005088:	f04f 33ff 	mov.w	r3, #4294967295
    time_to_clear = 0;
 800508c:	2200      	movs	r2, #0
    scheduled_idx = -1;
 800508e:	e9c7 3302 	strd	r3, r3, [r7, #8]
    time_to_clear = 0;
 8005092:	6002      	str	r2, [r0, #0]
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);} 
 8005094:	f1b8 0f00 	cmp.w	r8, #0
 8005098:	d10e      	bne.n	80050b8 <_ZN7PingOut3setEi+0x80>
}
 800509a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);}
 800509e:	4811      	ldr	r0, [pc, #68]	@ (80050e4 <_ZN7PingOut3setEi+0xac>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80050a6:	f7fc fc39 	bl	800191c <HAL_GPIO_WritePin>
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 80050aa:	69bd      	ldr	r5, [r7, #24]
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);} 
 80050ac:	f894 8000 	ldrb.w	r8, [r4]
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 80050b0:	006d      	lsls	r5, r5, #1
 80050b2:	2d00      	cmp	r5, #0
 80050b4:	dcce      	bgt.n	8005054 <_ZN7PingOut3setEi+0x1c>
 80050b6:	e7e4      	b.n	8005082 <_ZN7PingOut3setEi+0x4a>
}
 80050b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);} 
 80050bc:	4809      	ldr	r0, [pc, #36]	@ (80050e4 <_ZN7PingOut3setEi+0xac>)
 80050be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80050c2:	f7fc bc2b 	b.w	800191c <HAL_GPIO_WritePin>
    time_to_clear = 0;
 80050c6:	4a06      	ldr	r2, [pc, #24]	@ (80050e0 <_ZN7PingOut3setEi+0xa8>)
    clear_idx = scheduled_idx;
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	6139      	str	r1, [r7, #16]
    scheduled_idx = -1;
 80050cc:	f04f 33ff 	mov.w	r3, #4294967295
 80050d0:	e9c7 3302 	strd	r3, r3, [r7, #8]
    time_to_clear = 0;
 80050d4:	f8c2 8000 	str.w	r8, [r2]
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);} 
 80050d8:	e7df      	b.n	800509a <_ZN7PingOut3setEi+0x62>
 80050da:	bf00      	nop
 80050dc:	200090c4 	.word	0x200090c4
 80050e0:	20000014 	.word	0x20000014
 80050e4:	48000800 	.word	0x48000800
 80050e8:	200090e0 	.word	0x200090e0
 80050ec:	057619f1 	.word	0x057619f1

080050f0 <_ZN7PingOut5clearEi>:
void PingOut::clear(int out_idx) {
 80050f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);} 
 80050f4:	4c22      	ldr	r4, [pc, #136]	@ (8005180 <_ZN7PingOut5clearEi+0x90>)
 80050f6:	f894 8000 	ldrb.w	r8, [r4]
void PingOut::clear(int out_idx) {
 80050fa:	4607      	mov	r7, r0
 80050fc:	460e      	mov	r6, r1
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);} 
 80050fe:	f1b8 0f00 	cmp.w	r8, #0
 8005102:	d123      	bne.n	800514c <_ZN7PingOut5clearEi+0x5c>
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 8005104:	6985      	ldr	r5, [r0, #24]
 8005106:	006d      	lsls	r5, r5, #1
 8005108:	2d00      	cmp	r5, #0
 800510a:	dd34      	ble.n	8005176 <_ZN7PingOut5clearEi+0x86>
 800510c:	f8df a078 	ldr.w	sl, [pc, #120]	@ 8005188 <_ZN7PingOut5clearEi+0x98>
 8005110:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 800518c <_ZN7PingOut5clearEi+0x9c>
void PingOut::clear(int out_idx) {
 8005114:	2300      	movs	r3, #0
        out_buf[out_idx + i] = BSRR_PC6_RESET_MASK;
 8005116:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 800511a:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800511e:	1c9a      	adds	r2, r3, #2
 8005120:	fb89 c402 	smull	ip, r4, r9, r2
 8005124:	ea4f 7ee2 	mov.w	lr, r2, asr #31
        out_buf[out_idx + i] = BSRR_PC6_RESET_MASK;
 8005128:	eb06 0c03 	add.w	ip, r6, r3
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 800512c:	ebce 13a4 	rsb	r3, lr, r4, asr #6
 8005130:	fb01 2313 	mls	r3, r1, r3, r2
 8005134:	42ab      	cmp	r3, r5
        out_buf[out_idx + i] = BSRR_PC6_RESET_MASK;
 8005136:	f84a 002c 	str.w	r0, [sl, ip, lsl #2]
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 800513a:	dbf0      	blt.n	800511e <_ZN7PingOut5clearEi+0x2e>
    clear_idx = -1;
 800513c:	f04f 33ff 	mov.w	r3, #4294967295
 8005140:	613b      	str	r3, [r7, #16]
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);}
 8005142:	f1b8 0f00 	cmp.w	r8, #0
 8005146:	d10e      	bne.n	8005166 <_ZN7PingOut5clearEi+0x76>
}
 8005148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);} 
 800514c:	480d      	ldr	r0, [pc, #52]	@ (8005184 <_ZN7PingOut5clearEi+0x94>)
 800514e:	2201      	movs	r2, #1
 8005150:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005154:	f7fc fbe2 	bl	800191c <HAL_GPIO_WritePin>
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 8005158:	69bd      	ldr	r5, [r7, #24]
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);}
 800515a:	f894 8000 	ldrb.w	r8, [r4]
    for (int i = 0; i < peak_count*2; i = (i+2)%(OUT_BUF_LEN)) {
 800515e:	006d      	lsls	r5, r5, #1
 8005160:	2d00      	cmp	r5, #0
 8005162:	dcd3      	bgt.n	800510c <_ZN7PingOut5clearEi+0x1c>
 8005164:	e7ea      	b.n	800513c <_ZN7PingOut5clearEi+0x4c>
}
 8005166:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);}
 800516a:	4806      	ldr	r0, [pc, #24]	@ (8005184 <_ZN7PingOut5clearEi+0x94>)
 800516c:	2200      	movs	r2, #0
 800516e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005172:	f7fc bbd3 	b.w	800191c <HAL_GPIO_WritePin>
    clear_idx = -1;
 8005176:	f04f 33ff 	mov.w	r3, #4294967295
 800517a:	6103      	str	r3, [r0, #16]
    if (debug) {HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);}
 800517c:	e7e4      	b.n	8005148 <_ZN7PingOut5clearEi+0x58>
 800517e:	bf00      	nop
 8005180:	200090c4 	.word	0x200090c4
 8005184:	48000800 	.word	0x48000800
 8005188:	200090e0 	.word	0x200090e0
 800518c:	057619f1 	.word	0x057619f1

08005190 <_ZN7PingOut6updateEv>:
void PingOut::update() {
 8005190:	b520      	push	{r5, lr}
    if (PingOut::time_to_schedule_period){
 8005192:	4a21      	ldr	r2, [pc, #132]	@ (8005218 <_ZN7PingOut6updateEv+0x88>)
 8005194:	7813      	ldrb	r3, [r2, #0]
void PingOut::update() {
 8005196:	b082      	sub	sp, #8
    if (PingOut::time_to_schedule_period){
 8005198:	b1ab      	cbz	r3, 80051c6 <_ZN7PingOut6updateEv+0x36>
        if (periodic_schedule_enable) {
 800519a:	7d03      	ldrb	r3, [r0, #20]
            scheduled_pfx = PingOut::cur_out_pfx;
 800519c:	4d1f      	ldr	r5, [pc, #124]	@ (800521c <_ZN7PingOut6updateEv+0x8c>)
        if (periodic_schedule_enable) {
 800519e:	b963      	cbnz	r3, 80051ba <_ZN7PingOut6updateEv+0x2a>
    if (clear_idx >= 0 && time_to_clear == 2) {
 80051a0:	6901      	ldr	r1, [r0, #16]
 80051a2:	2900      	cmp	r1, #0
 80051a4:	db03      	blt.n	80051ae <_ZN7PingOut6updateEv+0x1e>
 80051a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005220 <_ZN7PingOut6updateEv+0x90>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d029      	beq.n	8005202 <_ZN7PingOut6updateEv+0x72>
    if (PingOut::cur_out_pfx == scheduled_pfx) {
 80051ae:	682b      	ldr	r3, [r5, #0]
 80051b0:	68c2      	ldr	r2, [r0, #12]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d016      	beq.n	80051e4 <_ZN7PingOut6updateEv+0x54>
}
 80051b6:	b002      	add	sp, #8
 80051b8:	bd20      	pop	{r5, pc}
            scheduled_pfx = PingOut::cur_out_pfx;
 80051ba:	6829      	ldr	r1, [r5, #0]
            scheduled_idx = 0;
 80051bc:	2300      	movs	r3, #0
            scheduled_pfx = PingOut::cur_out_pfx;
 80051be:	e9c0 3102 	strd	r3, r1, [r0, #8]
            PingOut::time_to_schedule_period = false;
 80051c2:	7013      	strb	r3, [r2, #0]
 80051c4:	e7ec      	b.n	80051a0 <_ZN7PingOut6updateEv+0x10>
    else if(PingOut::time_to_schedule_databit){
 80051c6:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 80051ca:	4b16      	ldr	r3, [pc, #88]	@ (8005224 <_ZN7PingOut6updateEv+0x94>)
    	scheduled_pfx = PingOut::cur_out_pfx;
 80051cc:	4d13      	ldr	r5, [pc, #76]	@ (800521c <_ZN7PingOut6updateEv+0x8c>)
    else if(PingOut::time_to_schedule_databit){
 80051ce:	781a      	ldrb	r2, [r3, #0]
 80051d0:	2a00      	cmp	r2, #0
 80051d2:	d0e5      	beq.n	80051a0 <_ZN7PingOut6updateEv+0x10>
    	scheduled_pfx = PingOut::cur_out_pfx;
 80051d4:	682a      	ldr	r2, [r5, #0]
 80051d6:	60c2      	str	r2, [r0, #12]
    	time_to_clear = 2;
 80051d8:	4a11      	ldr	r2, [pc, #68]	@ (8005220 <_ZN7PingOut6updateEv+0x90>)
    	PingOut::time_to_schedule_databit = false;
 80051da:	7019      	strb	r1, [r3, #0]
    	time_to_clear = 2;
 80051dc:	2302      	movs	r3, #2
    	scheduled_idx = 0;
 80051de:	6081      	str	r1, [r0, #8]
    	time_to_clear = 2;
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e7dd      	b.n	80051a0 <_ZN7PingOut6updateEv+0x10>
        switch (PingOut::po_state)
 80051e4:	4b10      	ldr	r3, [pc, #64]	@ (8005228 <_ZN7PingOut6updateEv+0x98>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	b183      	cbz	r3, 800520c <_ZN7PingOut6updateEv+0x7c>
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d1e3      	bne.n	80051b6 <_ZN7PingOut6updateEv+0x26>
            if (scheduled_idx >= (OUT_BUF_LEN/2)) {
 80051ee:	6881      	ldr	r1, [r0, #8]
 80051f0:	f240 53db 	movw	r3, #1499	@ 0x5db
 80051f4:	4299      	cmp	r1, r3
 80051f6:	ddde      	ble.n	80051b6 <_ZN7PingOut6updateEv+0x26>
}
 80051f8:	b002      	add	sp, #8
 80051fa:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
                set(scheduled_idx);
 80051fe:	f7ff bf1b 	b.w	8005038 <_ZN7PingOut3setEi>
        clear(clear_idx);
 8005202:	9001      	str	r0, [sp, #4]
 8005204:	f7ff ff74 	bl	80050f0 <_ZN7PingOut5clearEi>
 8005208:	9801      	ldr	r0, [sp, #4]
 800520a:	e7d0      	b.n	80051ae <_ZN7PingOut6updateEv+0x1e>
            if (scheduled_idx < (OUT_BUF_LEN/2)) {
 800520c:	6881      	ldr	r1, [r0, #8]
 800520e:	f240 53db 	movw	r3, #1499	@ 0x5db
 8005212:	4299      	cmp	r1, r3
 8005214:	dccf      	bgt.n	80051b6 <_ZN7PingOut6updateEv+0x26>
 8005216:	e7ef      	b.n	80051f8 <_ZN7PingOut6updateEv+0x68>
 8005218:	200090c6 	.word	0x200090c6
 800521c:	200090dc 	.word	0x200090dc
 8005220:	20000014 	.word	0x20000014
 8005224:	200090c5 	.word	0x200090c5
 8005228:	20000018 	.word	0x20000018

0800522c <tof_master_main>:
                                TIM_HandleTypeDef* p_htim3,
                                UART_HandleTypeDef* p_huart,
                                OPAMP_HandleTypeDef* p_opamp_1,
                                OPAMP_HandleTypeDef* p_opamp_2,
                                DMA_HandleTypeDef* p_hdma_tim2_up,
                                TIM_HandleTypeDef* p_htim2) {
 800522c:	b570      	push	{r4, r5, r6, lr}
 800522e:	b0a4      	sub	sp, #144	@ 0x90
 8005230:	461e      	mov	r6, r3
 8005232:	4604      	mov	r4, r0
 8005234:	460d      	mov	r5, r1

    /******************* SETUP RX ************************/
    //CMD_RX cmd_rx(p_huart);
	IndexInfoTX idx_info_tx(p_huart);
 8005236:	a804      	add	r0, sp, #16
 8005238:	4611      	mov	r1, r2
 800523a:	f7ff fc4b 	bl	8004ad4 <_ZN11IndexInfoTXC1EP20__UART_HandleTypeDef>
	PGA_cascade_2 pgas(p_opamp_1, p_opamp_2);
 800523e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8005240:	4631      	mov	r1, r6
 8005242:	4668      	mov	r0, sp
 8005244:	f7ff fdb0 	bl	8004da8 <_ZN13PGA_cascade_2C1EP19OPAMP_HandleTypeDefS1_>
    pgas.setGain(2);
 8005248:	2102      	movs	r1, #2
 800524a:	4668      	mov	r0, sp
 800524c:	f7ff fdb0 	bl	8004db0 <_ZN13PGA_cascade_27setGainEi>


	//cmd_rx.start_receive();

	MaxPeakDetector max_peak_detector(p_hadc, p_htim3,  &idx_info_tx);
 8005250:	4621      	mov	r1, r4
 8005252:	ab04      	add	r3, sp, #16
 8005254:	462a      	mov	r2, r5
 8005256:	a80f      	add	r0, sp, #60	@ 0x3c
 8005258:	f7ff fc50 	bl	8004afc <_ZN15MaxPeakDetectorC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDefP11IndexInfoTX>

	//parameter tweaking:
	max_peak_detector.min_aid = true;
 800525c:	2301      	movs	r3, #1




    /******************* SETUP TX ************************/
    PingOut ping_out(p_hdma_tim2_up, p_htim2);
 800525e:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	@ 0xa4
 8005262:	a807      	add	r0, sp, #28
	max_peak_detector.min_aid = true;
 8005264:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
    int response_delay = 1; //units of full buffer temporal length (one less, so 0 is actually 1)
    int cooldown_duration = 50; //units of full buffer temporal length
    int resend_waiting_duration = 100; //if no signal is detected in 50 buffers resend request to transponder.
    int last_sent_pfx = 0;
 8005268:	2400      	movs	r4, #0
    PingOut ping_out(p_hdma_tim2_up, p_htim2);
 800526a:	f7ff fea1 	bl	8004fb0 <_ZN7PingOutC1EP19__DMA_HandleTypeDefP17TIM_HandleTypeDef>
    int last_sent_pfx = 0;
 800526e:	e009      	b.n	8005284 <tof_master_main+0x58>

    while (1) {

    	Timestamp pt = max_peak_detector.detect_peak();
    	if (pt.pfx != -1 && pt.pfx > last_sent_pfx + cooldown_duration) {
 8005270:	429a      	cmp	r2, r3
    		ping_out.schedule_ping(pt.idx, pt.pfx + response_delay);
 8005272:	a807      	add	r0, sp, #28
    	if (pt.pfx != -1 && pt.pfx > last_sent_pfx + cooldown_duration) {
 8005274:	da03      	bge.n	800527e <tof_master_main+0x52>
    		ping_out.schedule_ping(pt.idx, pt.pfx + response_delay);
 8005276:	1c5c      	adds	r4, r3, #1
 8005278:	4622      	mov	r2, r4
 800527a:	f7ff fed7 	bl	800502c <_ZN7PingOut13schedule_pingEii>
    	}
    	else if (pt.pfx == -1 && pt.pfx > last_sent_pfx + resend_waiting_duration){
    		ping_out.schedule_ping(pt.idx, pt.pfx + response_delay);
    	    last_sent_pfx = pt.pfx + response_delay;
    	}
        ping_out.update();
 800527e:	a807      	add	r0, sp, #28
 8005280:	f7ff ff86 	bl	8005190 <_ZN7PingOut6updateEv>
    	Timestamp pt = max_peak_detector.detect_peak();
 8005284:	a90f      	add	r1, sp, #60	@ 0x3c
 8005286:	a802      	add	r0, sp, #8
 8005288:	f7ff fd08 	bl	8004c9c <_ZN15MaxPeakDetector11detect_peakEv>
 800528c:	9b03      	ldr	r3, [sp, #12]
 800528e:	9902      	ldr	r1, [sp, #8]
    	if (pt.pfx != -1 && pt.pfx > last_sent_pfx + cooldown_duration) {
 8005290:	1c58      	adds	r0, r3, #1
 8005292:	f104 0232 	add.w	r2, r4, #50	@ 0x32
 8005296:	d1eb      	bne.n	8005270 <tof_master_main+0x44>
    	else if (pt.pfx == -1 && pt.pfx > last_sent_pfx + resend_waiting_duration){
 8005298:	f114 0f65 	cmn.w	r4, #101	@ 0x65
 800529c:	daef      	bge.n	800527e <tof_master_main+0x52>
    		ping_out.schedule_ping(pt.idx, pt.pfx + response_delay);
 800529e:	2200      	movs	r2, #0
 80052a0:	a807      	add	r0, sp, #28
 80052a2:	f7ff fec3 	bl	800502c <_ZN7PingOut13schedule_pingEii>
    	    last_sent_pfx = pt.pfx + response_delay;
 80052a6:	2400      	movs	r4, #0
 80052a8:	e7e9      	b.n	800527e <tof_master_main+0x52>
 80052aa:	bf00      	nop

080052ac <memset>:
 80052ac:	4402      	add	r2, r0
 80052ae:	4603      	mov	r3, r0
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d100      	bne.n	80052b6 <memset+0xa>
 80052b4:	4770      	bx	lr
 80052b6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ba:	e7f9      	b.n	80052b0 <memset+0x4>

080052bc <__libc_init_array>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	4d0d      	ldr	r5, [pc, #52]	@ (80052f4 <__libc_init_array+0x38>)
 80052c0:	4c0d      	ldr	r4, [pc, #52]	@ (80052f8 <__libc_init_array+0x3c>)
 80052c2:	1b64      	subs	r4, r4, r5
 80052c4:	10a4      	asrs	r4, r4, #2
 80052c6:	2600      	movs	r6, #0
 80052c8:	42a6      	cmp	r6, r4
 80052ca:	d109      	bne.n	80052e0 <__libc_init_array+0x24>
 80052cc:	4d0b      	ldr	r5, [pc, #44]	@ (80052fc <__libc_init_array+0x40>)
 80052ce:	4c0c      	ldr	r4, [pc, #48]	@ (8005300 <__libc_init_array+0x44>)
 80052d0:	f000 f818 	bl	8005304 <_init>
 80052d4:	1b64      	subs	r4, r4, r5
 80052d6:	10a4      	asrs	r4, r4, #2
 80052d8:	2600      	movs	r6, #0
 80052da:	42a6      	cmp	r6, r4
 80052dc:	d105      	bne.n	80052ea <__libc_init_array+0x2e>
 80052de:	bd70      	pop	{r4, r5, r6, pc}
 80052e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e4:	4798      	blx	r3
 80052e6:	3601      	adds	r6, #1
 80052e8:	e7ee      	b.n	80052c8 <__libc_init_array+0xc>
 80052ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ee:	4798      	blx	r3
 80052f0:	3601      	adds	r6, #1
 80052f2:	e7f2      	b.n	80052da <__libc_init_array+0x1e>
 80052f4:	08005614 	.word	0x08005614
 80052f8:	08005614 	.word	0x08005614
 80052fc:	08005614 	.word	0x08005614
 8005300:	08005618 	.word	0x08005618

08005304 <_init>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr

08005310 <_fini>:
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005312:	bf00      	nop
 8005314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005316:	bc08      	pop	{r3}
 8005318:	469e      	mov	lr, r3
 800531a:	4770      	bx	lr
